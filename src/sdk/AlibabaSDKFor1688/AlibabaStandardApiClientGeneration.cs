//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.3.0 (NJsonSchema v10.0.27.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using AlibabaSDK.StandardModels;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace AlibabaSDK
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.3.0 (NJsonSchema v10.0.27.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial interface IAlibabaStandardApiClient
    {
        /// <summary>查询标准化产品单元信息列表
        /// 一个类目下不同的规格属性代表一个SPU, 该API根据1688的类目获取标准化产品单元信息。注意：并不是所有的类目都拥有标准化产品单元信息。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.category.searchSPUInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.category.searchSPUInfo&amp;v=1</summary>
        /// <param name="categoryId">类目Id</param>
        /// <param name="index">当前页，无默认值</param>
        /// <param name="size">每页多少记录，无默认值</param>
        /// <param name="isNeedKeyAttr">是否需要关键属性</param>
        /// <param name="isOnlyKeyAttr">是否只需要关键属性</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400_1	- 查询时每页数量不能超过20。(每页最大的记录数是20)
        /// 5002	- 已授权用户必须传递aliId(API需要授权，请检查accessToken)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCategorySearchSPUInfoResult AlibabaCategorySearchSPUInfo(long categoryId, int index, int size, bool? isNeedKeyAttr = null, bool? isOnlyKeyAttr = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询标准化产品单元信息列表
        /// 一个类目下不同的规格属性代表一个SPU, 该API根据1688的类目获取标准化产品单元信息。注意：并不是所有的类目都拥有标准化产品单元信息。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.category.searchSPUInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.category.searchSPUInfo&amp;v=1</summary>
        /// <param name="categoryId">类目Id</param>
        /// <param name="index">当前页，无默认值</param>
        /// <param name="size">每页多少记录，无默认值</param>
        /// <param name="isNeedKeyAttr">是否需要关键属性</param>
        /// <param name="isOnlyKeyAttr">是否只需要关键属性</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400_1	- 查询时每页数量不能超过20。(每页最大的记录数是20)
        /// 5002	- 已授权用户必须传递aliId(API需要授权，请检查accessToken)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCategorySearchSPUInfoResult> AlibabaCategorySearchSPUInfoAsync(long categoryId, int index, int size, bool? isNeedKeyAttr = null, bool? isOnlyKeyAttr = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取类目属性层级级联信息
        /// 根据类目ID和层级属性表达式获取级联属性信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:category.level.attr.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=category.level.attr.get&amp;v=1</summary>
        /// <param name="catId">叶子类目ID</param>
        /// <param name="pathValues">属性值路径</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 200	- 成功(成功)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        CategoryLevelAttrGetResult CategoryLevelAttrGet(long catId, string pathValues);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取类目属性层级级联信息
        /// 根据类目ID和层级属性表达式获取级联属性信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:category.level.attr.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=category.level.attr.get&amp;v=1</summary>
        /// <param name="catId">叶子类目ID</param>
        /// <param name="pathValues">属性值路径</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 200	- 成功(成功)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoryLevelAttrGetResult> CategoryLevelAttrGetAsync(long catId, string pathValues, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取类目属性
        /// 根据类目ID获取类目属性
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.category.attribute.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.category.attribute.get&amp;v=1</summary>
        /// <param name="categoryID">类目ID</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_2	- 数据准备中，请稍后重试。(数据正在后台加载，稍后重试，间隔时间建议1～3s)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCategoryAttributeGetResult AlibabaCategoryAttributeGet(long categoryID, string webSite);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取类目属性
        /// 根据类目ID获取类目属性
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.category.attribute.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.category.attribute.get&amp;v=1</summary>
        /// <param name="categoryID">类目ID</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_2	- 数据准备中，请稍后重试。(数据正在后台加载，稍后重试，间隔时间建议1～3s)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCategoryAttributeGetResult> AlibabaCategoryAttributeGetAsync(long categoryID, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取标准化产品单元信息(1688)
        /// 这是根据1688的类目属性值获取标准化产品单元信息。注意：并不是所有的类目都拥有标准化产品单元信息。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.category.getSPUInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.category.getSPUInfo&amp;v=1</summary>
        /// <param name="categoryId">类目ID</param>
        /// <param name="keyAttrs">类目的规格属性列表</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400_1	- 查询时类目关键属性必须输入(入参keyAttrs是必填项)
        /// 400_2	- 查询时类目关键属性键值(fid, value)必须输入(入参keyAttrs中的属性值是必填项)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCategoryGetSPUInfoResult AlibabaCategoryGetSPUInfo(long categoryId, System.Collections.Generic.IEnumerable<AlibabaCategoryFeatureAttribute2> keyAttrs);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取标准化产品单元信息(1688)
        /// 这是根据1688的类目属性值获取标准化产品单元信息。注意：并不是所有的类目都拥有标准化产品单元信息。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.category.getSPUInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.category.getSPUInfo&amp;v=1</summary>
        /// <param name="categoryId">类目ID</param>
        /// <param name="keyAttrs">类目的规格属性列表</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400_1	- 查询时类目关键属性必须输入(入参keyAttrs是必填项)
        /// 400_2	- 查询时类目关键属性键值(fid, value)必须输入(入参keyAttrs中的属性值是必填项)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCategoryGetSPUInfoResult> AlibabaCategoryGetSPUInfoAsync(long categoryId, System.Collections.Generic.IEnumerable<AlibabaCategoryFeatureAttribute2> keyAttrs, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>根据关键字搜索类目
        /// 根据关键字搜索发布类目，发布类目都是叶子类目
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.category.searchByKeyword-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.category.searchByKeyword&amp;v=1</summary>
        /// <param name="keyword">叶子类目关键字</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 查询失败	- 查询失败：没有相应的类目信息(请检查关键字是否正确)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCategorySearchByKeywordResult AlibabaCategorySearchByKeyword(string keyword);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据关键字搜索类目
        /// 根据关键字搜索发布类目，发布类目都是叶子类目
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.category.searchByKeyword-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.category.searchByKeyword&amp;v=1</summary>
        /// <param name="keyword">叶子类目关键字</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 查询失败	- 查询失败：没有相应的类目信息(请检查关键字是否正确)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCategorySearchByKeywordResult> AlibabaCategorySearchByKeywordAsync(string keyword, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>根据类目Id查询类目
        /// 类目查询。如果需要获取所有1688类目信息，需要从根类目开始遍历获取整个类目树。即：先传0获取所有一级类目ID，然后在通过获取到的一级类目ID遍历获取所二级类目，最后通过遍历二级类目ID获取三级类目。注意：1688类目仅三级，三级类目即发布商品所需的叶子类目。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.category.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.category.get&amp;v=1</summary>
        /// <param name="categoryID">类目id,必须大于等于0， 如果为0，则查询所有一级类目</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCategoryGetResult AlibabaCategoryGet(long categoryID);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据类目Id查询类目
        /// 类目查询。如果需要获取所有1688类目信息，需要从根类目开始遍历获取整个类目树。即：先传0获取所有一级类目ID，然后在通过获取到的一级类目ID遍历获取所二级类目，最后通过遍历二级类目ID获取三级类目。注意：1688类目仅三级，三级类目即发布商品所需的叶子类目。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.category.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.category.get&amp;v=1</summary>
        /// <param name="categoryID">类目id,必须大于等于0， 如果为0，则查询所有一级类目</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCategoryGetResult> AlibabaCategoryGetAsync(long categoryID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>用户自定义类目创建（1688）
        /// 在1688中文中，创建用户的自定义类目。如果是一级类目，父类目Id传值0。如果是子类目，父类目传上一级类目的id。创建成功的话，会返回新的类目的id
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.userDefine.category.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.userDefine.category.add&amp;v=1</summary>
        /// <param name="groupName">要新增的类目的名称</param>
        /// <param name="parentID">上一级类目的id。如果要创建的是一级类目，此处值填0</param>
        /// <returns>新建的类目的id</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response AlibabaUserDefineCategoryAdd(string groupName, long parentID);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>用户自定义类目创建（1688）
        /// 在1688中文中，创建用户的自定义类目。如果是一级类目，父类目Id传值0。如果是子类目，父类目传上一级类目的id。创建成功的话，会返回新的类目的id
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.userDefine.category.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.userDefine.category.add&amp;v=1</summary>
        /// <param name="groupName">要新增的类目的名称</param>
        /// <param name="parentID">上一级类目的id。如果要创建的是一级类目，此处值填0</param>
        /// <returns>新建的类目的id</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> AlibabaUserDefineCategoryAddAsync(string groupName, long parentID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>删除商品
        /// 将某个商品删除到回收站中，可在网站手工清除或恢复。此API为国际站与1688通用。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.delete&amp;v=1</summary>
        /// <param name="productID">商品ID</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaProductDeleteResult AlibabaProductDelete(long productID, string webSite);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除商品
        /// 将某个商品删除到回收站中，可在网站手工清除或恢复。此API为国际站与1688通用。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.delete&amp;v=1</summary>
        /// <param name="productID">商品ID</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaProductDeleteResult> AlibabaProductDeleteAsync(long productID, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>商品转为过期
        /// 商品转为过期
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.expire-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.expire&amp;v=1</summary>
        /// <param name="productIds">过期商品的ID列表</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 1003404	- 对不起,没有找到相关的记录!(商品ID错误)
        /// 1000600	- 操作失败。(商品已过期)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaProductExpireResult AlibabaProductExpire(System.Collections.Generic.IEnumerable<long> productIds, string webSite);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>商品转为过期
        /// 商品转为过期
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.expire-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.expire&amp;v=1</summary>
        /// <param name="productIds">过期商品的ID列表</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 1003404	- 对不起,没有找到相关的记录!(商品ID错误)
        /// 1000600	- 操作失败。(商品已过期)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaProductExpireResult> AlibabaProductExpireAsync(System.Collections.Generic.IEnumerable<long> productIds, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>重发商品
        /// 重发商品。请注意：每天重发商品次数上限为400，具体1688商品重发规则请查看https://114.1688.com/kb/search.htm?keywords=%D6%D8%B7%A2
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.repost-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.repost&amp;v=1</summary>
        /// <param name="productIds">重发商品ID列表</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 不应该出现的数据错误!	- 不应该出现的数据错误!(请确认商品是否符合重发规则，1688重发规则查看：https://114.1688.com/kb/search.htm?keywords=%D6%D8%B7%A2)
        /// 1004422	- 产品信息今天重发过!(商品已经重发过)
        /// 1004424	- 产品信息今天刚新发!(新发商品不允许重发)
        /// 1004421	- 当前重发数量超过限制(每天重发商品次数上限为400，具体1688商品重发规则请查看https://114.1688.com/kb/search.htm?keywords=%D6%D8%B7%A2)
        /// 1003404	- 对不起,没有找到相关的记录!(商品不存在，检查商品Id)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaProductRepostResult AlibabaProductRepost(System.Collections.Generic.IEnumerable<long> productIds, string webSite);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>重发商品
        /// 重发商品。请注意：每天重发商品次数上限为400，具体1688商品重发规则请查看https://114.1688.com/kb/search.htm?keywords=%D6%D8%B7%A2
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.repost-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.repost&amp;v=1</summary>
        /// <param name="productIds">重发商品ID列表</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 不应该出现的数据错误!	- 不应该出现的数据错误!(请确认商品是否符合重发规则，1688重发规则查看：https://114.1688.com/kb/search.htm?keywords=%D6%D8%B7%A2)
        /// 1004422	- 产品信息今天重发过!(商品已经重发过)
        /// 1004424	- 产品信息今天刚新发!(新发商品不允许重发)
        /// 1004421	- 当前重发数量超过限制(每天重发商品次数上限为400，具体1688商品重发规则请查看https://114.1688.com/kb/search.htm?keywords=%D6%D8%B7%A2)
        /// 1003404	- 对不起,没有找到相关的记录!(商品不存在，检查商品Id)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaProductRepostResult> AlibabaProductRepostAsync(System.Collections.Generic.IEnumerable<long> productIds, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>未上架商品重新上架
        /// 未上架商品重新上架。请注意：会员每天最多上架400条，非诚信通或者买家保障会员，食品美容行业如果有限制，则不能上架，橡塑现货条数限制，已上网最多200条。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.republish-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.republish&amp;v=1</summary>
        /// <param name="productIds">重发商品ID列表</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// DATA_ERROR	- 手动过期或自然过期的产品才能上架: 575343780XXX(商品已经是上架状态)
        /// DATA_ERROR	- 商业信息没有找到!:575717467XX(商品不存在)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaProductRepublishResult AlibabaProductRepublish(System.Collections.Generic.IEnumerable<long> productIds);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>未上架商品重新上架
        /// 未上架商品重新上架。请注意：会员每天最多上架400条，非诚信通或者买家保障会员，食品美容行业如果有限制，则不能上架，橡塑现货条数限制，已上网最多200条。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.republish-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.republish&amp;v=1</summary>
        /// <param name="productIds">重发商品ID列表</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// DATA_ERROR	- 手动过期或自然过期的产品才能上架: 575343780XXX(商品已经是上架状态)
        /// DATA_ERROR	- 商业信息没有找到!:575717467XX(商品不存在)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaProductRepublishResult> AlibabaProductRepublishAsync(System.Collections.Generic.IEnumerable<long> productIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取授权用户的商品自定义分类列表
        /// 获取授权用户的1688商品自定义分类列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.userCategory.list.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.userCategory.list.get&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaUserCategoryListGetResult AlibabaUserCategoryListGet();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取授权用户的商品自定义分类列表
        /// 获取授权用户的1688商品自定义分类列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.userCategory.list.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.userCategory.list.get&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaUserCategoryListGetResult> AlibabaUserCategoryListGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>增量修改商品信息
        /// 增量修改商品信息。该API中的入参如果不传递，API将忽略该参数，不会对商品的该字段进行置空或者修改。
        /// free会员不能修改商品信息，只有开通旺铺后才可以修改
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.incrementModify-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.incrementModify&amp;v=1</summary>
        /// <param name="productID">商品ID</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <param name="subject">商品标题，如果不传递或者传递空字符串则不作任何处理</param>
        /// <param name="description">商品描述，如果不传递或者传递空字符串则不作任何处理.</param>
        /// <param name="image">商品图片，如果不传递或者传递空字符串则不作任何处理请注意，如果ISV需要修改image字段，那么subject和description必须至少传入其一</param>
        /// <param name="supportOnlineTrade">是否允许在线交易</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 404	- 无法找到productID[57576785537]对应的商品。(商品ID错误，检查商品ID)
        /// 401	- 您不是该商品[554079035899]的拥有者，无法修改商品信息。(只能修改自己的商品)
        /// 500001	- 商品修改失败，主图不可为空且总数不得超过五张。(主图不可为空且总数不得超过五张。)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaProductIncrementModifyResult AlibabaProductIncrementModify(long productID, string webSite, string subject = null, string description = null, AlibabaProductProductImageInfo image = null, bool? supportOnlineTrade = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>增量修改商品信息
        /// 增量修改商品信息。该API中的入参如果不传递，API将忽略该参数，不会对商品的该字段进行置空或者修改。
        /// free会员不能修改商品信息，只有开通旺铺后才可以修改
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.incrementModify-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.incrementModify&amp;v=1</summary>
        /// <param name="productID">商品ID</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <param name="subject">商品标题，如果不传递或者传递空字符串则不作任何处理</param>
        /// <param name="description">商品描述，如果不传递或者传递空字符串则不作任何处理.</param>
        /// <param name="image">商品图片，如果不传递或者传递空字符串则不作任何处理请注意，如果ISV需要修改image字段，那么subject和description必须至少传入其一</param>
        /// <param name="supportOnlineTrade">是否允许在线交易</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 404	- 无法找到productID[57576785537]对应的商品。(商品ID错误，检查商品ID)
        /// 401	- 您不是该商品[554079035899]的拥有者，无法修改商品信息。(只能修改自己的商品)
        /// 500001	- 商品修改失败，主图不可为空且总数不得超过五张。(主图不可为空且总数不得超过五张。)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaProductIncrementModifyResult> AlibabaProductIncrementModifyAsync(long productID, string webSite, string subject = null, string description = null, AlibabaProductProductImageInfo image = null, bool? supportOnlineTrade = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>设置是否启用自定义分类
        /// 设置是否启用自定义分类，启用后在旺铺中将按自定义分类展示商品。此API对国际站无效
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.group.setSwitch-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.group.setSwitch&amp;v=1</summary>
        /// <param name="switchValue">设置状态，true：已开启；false：未开启</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <returns>是否设置成功，true设置成功，false设置失败</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response2 AlibabaProductGroupSetSwitch(bool switchValue, string webSite);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>设置是否启用自定义分类
        /// 设置是否启用自定义分类，启用后在旺铺中将按自定义分类展示商品。此API对国际站无效
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.group.setSwitch-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.group.setSwitch&amp;v=1</summary>
        /// <param name="switchValue">设置状态，true：已开启；false：未开启</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <returns>是否设置成功，true设置成功，false设置失败</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response2> AlibabaProductGroupSetSwitchAsync(bool switchValue, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取商品
        /// 由商品ID获取商品详细信息，请注意：只能查询自己所有的产品。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.get&amp;v=1</summary>
        /// <param name="productID">商品ID</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="scene">业务场景 零售通(lst) 1688市场(1688)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaProductGetResult AlibabaProductGet(long productID, string webSite = null, string scene = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取商品
        /// 由商品ID获取商品详细信息，请注意：只能查询自己所有的产品。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.get&amp;v=1</summary>
        /// <param name="productID">商品ID</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="scene">业务场景 零售通(lst) 1688市场(1688)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaProductGetResult> AlibabaProductGetAsync(long productID, string webSite = null, string scene = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>发布商品
        /// 发布一个新商品，此API为国际站与1688通用。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.add&amp;v=1</summary>
        /// <param name="productType">商品类型，在线批发商品(wholesale)或者询盘商品(sourcing)，1688网站缺省为wholesale</param>
        /// <param name="categoryID">类目ID，由相应类目API获取</param>
        /// <param name="subject">商品标题，最多128个字符。标题内容将被系统切分作为关键字，因此API将不再单独提供关键字字段。</param>
        /// <param name="language">语种，参见FAQ 语种枚举值，1688网站默认传入CHINESE</param>
        /// <param name="image">商品主图</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="attributes">商品属性和属性值。若webSite=1688，此字段必填</param>
        /// <param name="groupID">分组ID，确定商品所属分组。1688可传入多个分组ID，国际站同一个商品只能属于一个分组，因此默认只取第一个</param>
        /// <param name="description">商品详情描述，可包含图片中心的图片URL</param>
        /// <param name="periodOfValidity">信息有效期，按天计算，国际站可不填</param>
        /// <param name="bizType">业务类型。1：商品，2：加工，3：代理，4：合作，5：商务服务；不传入默认按照商品发布；国际站按默认商品。</param>
        /// <param name="pictureAuth">是否图片私密信息，国际站此字段无效</param>
        /// <param name="skuInfos">SKU信息，这里可传入多组信息</param>
        /// <param name="saleInfo">商品销售信息</param>
        /// <param name="shippingInfo">商品物流信息</param>
        /// <param name="internationalTradeInfo">商品国际贸易信息，1688无需处理此字段</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 系统错误	- 系统错误(attributes中必须包括类目的必传属性。包括必传的产品属性和规格属性，如果没有规格属性又要按照规格报价的话会出“系统错误”)
        /// 无错误Case1	- 发布Offer 之后没有具体的规格信息(attributes的规格属性的值value必须和SKUInfo里面的attribute规格属性值attributeValue一致，否则当按规格报价时会出现offer发布成功，但是没有规格的情况。)
        /// 系统错误	- 您在运费设置中选择的运费模板不存在！(运费模板不存在，请检查入参)
        /// 系统错误	- 自定义属性个数超过最大限制!(自定义属性最多可以添加3个)
        /// 系统错误	- XXX:是必填项！(attributes中必须包括类目的必填属性，请检查入参)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaProductAddResult AlibabaProductAdd(string productType, long categoryID, string subject, string language, ComAlibabaProductAlibabaProductAddAlibabaProductProductImageInfo image, string webSite, System.Collections.Generic.IEnumerable<AlibabaProductProductAttribute> attributes = null, System.Collections.Generic.IEnumerable<long> groupID = null, string description = null, int? periodOfValidity = null, int? bizType = null, bool? pictureAuth = null, System.Collections.Generic.IEnumerable<AlibabaProductProductSKUInfo2> skuInfos = null, AlibabaProductProductSaleInfo2 saleInfo = null, AlibabaProductProductShippingInfo2 shippingInfo = null, AlibabaProductProductInternationalTradeInfo internationalTradeInfo = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>发布商品
        /// 发布一个新商品，此API为国际站与1688通用。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.add&amp;v=1</summary>
        /// <param name="productType">商品类型，在线批发商品(wholesale)或者询盘商品(sourcing)，1688网站缺省为wholesale</param>
        /// <param name="categoryID">类目ID，由相应类目API获取</param>
        /// <param name="subject">商品标题，最多128个字符。标题内容将被系统切分作为关键字，因此API将不再单独提供关键字字段。</param>
        /// <param name="language">语种，参见FAQ 语种枚举值，1688网站默认传入CHINESE</param>
        /// <param name="image">商品主图</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="attributes">商品属性和属性值。若webSite=1688，此字段必填</param>
        /// <param name="groupID">分组ID，确定商品所属分组。1688可传入多个分组ID，国际站同一个商品只能属于一个分组，因此默认只取第一个</param>
        /// <param name="description">商品详情描述，可包含图片中心的图片URL</param>
        /// <param name="periodOfValidity">信息有效期，按天计算，国际站可不填</param>
        /// <param name="bizType">业务类型。1：商品，2：加工，3：代理，4：合作，5：商务服务；不传入默认按照商品发布；国际站按默认商品。</param>
        /// <param name="pictureAuth">是否图片私密信息，国际站此字段无效</param>
        /// <param name="skuInfos">SKU信息，这里可传入多组信息</param>
        /// <param name="saleInfo">商品销售信息</param>
        /// <param name="shippingInfo">商品物流信息</param>
        /// <param name="internationalTradeInfo">商品国际贸易信息，1688无需处理此字段</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 系统错误	- 系统错误(attributes中必须包括类目的必传属性。包括必传的产品属性和规格属性，如果没有规格属性又要按照规格报价的话会出“系统错误”)
        /// 无错误Case1	- 发布Offer 之后没有具体的规格信息(attributes的规格属性的值value必须和SKUInfo里面的attribute规格属性值attributeValue一致，否则当按规格报价时会出现offer发布成功，但是没有规格的情况。)
        /// 系统错误	- 您在运费设置中选择的运费模板不存在！(运费模板不存在，请检查入参)
        /// 系统错误	- 自定义属性个数超过最大限制!(自定义属性最多可以添加3个)
        /// 系统错误	- XXX:是必填项！(attributes中必须包括类目的必填属性，请检查入参)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaProductAddResult> AlibabaProductAddAsync(string productType, long categoryID, string subject, string language, ComAlibabaProductAlibabaProductAddAlibabaProductProductImageInfo image, string webSite, System.Collections.Generic.IEnumerable<AlibabaProductProductAttribute> attributes = null, System.Collections.Generic.IEnumerable<long> groupID = null, string description = null, int? periodOfValidity = null, int? bizType = null, bool? pictureAuth = null, System.Collections.Generic.IEnumerable<AlibabaProductProductSKUInfo2> skuInfos = null, AlibabaProductProductSaleInfo2 saleInfo = null, AlibabaProductProductShippingInfo2 shippingInfo = null, AlibabaProductProductInternationalTradeInfo internationalTradeInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取是否启用自定义分类
        /// 获取是否启用自定义分类，启用后在旺铺中将按自定义分类展示商品。此API对国际站无效
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.group.getSwitch-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.group.getSwitch&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <returns>true：已开启；false：未开启</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response3 AlibabaProductGroupGetSwitch(string webSite);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取是否启用自定义分类
        /// 获取是否启用自定义分类，启用后在旺铺中将按自定义分类展示商品。此API对国际站无效
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.group.getSwitch-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.group.getSwitch&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <returns>true：已开启；false：未开启</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response3> AlibabaProductGroupGetSwitchAsync(string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>产品是否可以修改
        /// 产品是否可以修改
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.isModifiable-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.isModifiable&amp;v=1</summary>
        /// <param name="productIds">商品ID列表</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// OFFER_EDIT_ILLEGAL	- OFFER_EDIT_ILLEGAL(检查商品ID是否正确)
        /// OFFER_EDIT_STATUS_ERROR	- OFFER_EDIT_STATUS_ERROR(商品信息已被删除，不能修改)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaProductIsModifiableResult AlibabaProductIsModifiable(System.Collections.Generic.IEnumerable<long> productIds, string webSite);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>产品是否可以修改
        /// 产品是否可以修改
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.isModifiable-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.isModifiable&amp;v=1</summary>
        /// <param name="productIds">商品ID列表</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// OFFER_EDIT_ILLEGAL	- OFFER_EDIT_ILLEGAL(检查商品ID是否正确)
        /// OFFER_EDIT_STATUS_ERROR	- OFFER_EDIT_STATUS_ERROR(商品信息已被删除，不能修改)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaProductIsModifiableResult> AlibabaProductIsModifiableAsync(System.Collections.Generic.IEnumerable<long> productIds, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>卖家查询商品列表
        /// 卖家根据条件分页查询商品列表信息。目前无法查询简易商品。如需遍历所有商品是只能使用ID排序
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.list.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.list.get&amp;v=1</summary>
        /// <param name="pageNo">分页参数，起始为1</param>
        /// <param name="pageSize">分页参数，每页大小，目前最大值为20，超过20时以20为准</param>
        /// <param name="signs">业务标</param>
        /// <param name="statusList">商品状态，published:上架状态，expired：过期(包含手动过期与自动过期)，TBD：to be delete，deleted：删除，new：新发，modified：修改，member expired：会员撤销</param>
        /// <param name="categoryId">类目ID</param>
        /// <param name="startModifyTime">产品修改开始时间</param>
        /// <param name="endModifyTime">产品修改结束时间</param>
        /// <param name="subjectKey">关键词</param>
        /// <param name="cargoNumber">货号</param>
        /// <param name="productIds">产品ID列表</param>
        /// <param name="beginStar">星级范围起始值0-5，不能高于endStar</param>
        /// <param name="endStar">星级范围起始值0-5，不能低于beginStar</param>
        /// <param name="groupIds">查询自定义分组ID，目前只支持查询一个</param>
        /// <param name="startPublishTime">发布时间起始值</param>
        /// <param name="endPublishTime">发布时间结束值</param>
        /// <param name="startExpiredTime">过期时间起始值</param>
        /// <param name="endExpiredTime">过期时间结束值</param>
        /// <param name="priceStart">价格范围起始值</param>
        /// <param name="priceEnd">价格范围结束值</param>
        /// <param name="orderByCondition">排序条件：CREATE_DATE,POST_DATE,MODIFY_DATE,APPROVED_DATE,EXPIRE_DATE,STATUS,ID,GROUP_ID,PRICE,SALE_QUANTITY</param>
        /// <param name="orderByType">升序 ASC 还是降序 DESC</param>
        /// <param name="supportOnlineTrade">支持在线交易</param>
        /// <param name="privateOffer">私密商品</param>
        /// <param name="needDetail">是否需要详情</param>
        /// <param name="needFreight">是否需要运费</param>
        /// <param name="needUserCategoryInfo">是否需要自定义类目</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaProductListGetResult AlibabaProductListGet(int pageNo, int pageSize, System.Collections.Generic.IEnumerable<string> signs = null, System.Collections.Generic.IEnumerable<string> statusList = null, long? categoryId = null, System.DateTimeOffset? startModifyTime = null, System.DateTimeOffset? endModifyTime = null, string subjectKey = null, string cargoNumber = null, System.Collections.Generic.IEnumerable<long> productIds = null, int? beginStar = null, int? endStar = null, string groupIds = null, System.DateTimeOffset? startPublishTime = null, System.DateTimeOffset? endPublishTime = null, System.DateTimeOffset? startExpiredTime = null, System.DateTimeOffset? endExpiredTime = null, double? priceStart = null, double? priceEnd = null, string orderByCondition = null, string orderByType = null, bool? supportOnlineTrade = null, bool? privateOffer = null, bool? needDetail = null, bool? needFreight = null, bool? needUserCategoryInfo = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>卖家查询商品列表
        /// 卖家根据条件分页查询商品列表信息。目前无法查询简易商品。如需遍历所有商品是只能使用ID排序
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.list.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.list.get&amp;v=1</summary>
        /// <param name="pageNo">分页参数，起始为1</param>
        /// <param name="pageSize">分页参数，每页大小，目前最大值为20，超过20时以20为准</param>
        /// <param name="signs">业务标</param>
        /// <param name="statusList">商品状态，published:上架状态，expired：过期(包含手动过期与自动过期)，TBD：to be delete，deleted：删除，new：新发，modified：修改，member expired：会员撤销</param>
        /// <param name="categoryId">类目ID</param>
        /// <param name="startModifyTime">产品修改开始时间</param>
        /// <param name="endModifyTime">产品修改结束时间</param>
        /// <param name="subjectKey">关键词</param>
        /// <param name="cargoNumber">货号</param>
        /// <param name="productIds">产品ID列表</param>
        /// <param name="beginStar">星级范围起始值0-5，不能高于endStar</param>
        /// <param name="endStar">星级范围起始值0-5，不能低于beginStar</param>
        /// <param name="groupIds">查询自定义分组ID，目前只支持查询一个</param>
        /// <param name="startPublishTime">发布时间起始值</param>
        /// <param name="endPublishTime">发布时间结束值</param>
        /// <param name="startExpiredTime">过期时间起始值</param>
        /// <param name="endExpiredTime">过期时间结束值</param>
        /// <param name="priceStart">价格范围起始值</param>
        /// <param name="priceEnd">价格范围结束值</param>
        /// <param name="orderByCondition">排序条件：CREATE_DATE,POST_DATE,MODIFY_DATE,APPROVED_DATE,EXPIRE_DATE,STATUS,ID,GROUP_ID,PRICE,SALE_QUANTITY</param>
        /// <param name="orderByType">升序 ASC 还是降序 DESC</param>
        /// <param name="supportOnlineTrade">支持在线交易</param>
        /// <param name="privateOffer">私密商品</param>
        /// <param name="needDetail">是否需要详情</param>
        /// <param name="needFreight">是否需要运费</param>
        /// <param name="needUserCategoryInfo">是否需要自定义类目</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaProductListGetResult> AlibabaProductListGetAsync(int pageNo, int pageSize, System.Collections.Generic.IEnumerable<string> signs = null, System.Collections.Generic.IEnumerable<string> statusList = null, long? categoryId = null, System.DateTimeOffset? startModifyTime = null, System.DateTimeOffset? endModifyTime = null, string subjectKey = null, string cargoNumber = null, System.Collections.Generic.IEnumerable<long> productIds = null, int? beginStar = null, int? endStar = null, string groupIds = null, System.DateTimeOffset? startPublishTime = null, System.DateTimeOffset? endPublishTime = null, System.DateTimeOffset? startExpiredTime = null, System.DateTimeOffset? endExpiredTime = null, double? priceStart = null, double? priceEnd = null, string orderByCondition = null, string orderByType = null, bool? supportOnlineTrade = null, bool? privateOffer = null, bool? needDetail = null, bool? needFreight = null, bool? needUserCategoryInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>根据商品ID列表获取商品(卖家)
        /// 根据商品ID列表获取卖家的商品。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.getByIdList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.getByIdList&amp;v=1</summary>
        /// <param name="productIdList">商品Id列表</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 商品不存在	- 574286066XXX:商品不存在(检查输入商品ID)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaProductGetByIdListResult AlibabaProductGetByIdList(System.Collections.Generic.IEnumerable<long> productIdList);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据商品ID列表获取商品(卖家)
        /// 根据商品ID列表获取卖家的商品。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.getByIdList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.getByIdList&amp;v=1</summary>
        /// <param name="productIdList">商品Id列表</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 商品不存在	- 574286066XXX:商品不存在(检查输入商品ID)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaProductGetByIdListResult> AlibabaProductGetByIdListAsync(System.Collections.Generic.IEnumerable<long> productIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>修改产品库存
        /// 修改产品库存该接口支持增量修改和全量修改，通过入参控制，默认为增量修改
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.modifyStock-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.modifyStock&amp;v=1</summary>
        /// <param name="productStockChange">产品库存变更信息</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <param name="increaceModify">是否增量更新</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_005	- 本次修改库存无变更，请确认后重新提交(检查入参后重新提交)
        /// 500_001	- 商品[offerId]为无规格商品，需要使用&amp;quot;productAmountChange&amp;quot;字段进行库存更新。(检查入参后重新提交)
        /// 500_002	- 商品规格[offerId_specId]不存在，请检查后重新提交。(检查入参后重新提交)
        /// 500_003	- 商品[offerId]为有规格商品，请使用字段\&amp;quot;skuStocks.stockChange\&amp;quot;进行库存更新。(检查入参后重新提交)
        /// 500_004	- 商品的库存更新数量不得为0(检查入参后重新提交)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaProductModifyStockResult AlibabaProductModifyStock(System.Collections.Generic.IEnumerable<AlibabaProductProductStock> productStockChange, string webSite, bool? increaceModify = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>修改产品库存
        /// 修改产品库存该接口支持增量修改和全量修改，通过入参控制，默认为增量修改
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.modifyStock-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.modifyStock&amp;v=1</summary>
        /// <param name="productStockChange">产品库存变更信息</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <param name="increaceModify">是否增量更新</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_005	- 本次修改库存无变更，请确认后重新提交(检查入参后重新提交)
        /// 500_001	- 商品[offerId]为无规格商品，需要使用&amp;quot;productAmountChange&amp;quot;字段进行库存更新。(检查入参后重新提交)
        /// 500_002	- 商品规格[offerId_specId]不存在，请检查后重新提交。(检查入参后重新提交)
        /// 500_003	- 商品[offerId]为有规格商品，请使用字段\&amp;quot;skuStocks.stockChange\&amp;quot;进行库存更新。(检查入参后重新提交)
        /// 500_004	- 商品的库存更新数量不得为0(检查入参后重新提交)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaProductModifyStockResult> AlibabaProductModifyStockAsync(System.Collections.Generic.IEnumerable<AlibabaProductProductStock> productStockChange, string webSite, bool? increaceModify = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>修改商品
        /// 修改商品详细信息，此API的调用方式建议先用product.get方法，获取productInfo，再用里面的类目ID调用“获取类目属性”接口，结合类目里的属性将productInfo里相应字段修改后，再赋给本API，这样使用起来最方便，也能最大程度的保证准确性；每个商品(Offer)修改的次数每天不能超过30次；注意可能类目里会新增一些信息需要额外填写，或类目有调整时对应的参数也需要做对应的调整。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.edit-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.edit&amp;v=1</summary>
        /// <param name="productID">商品ID</param>
        /// <param name="productInfo">商品详细信息</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaProductEditResult AlibabaProductEdit(long productID, AlibabaProductProductInfo5 productInfo, string webSite);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>修改商品
        /// 修改商品详细信息，此API的调用方式建议先用product.get方法，获取productInfo，再用里面的类目ID调用“获取类目属性”接口，结合类目里的属性将productInfo里相应字段修改后，再赋给本API，这样使用起来最方便，也能最大程度的保证准确性；每个商品(Offer)修改的次数每天不能超过30次；注意可能类目里会新增一些信息需要额外填写，或类目有调整时对应的参数也需要做对应的调整。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.edit-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.edit&amp;v=1</summary>
        /// <param name="productID">商品ID</param>
        /// <param name="productInfo">商品详细信息</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaProductEditResult> AlibabaProductEditAsync(long productID, AlibabaProductProductInfo5 productInfo, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>根据状态查询商品
        /// 根据状态查询商品（开放平台自建API）
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.getByStatus-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.getByStatus&amp;v=1</summary>
        /// <param name="pageNo">分页页码</param>
        /// <param name="pageSize">分页每页数量</param>
        /// <param name="statusList">&amp;quot;member expired&amp;quot;(会员撤销),
        /// &amp;quot;auto expired&amp;quot;(自然过期),
        /// &amp;quot;expired&amp;quot;(过期(包含手动过期与自动过期)),
        /// &amp;quot;member deleted&amp;quot;(会员删除),
        /// &amp;quot;published&amp;quot;(上网状态),
        /// &amp;quot;modified&amp;quot;(修改),
        /// &amp;quot;new&amp;quot;(新发),
        /// &amp;quot;deleted&amp;quot;(删除),
        /// &amp;quot;TBD&amp;quot;(to be delete),
        /// &amp;quot;approved&amp;quot;(审批通过),
        /// &amp;quot;auditing&amp;quot;(审核中),
        /// &amp;quot;untread&amp;quot;(审核不通过)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaProductGetByStatusResult AlibabaProductGetByStatus(int pageNo, int pageSize, System.Collections.Generic.IEnumerable<string> statusList);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据状态查询商品
        /// 根据状态查询商品（开放平台自建API）
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.getByStatus-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.getByStatus&amp;v=1</summary>
        /// <param name="pageNo">分页页码</param>
        /// <param name="pageSize">分页每页数量</param>
        /// <param name="statusList">&amp;quot;member expired&amp;quot;(会员撤销),
        /// &amp;quot;auto expired&amp;quot;(自然过期),
        /// &amp;quot;expired&amp;quot;(过期(包含手动过期与自动过期)),
        /// &amp;quot;member deleted&amp;quot;(会员删除),
        /// &amp;quot;published&amp;quot;(上网状态),
        /// &amp;quot;modified&amp;quot;(修改),
        /// &amp;quot;new&amp;quot;(新发),
        /// &amp;quot;deleted&amp;quot;(删除),
        /// &amp;quot;TBD&amp;quot;(to be delete),
        /// &amp;quot;approved&amp;quot;(审批通过),
        /// &amp;quot;auditing&amp;quot;(审核中),
        /// &amp;quot;untread&amp;quot;(审核不通过)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaProductGetByStatusResult> AlibabaProductGetByStatusAsync(int pageNo, int pageSize, System.Collections.Generic.IEnumerable<string> statusList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取相册列表
        /// 获取相册列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.album.getList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.album.getList&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="albumType">相册类型</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaPhotobankAlbumGetListResult AlibabaPhotobankAlbumGetList(string webSite, string albumType = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取相册列表
        /// 获取相册列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.album.getList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.album.getList&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="albumType">相册类型</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaPhotobankAlbumGetListResult> AlibabaPhotobankAlbumGetListAsync(string webSite, string albumType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>修改相册
        /// 修改授权用户自身的相册
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.album.modify-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.album.modify&amp;v=1</summary>
        /// <param name="albumInfo">图片相册信息</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <param name="password">图片相册密码，可为空。如果不为空，则修改相册权限</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaPhotobankAlbumModifyResult AlibabaPhotobankAlbumModify(AlibabaPhotobankPhotoAlbumDomain2 albumInfo, string webSite, string password = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>修改相册
        /// 修改授权用户自身的相册
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.album.modify-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.album.modify&amp;v=1</summary>
        /// <param name="albumInfo">图片相册信息</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <param name="password">图片相册密码，可为空。如果不为空，则修改相册权限</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaPhotobankAlbumModifyResult> AlibabaPhotobankAlbumModifyAsync(AlibabaPhotobankPhotoAlbumDomain2 albumInfo, string webSite, string password = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>修改图片信息
        /// 修改图片信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.photo.modify-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.photo.modify&amp;v=1</summary>
        /// <param name="imageInfo">图片详情</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400_2	- 待修改的图片ID不能为空。(待修改的图片ID不能为空。)
        /// 400_3	- 待修改的图片名称和描述不能都为空。(待修改的图片名称和描述不能都为空。)
        /// 30	- 120003(图片不存在，检查图片ID是否正确)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaPhotobankPhotoModifyResult AlibabaPhotobankPhotoModify(AlibabaProductImageInfo imageInfo, string webSite);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>修改图片信息
        /// 修改图片信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.photo.modify-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.photo.modify&amp;v=1</summary>
        /// <param name="imageInfo">图片详情</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400_2	- 待修改的图片ID不能为空。(待修改的图片ID不能为空。)
        /// 400_3	- 待修改的图片名称和描述不能都为空。(待修改的图片名称和描述不能都为空。)
        /// 30	- 120003(图片不存在，检查图片ID是否正确)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaPhotobankPhotoModifyResult> AlibabaPhotobankPhotoModifyAsync(AlibabaProductImageInfo imageInfo, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>创建相册
        /// 创建相册
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.album.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.album.add&amp;v=1</summary>
        /// <param name="name">相册名称。最长30个中文字符</param>
        /// <param name="authority">相册访问权限。取值范围:0-不公开；1-公开；2-密码访问。只有开通旺铺的会员可以设置相册访问权限为“1-公开”和“2-密码访问”，未开通旺铺的会员相册访问权限限制为“0-不公开”，国际站无需处理此字段</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="description">相册描述。最长2000个中文字符，国际站无需处理此字段</param>
        /// <param name="password">相册访问密码。4-16位非中文字符。当authority为2-密码访问时必填，国际站无需处理此字段</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaPhotobankAlbumAddResult AlibabaPhotobankAlbumAdd(string name, int authority, string webSite, string description = null, string password = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建相册
        /// 创建相册
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.album.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.album.add&amp;v=1</summary>
        /// <param name="name">相册名称。最长30个中文字符</param>
        /// <param name="authority">相册访问权限。取值范围:0-不公开；1-公开；2-密码访问。只有开通旺铺的会员可以设置相册访问权限为“1-公开”和“2-密码访问”，未开通旺铺的会员相册访问权限限制为“0-不公开”，国际站无需处理此字段</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="description">相册描述。最长2000个中文字符，国际站无需处理此字段</param>
        /// <param name="password">相册访问密码。4-16位非中文字符。当authority为2-密码访问时必填，国际站无需处理此字段</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaPhotobankAlbumAddResult> AlibabaPhotobankAlbumAddAsync(string name, int authority, string webSite, string description = null, string password = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>查询相册空间详情
        /// 获取相册详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.album.getProfile-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.album.getProfile&amp;v=1</summary>
        /// <param name="webSite">1688或者alibaba</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 5002	- 已授权用户必须传递aliId(API需要授权，请填写有效的accessToken)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaPhotobankAlbumGetProfileResult AlibabaPhotobankAlbumGetProfile(string webSite);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询相册空间详情
        /// 获取相册详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.album.getProfile-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.album.getProfile&amp;v=1</summary>
        /// <param name="webSite">1688或者alibaba</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 5002	- 已授权用户必须传递aliId(API需要授权，请填写有效的accessToken)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaPhotobankAlbumGetProfileResult> AlibabaPhotobankAlbumGetProfileAsync(string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>删除相册
        /// 删除相册
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.album.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.album.delete&amp;v=1</summary>
        /// <param name="albumID">相册ID</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaPhotobankAlbumDeleteResult AlibabaPhotobankAlbumDelete(long albumID, string webSite);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除相册
        /// 删除相册
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.album.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.album.delete&amp;v=1</summary>
        /// <param name="albumID">相册ID</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaPhotobankAlbumDeleteResult> AlibabaPhotobankAlbumDeleteAsync(long albumID, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>删除图片
        /// 删除图片
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.photo.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.photo.delete&amp;v=1</summary>
        /// <param name="photoID">图片ID</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaPhotobankPhotoDeleteResult AlibabaPhotobankPhotoDelete(long photoID, string webSite);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除图片
        /// 删除图片
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.photo.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.photo.delete&amp;v=1</summary>
        /// <param name="photoID">图片ID</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaPhotobankPhotoDeleteResult> AlibabaPhotobankPhotoDeleteAsync(long photoID, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>上传图片
        /// 选择的图片单张大小不超过2MB，支持jpg,jpeg,gif,bmp,png。其中不支持png图片透明色，透明处理后可能为白色或黑色。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.photo.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.photo.add&amp;v=1</summary>
        /// <param name="name">图片名称。最长30个中文字符</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="albumID">相册ID，1688必须传此参数，国际站可不传</param>
        /// <param name="description">图片描述。最长2000个中文字符</param>
        /// <param name="drawTxt">是否打上默认水印，国际站无需处理此字段</param>
        /// <param name="imageBytes">图片的二进制数据，向服务端提交文件即可 (二进制文件数组 PHP 的话，用 base64_encode 转换 ，JAVA 是 通过 IOUtils.toByteArray 转换)</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 1	- 参数非法(调整入参)
        /// 2	- 禁止操作
        /// 10	- 相册数量超出限制
        /// 11	- 相册不存在
        /// 13	- 相册中图片已满
        /// 14	- 扩展空间已经满
        /// 15	- 加密相册密码错误
        /// 31	- 用户空间已满
        /// 32	- 图片格式不支持(图片单张大小不超过2MB，支持jpg,jpeg,gif,bmp,png。其中不支持png图片透明色，透明处理后可能为白色或黑色。)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaPhotobankPhotoAddResult AlibabaPhotobankPhotoAdd(string name, string webSite, long? albumID = null, string description = null, bool? drawTxt = null, byte[] imageBytes = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>上传图片
        /// 选择的图片单张大小不超过2MB，支持jpg,jpeg,gif,bmp,png。其中不支持png图片透明色，透明处理后可能为白色或黑色。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.photo.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.photo.add&amp;v=1</summary>
        /// <param name="name">图片名称。最长30个中文字符</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="albumID">相册ID，1688必须传此参数，国际站可不传</param>
        /// <param name="description">图片描述。最长2000个中文字符</param>
        /// <param name="drawTxt">是否打上默认水印，国际站无需处理此字段</param>
        /// <param name="imageBytes">图片的二进制数据，向服务端提交文件即可 (二进制文件数组 PHP 的话，用 base64_encode 转换 ，JAVA 是 通过 IOUtils.toByteArray 转换)</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 1	- 参数非法(调整入参)
        /// 2	- 禁止操作
        /// 10	- 相册数量超出限制
        /// 11	- 相册不存在
        /// 13	- 相册中图片已满
        /// 14	- 扩展空间已经满
        /// 15	- 加密相册密码错误
        /// 31	- 用户空间已满
        /// 32	- 图片格式不支持(图片单张大小不超过2MB，支持jpg,jpeg,gif,bmp,png。其中不支持png图片透明色，透明处理后可能为白色或黑色。)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaPhotobankPhotoAddResult> AlibabaPhotobankPhotoAddAsync(string name, string webSite, long? albumID = null, string description = null, bool? drawTxt = null, byte[] imageBytes = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>批量删除图片
        /// 批量删除图片
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.photo.deleteBatch-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.photo.deleteBatch&amp;v=1</summary>
        /// <param name="imageIds">待操作图片ID列表，每次最多支持删除20张图片。</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaPhotobankPhotoDeleteBatchResult AlibabaPhotobankPhotoDeleteBatch(System.Collections.Generic.IEnumerable<long> imageIds, string webSite);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>批量删除图片
        /// 批量删除图片
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.photo.deleteBatch-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.photo.deleteBatch&amp;v=1</summary>
        /// <param name="imageIds">待操作图片ID列表，每次最多支持删除20张图片。</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaPhotobankPhotoDeleteBatchResult> AlibabaPhotobankPhotoDeleteBatchAsync(System.Collections.Generic.IEnumerable<long> imageIds, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取图片列表
        /// 获取指定相册中图片列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.photo.getList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.photo.getList&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="albumID">相册ID</param>
        /// <param name="pageNo">页码。取值范围:大于零的整数;默认值为1，即返回第一页数据</param>
        /// <param name="pageSize">返回列表结果集每页条数。取值范围:大于零的整数;最大值：30</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaPhotobankPhotoGetListResult AlibabaPhotobankPhotoGetList(string webSite, long? albumID = null, int? pageNo = null, int? pageSize = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取图片列表
        /// 获取指定相册中图片列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.photo.getList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.photo.getList&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="albumID">相册ID</param>
        /// <param name="pageNo">页码。取值范围:大于零的整数;默认值为1，即返回第一页数据</param>
        /// <param name="pageSize">返回列表结果集每页条数。取值范围:大于零的整数;最大值：30</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaPhotobankPhotoGetListResult> AlibabaPhotobankPhotoGetListAsync(string webSite, long? albumID = null, int? pageNo = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取物流模板详情
        /// 根据物流模版ID获取卖家的物流模板。运费模板ID为0表示运费说明，为1表示卖家承担运费
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.myFreightTemplate.list.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.myFreightTemplate.list.get&amp;v=1</summary>
        /// <param name="templateId">模版id，用于单条查询的场景</param>
        /// <param name="querySubTemplate">是否查询子模板</param>
        /// <param name="queryRate">是否查询子模板费率</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaLogisticsMyFreightTemplateListGetResult AlibabaLogisticsMyFreightTemplateListGet(long? templateId = null, bool? querySubTemplate = null, bool? queryRate = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取物流模板详情
        /// 根据物流模版ID获取卖家的物流模板。运费模板ID为0表示运费说明，为1表示卖家承担运费
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.myFreightTemplate.list.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.myFreightTemplate.list.get&amp;v=1</summary>
        /// <param name="templateId">模版id，用于单条查询的场景</param>
        /// <param name="querySubTemplate">是否查询子模板</param>
        /// <param name="queryRate">是否查询子模板费率</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaLogisticsMyFreightTemplateListGetResult> AlibabaLogisticsMyFreightTemplateListGetAsync(long? templateId = null, bool? querySubTemplate = null, bool? queryRate = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>代销商获取供应商的运费模版
        /// 代销商获取供应商的运费模版，用来计算代销商品的运费信息，需要先建立代销关系才能查询
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.distributor.getSupplierFreightTemplates-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.distributor.getSupplierFreightTemplates&amp;v=1</summary>
        /// <param name="supplierLoginId">供应商的LoginId</param>
        /// <param name="templateId">运费模版id，用于单条查询的场景，如果不传的话，则是查所有模版</param>
        /// <param name="querySubTemplate">是否查询子模板</param>
        /// <param name="queryRate">是否查询子模板费率</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaDistributorGetSupplierFreightTemplatesResult AlibabaDistributorGetSupplierFreightTemplates(string supplierLoginId, long? templateId = null, bool? querySubTemplate = null, bool? queryRate = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>代销商获取供应商的运费模版
        /// 代销商获取供应商的运费模版，用来计算代销商品的运费信息，需要先建立代销关系才能查询
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.distributor.getSupplierFreightTemplates-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.distributor.getSupplierFreightTemplates&amp;v=1</summary>
        /// <param name="supplierLoginId">供应商的LoginId</param>
        /// <param name="templateId">运费模版id，用于单条查询的场景，如果不传的话，则是查所有模版</param>
        /// <param name="querySubTemplate">是否查询子模板</param>
        /// <param name="queryRate">是否查询子模板费率</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaDistributorGetSupplierFreightTemplatesResult> AlibabaDistributorGetSupplierFreightTemplatesAsync(string supplierLoginId, long? templateId = null, bool? querySubTemplate = null, bool? queryRate = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取交易订单的物流跟踪信息(卖家视角)
        /// 获取卖家的订单的物流跟踪信息。该接口能查能根据物流单号查看物流单跟踪信息。由于物流单录入的原因，可能跟踪信息的API查询会有延迟。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.trade.getLogisticsTraceInfo.sellerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.trade.getLogisticsTraceInfo.sellerView&amp;v=1</summary>
        /// <param name="orderId">订单号</param>
        /// <param name="webSite">是1688业务还是icbu业务</param>
        /// <param name="logisticsId">该订单下的物流编号</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeGetLogisticsTraceInfoSellerViewResult AlibabaTradeGetLogisticsTraceInfoSellerView(long orderId, string webSite, string logisticsId = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取交易订单的物流跟踪信息(卖家视角)
        /// 获取卖家的订单的物流跟踪信息。该接口能查能根据物流单号查看物流单跟踪信息。由于物流单录入的原因，可能跟踪信息的API查询会有延迟。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.trade.getLogisticsTraceInfo.sellerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.trade.getLogisticsTraceInfo.sellerView&amp;v=1</summary>
        /// <param name="orderId">订单号</param>
        /// <param name="webSite">是1688业务还是icbu业务</param>
        /// <param name="logisticsId">该订单下的物流编号</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeGetLogisticsTraceInfoSellerViewResult> AlibabaTradeGetLogisticsTraceInfoSellerViewAsync(long orderId, string webSite, string logisticsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>我的发货地址列表
        /// 我的发货地址列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.mySendGoodsAddress.list.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.mySendGoodsAddress.list.get&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaLogisticsMySendGoodsAddressListGetResult AlibabaLogisticsMySendGoodsAddressListGet();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>我的发货地址列表
        /// 我的发货地址列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.mySendGoodsAddress.list.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.mySendGoodsAddress.list.get&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaLogisticsMySendGoodsAddressListGetResult> AlibabaLogisticsMySendGoodsAddressListGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>物流发货-自己联系物流发货
        /// 1688大市场订单，卖家自己联系物流发货，支持合并发货，即：多个订单一次发货；支持子订单(orderEntry)级别的发货，不支持按数量发货。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.OpDeliverySendOrder.offline-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.OpDeliverySendOrder.offline&amp;v=1</summary>
        /// <param name="sendGoods">发货对象列表</param>
        /// <param name="extBody">JSON字符串，cpCode 为物流公司code，对应物流公司信息获取接口的companyNo（非数字Id）; logisticsCpName:物流公司名称，对应物流公司信息获取接口的companyName； mailNo：运单号； 可以通过获取 &amp;quot;物流公司列表-自联物流&amp;quot; 接口查询到数据。</param>
        /// <param name="remarks">备注</param>
        /// <param name="gmtSend">发货时间</param>
        /// <param name="extParam">JSON 字符串</param>
        /// <param name="receiverInfo">收货地址,优先级大于订单收货地址，为空时，使用订单收货地址</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 系统繁忙，请稍后再试Case1	- 调用接口返回“系统繁忙，请稍后再试”(请检查订单号是否正确，另外请确认物流公司CpCode是否正确。cpcode为物流公司信息的companyNo而非Id，例如顺丰的coCode为“SF”而非106422)
        /// 系统繁忙，请稍后再试Case2	- 使用测试工具时返回“系统繁忙，请稍后再试”(不要传递receiverInfo字段)
        /// HSF Server unexpected exception	- HSF Server unexpected exception(传入参数的字段类型不正确，或某些必传字段没有传递)
        /// INVALID_PARAM	- 运单号不符合规则或已被使用(请检查运单号是否正确，另外请注意一个运单号最多使用15次)
        /// 5001	- 下游销售订单退款中，暂不支持发货，建议与您的客户沟通处理退款，再确定是否继续发货(下游销售订单退款中，暂不支持发货，建议与您的客户沟通处理退款，再确定是否继续发货，继续发货需要到1688work工作台上发货)
        /// 5002	- 下游销售订单已退款成功/交易关闭，不支持发货(下游销售订单已退款成功/交易关闭，不支持发货)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaLogisticsOpDeliverySendOrderOfflineResult AlibabaLogisticsOpDeliverySendOrderOffline(System.Collections.Generic.IEnumerable<AlibabaLogisticsOpSendGood> sendGoods, string extBody, string remarks = null, System.DateTimeOffset? gmtSend = null, string extParam = null, AlibabaLogisticsOpReceiveContacter receiverInfo = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>物流发货-自己联系物流发货
        /// 1688大市场订单，卖家自己联系物流发货，支持合并发货，即：多个订单一次发货；支持子订单(orderEntry)级别的发货，不支持按数量发货。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.OpDeliverySendOrder.offline-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.OpDeliverySendOrder.offline&amp;v=1</summary>
        /// <param name="sendGoods">发货对象列表</param>
        /// <param name="extBody">JSON字符串，cpCode 为物流公司code，对应物流公司信息获取接口的companyNo（非数字Id）; logisticsCpName:物流公司名称，对应物流公司信息获取接口的companyName； mailNo：运单号； 可以通过获取 &amp;quot;物流公司列表-自联物流&amp;quot; 接口查询到数据。</param>
        /// <param name="remarks">备注</param>
        /// <param name="gmtSend">发货时间</param>
        /// <param name="extParam">JSON 字符串</param>
        /// <param name="receiverInfo">收货地址,优先级大于订单收货地址，为空时，使用订单收货地址</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 系统繁忙，请稍后再试Case1	- 调用接口返回“系统繁忙，请稍后再试”(请检查订单号是否正确，另外请确认物流公司CpCode是否正确。cpcode为物流公司信息的companyNo而非Id，例如顺丰的coCode为“SF”而非106422)
        /// 系统繁忙，请稍后再试Case2	- 使用测试工具时返回“系统繁忙，请稍后再试”(不要传递receiverInfo字段)
        /// HSF Server unexpected exception	- HSF Server unexpected exception(传入参数的字段类型不正确，或某些必传字段没有传递)
        /// INVALID_PARAM	- 运单号不符合规则或已被使用(请检查运单号是否正确，另外请注意一个运单号最多使用15次)
        /// 5001	- 下游销售订单退款中，暂不支持发货，建议与您的客户沟通处理退款，再确定是否继续发货(下游销售订单退款中，暂不支持发货，建议与您的客户沟通处理退款，再确定是否继续发货，继续发货需要到1688work工作台上发货)
        /// 5002	- 下游销售订单已退款成功/交易关闭，不支持发货(下游销售订单已退款成功/交易关闭，不支持发货)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaLogisticsOpDeliverySendOrderOfflineResult> AlibabaLogisticsOpDeliverySendOrderOfflineAsync(System.Collections.Generic.IEnumerable<AlibabaLogisticsOpSendGood> sendGoods, string extBody, string remarks = null, System.DateTimeOffset? gmtSend = null, string extParam = null, AlibabaLogisticsOpReceiveContacter receiverInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>物流发货-无需物流
        /// 1688大市场订单，无需物流，支持合并发货，即：多个订单一次发货；支持子订单(orderEntry)级别的发货，不支持按数量发货。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.OpDeliverySendOrder.dummy-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.OpDeliverySendOrder.dummy&amp;v=1</summary>
        /// <param name="sendGoods">发货对象列表</param>
        /// <param name="extBody">JSON字符串,extBodyJson中的noLogisticsCondition必填，取值字符串1到5：“1”：其他第三方物流、小型物充商、车队等（noLogisticsName、noLogisticsTel必填）；“2”：补运费、差价（noLogisticsBillNo必填）；“3”：卖家配送（noLogisticsName、noLogisticsTel必填）；“4”：买家自提；“5”：其他原因（remarks必填）。其他字段根据noLogisticsCondition的值不同，必填要求不同。字段说明：无需物流原因:noLogisticsCondition;无需物流名称:noLogisticsName;无需物流电话:noLogisticsTel;无需物流单号，不同的无需物流原因，该字段解释不同:noLogisticsBillNo。</param>
        /// <param name="remarks">备注</param>
        /// <param name="gmtSend">发货时间</param>
        /// <param name="extParam">{}</param>
        /// <param name="receiverInfo">收货地址</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaLogisticsOpDeliverySendOrderDummyResult AlibabaLogisticsOpDeliverySendOrderDummy(System.Collections.Generic.IEnumerable<AlibabaLogisticsOpSendGood> sendGoods, string extBody, string remarks = null, System.DateTimeOffset? gmtSend = null, string extParam = null, AlibabaLogisticsOpReceiveContacter receiverInfo = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>物流发货-无需物流
        /// 1688大市场订单，无需物流，支持合并发货，即：多个订单一次发货；支持子订单(orderEntry)级别的发货，不支持按数量发货。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.OpDeliverySendOrder.dummy-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.OpDeliverySendOrder.dummy&amp;v=1</summary>
        /// <param name="sendGoods">发货对象列表</param>
        /// <param name="extBody">JSON字符串,extBodyJson中的noLogisticsCondition必填，取值字符串1到5：“1”：其他第三方物流、小型物充商、车队等（noLogisticsName、noLogisticsTel必填）；“2”：补运费、差价（noLogisticsBillNo必填）；“3”：卖家配送（noLogisticsName、noLogisticsTel必填）；“4”：买家自提；“5”：其他原因（remarks必填）。其他字段根据noLogisticsCondition的值不同，必填要求不同。字段说明：无需物流原因:noLogisticsCondition;无需物流名称:noLogisticsName;无需物流电话:noLogisticsTel;无需物流单号，不同的无需物流原因，该字段解释不同:noLogisticsBillNo。</param>
        /// <param name="remarks">备注</param>
        /// <param name="gmtSend">发货时间</param>
        /// <param name="extParam">{}</param>
        /// <param name="receiverInfo">收货地址</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaLogisticsOpDeliverySendOrderDummyResult> AlibabaLogisticsOpDeliverySendOrderDummyAsync(System.Collections.Generic.IEnumerable<AlibabaLogisticsOpSendGood> sendGoods, string extBody, string remarks = null, System.DateTimeOffset? gmtSend = null, string extParam = null, AlibabaLogisticsOpReceiveContacter receiverInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取交易订单的物流跟踪信息(买家视角)
        /// 该接口需要获取订单买家的授权，获取买家的订单的物流跟踪信息，在采购或者分销场景中，作为买家也有获取物流详情的需求。该接口能查能根据物流单号查看物流单跟踪信息。由于物流单录入的原因，可能跟踪信息的API查询会有延迟。该API需要向开放平台申请权限才能访问。In the procurement or distribution scenario, buyers can obtain information on logistics tracking. The interface can view the logistics tracking information according to the logistics tacking number. Depending on the logistics information entry time, there may be a delay in API queries regarding the information tracking.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.trade.getLogisticsTraceInfo.buyerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.trade.getLogisticsTraceInfo.buyerView&amp;v=1</summary>
        /// <param name="orderId">订单号</param>
        /// <param name="webSite">是1688业务还是icbu业务</param>
        /// <param name="logisticsId">该订单下的物流编号</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeGetLogisticsTraceInfoBuyerViewResult AlibabaTradeGetLogisticsTraceInfoBuyerView(long orderId, string webSite, string logisticsId = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取交易订单的物流跟踪信息(买家视角)
        /// 该接口需要获取订单买家的授权，获取买家的订单的物流跟踪信息，在采购或者分销场景中，作为买家也有获取物流详情的需求。该接口能查能根据物流单号查看物流单跟踪信息。由于物流单录入的原因，可能跟踪信息的API查询会有延迟。该API需要向开放平台申请权限才能访问。In the procurement or distribution scenario, buyers can obtain information on logistics tracking. The interface can view the logistics tracking information according to the logistics tacking number. Depending on the logistics information entry time, there may be a delay in API queries regarding the information tracking.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.trade.getLogisticsTraceInfo.buyerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.trade.getLogisticsTraceInfo.buyerView&amp;v=1</summary>
        /// <param name="orderId">订单号</param>
        /// <param name="webSite">是1688业务还是icbu业务</param>
        /// <param name="logisticsId">该订单下的物流编号</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeGetLogisticsTraceInfoBuyerViewResult> AlibabaTradeGetLogisticsTraceInfoBuyerViewAsync(long orderId, string webSite, string logisticsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取交易订单的物流信息(卖家视角)
        /// 获取卖家的订单的物流详情。该接口能查能根据物流单号查看物流详情，包括发件人，收件人，所发货物明细等。由于物流单录入的原因，可能跟踪信息的API查询会有延迟。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.trade.getLogisticsInfos.sellerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.trade.getLogisticsInfos.sellerView&amp;v=1</summary>
        /// <param name="orderId">订单号</param>
        /// <param name="webSite">是1688业务还是icbu业务</param>
        /// <param name="fields">需要返回的字段，目前有:company.name,sender,receiver,sendgood。返回的字段要用英文逗号分隔开</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeGetLogisticsInfosSellerViewResult AlibabaTradeGetLogisticsInfosSellerView(long orderId, string webSite, string fields = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取交易订单的物流信息(卖家视角)
        /// 获取卖家的订单的物流详情。该接口能查能根据物流单号查看物流详情，包括发件人，收件人，所发货物明细等。由于物流单录入的原因，可能跟踪信息的API查询会有延迟。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.trade.getLogisticsInfos.sellerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.trade.getLogisticsInfos.sellerView&amp;v=1</summary>
        /// <param name="orderId">订单号</param>
        /// <param name="webSite">是1688业务还是icbu业务</param>
        /// <param name="fields">需要返回的字段，目前有:company.name,sender,receiver,sendgood。返回的字段要用英文逗号分隔开</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeGetLogisticsInfosSellerViewResult> AlibabaTradeGetLogisticsInfosSellerViewAsync(long orderId, string webSite, string fields = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取交易订单的物流信息(买家视角)
        /// 该接口需要获得订单买家的授权，获取买家的订单的物流详情，在采购或者分销场景中，作为买家也有获取物流详情的需求。该接口能查能根据订单号查看物流详情，包括发件人，收件人，所发货物明细等。由于物流单录入的原因，可能跟踪信息的API查询会有延迟。该API需要向开放平台申请权限才能访问。In the procurement or distribution scenario, buyers can ask for obtaining the logistics details. The interface can check the logistics details according to the order ID, including the sender, the recipient, the details of the goods sent, and so on. Depending on the logistics information entry time, there may be a delay in API queries regarding the information tracking.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.trade.getLogisticsInfos.buyerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.trade.getLogisticsInfos.buyerView&amp;v=1</summary>
        /// <param name="orderId">订单号</param>
        /// <param name="webSite">是1688业务还是icbu业务</param>
        /// <param name="fields">需要返回的字段，目前有:company.name,sender,receiver,sendgood。返回的字段要用英文逗号分隔开</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_2	- 订单尚未发货，暂无物流详情，请稍候再试。(订单尚未发货，建议监听订单发货消息，收到消息后查询订单物流状态。参考：https://open.1688.com/doc/topicDetail.htm?spm=a260s.11630592.0.0.555655ed4QUvy5&amp;topicGroup=ORDER&amp;id=ORDER_BUYER_VIEW_ANNOUNCE_SENDGOODS)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeGetLogisticsInfosBuyerViewResult AlibabaTradeGetLogisticsInfosBuyerView(long orderId, string webSite, string fields = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取交易订单的物流信息(买家视角)
        /// 该接口需要获得订单买家的授权，获取买家的订单的物流详情，在采购或者分销场景中，作为买家也有获取物流详情的需求。该接口能查能根据订单号查看物流详情，包括发件人，收件人，所发货物明细等。由于物流单录入的原因，可能跟踪信息的API查询会有延迟。该API需要向开放平台申请权限才能访问。In the procurement or distribution scenario, buyers can ask for obtaining the logistics details. The interface can check the logistics details according to the order ID, including the sender, the recipient, the details of the goods sent, and so on. Depending on the logistics information entry time, there may be a delay in API queries regarding the information tracking.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.trade.getLogisticsInfos.buyerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.trade.getLogisticsInfos.buyerView&amp;v=1</summary>
        /// <param name="orderId">订单号</param>
        /// <param name="webSite">是1688业务还是icbu业务</param>
        /// <param name="fields">需要返回的字段，目前有:company.name,sender,receiver,sendgood。返回的字段要用英文逗号分隔开</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_2	- 订单尚未发货，暂无物流详情，请稍候再试。(订单尚未发货，建议监听订单发货消息，收到消息后查询订单物流状态。参考：https://open.1688.com/doc/topicDetail.htm?spm=a260s.11630592.0.0.555655ed4QUvy5&amp;topicGroup=ORDER&amp;id=ORDER_BUYER_VIEW_ANNOUNCE_SENDGOODS)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeGetLogisticsInfosBuyerViewResult> AlibabaTradeGetLogisticsInfosBuyerViewAsync(long orderId, string webSite, string fields = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>物流公司列表-自联物流
        /// 查询自己联系物流的物流公司列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.OpQueryLogisticCompanyList.offline-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.OpQueryLogisticCompanyList.offline&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaLogisticsOpQueryLogisticCompanyListOfflineResult AlibabaLogisticsOpQueryLogisticCompanyListOffline();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>物流公司列表-自联物流
        /// 查询自己联系物流的物流公司列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.OpQueryLogisticCompanyList.offline-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.OpQueryLogisticCompanyList.offline&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaLogisticsOpQueryLogisticCompanyListOfflineResult> AlibabaLogisticsOpQueryLogisticCompanyListOfflineAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>物流公司列表-所有的物流公司
        /// 获取所有的物流公司名称
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.OpQueryLogisticCompanyList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.OpQueryLogisticCompanyList&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaLogisticsOpQueryLogisticCompanyListResult AlibabaLogisticsOpQueryLogisticCompanyList();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>物流公司列表-所有的物流公司
        /// 获取所有的物流公司名称
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.OpQueryLogisticCompanyList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.OpQueryLogisticCompanyList&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaLogisticsOpQueryLogisticCompanyListResult> AlibabaLogisticsOpQueryLogisticCompanyListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取运费模板列表
        /// 获取运费模板列表。1688有两类特殊运费模板，不在此接口返回：不传运费模板表示使用运费说明；传入1表示卖家承担运费
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.freightTemplate.getList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.freightTemplate.getList&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaLogisticsFreightTemplateGetListResult AlibabaLogisticsFreightTemplateGetList(string webSite);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取运费模板列表
        /// 获取运费模板列表。1688有两类特殊运费模板，不在此接口返回：不传运费模板表示使用运费说明；传入1表示卖家承担运费
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.freightTemplate.getList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.freightTemplate.getList&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaLogisticsFreightTemplateGetListResult> AlibabaLogisticsFreightTemplateGetListAsync(string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>物流公司列表-支持快递单打印
        /// 查询支持快递单打印的物流公司列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.OpQueryLogisticCompanyList.print-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.OpQueryLogisticCompanyList.print&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaLogisticsOpQueryLogisticCompanyListPrintResult AlibabaLogisticsOpQueryLogisticCompanyListPrint();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>物流公司列表-支持快递单打印
        /// 查询支持快递单打印的物流公司列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.OpQueryLogisticCompanyList.print-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.OpQueryLogisticCompanyList.print&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaLogisticsOpQueryLogisticCompanyListPrintResult> AlibabaLogisticsOpQueryLogisticCompanyListPrintAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>订单详情查看(买家视角)
        /// 获取单个交易明细信息，仅限买家调用。该API需要向阿里巴巴开放平台申请权限才能使用。Get a single transaction detail, only for users to call.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.get.buyerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.get.buyerView&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="orderId">交易的订单id</param>
        /// <param name="includeFields">查询结果中包含的域，GuaranteesTerms：保障条款，NativeLogistics：物流信息，RateDetail：评价详情，OrderInvoice：发票信息。默认返回GuaranteesTerms、NativeLogistics、OrderInvoice。</param>
        /// <param name="attributeKeys">垂直表中的attributeKeys</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeGetBuyerViewResult AlibabaTradeGetBuyerView(string webSite, long orderId, string includeFields = null, System.Collections.Generic.IEnumerable<string> attributeKeys = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>订单详情查看(买家视角)
        /// 获取单个交易明细信息，仅限买家调用。该API需要向阿里巴巴开放平台申请权限才能使用。Get a single transaction detail, only for users to call.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.get.buyerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.get.buyerView&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="orderId">交易的订单id</param>
        /// <param name="includeFields">查询结果中包含的域，GuaranteesTerms：保障条款，NativeLogistics：物流信息，RateDetail：评价详情，OrderInvoice：发票信息。默认返回GuaranteesTerms、NativeLogistics、OrderInvoice。</param>
        /// <param name="attributeKeys">垂直表中的attributeKeys</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeGetBuyerViewResult> AlibabaTradeGetBuyerViewAsync(string webSite, long orderId, string includeFields = null, System.Collections.Generic.IEnumerable<string> attributeKeys = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>订单详情查看(卖家视角)
        /// 获取单个交易明细信息，仅限卖家调用
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.get.sellerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.get.sellerView&amp;v=1</summary>
        /// <param name="orderId">交易的订单id</param>
        /// <param name="includeFields">查询结果中包含的域，GuaranteesTerms：保障条款，NativeLogistics：物流信息，RateDetail：评价详情，OrderInvoice：发票信息。默认返回GuaranteesTerms、NativeLogistics、OrderInvoice。</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeGetSellerViewResult AlibabaTradeGetSellerView(long orderId, string includeFields = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>订单详情查看(卖家视角)
        /// 获取单个交易明细信息，仅限卖家调用
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.get.sellerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.get.sellerView&amp;v=1</summary>
        /// <param name="orderId">交易的订单id</param>
        /// <param name="includeFields">查询结果中包含的域，GuaranteesTerms：保障条款，NativeLogistics：物流信息，RateDetail：评价详情，OrderInvoice：发票信息。默认返回GuaranteesTerms、NativeLogistics、OrderInvoice。</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeGetSellerViewResult> AlibabaTradeGetSellerViewAsync(long orderId, string includeFields = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>退款单操作-卖家同意退货
        /// 卖家同意退货，并填写退货地址信息。注意：只有退货的售中或者售后退款单，才可以调用这个接口。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.refund.OpAgreeReturnGoods-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.refund.OpAgreeReturnGoods&amp;v=1</summary>
        /// <param name="refundId">退款单Id</param>
        /// <param name="address">卖家收货地址</param>
        /// <param name="post">邮编</param>
        /// <param name="phone">电话</param>
        /// <param name="fullName">全名</param>
        /// <param name="mobilePhone">手机</param>
        /// <param name="discription">说明</param>
        /// <param name="disputeType">1表示售中，2表示售后</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// INVALID_PARAM	- disputeType=* refundId=TQ8359259727492085,cause:null(纠纷类型填写错误，disputeType=1表示售中退款，disputeType=2表示售后退款)
        /// REFUND_STATUS_ERROR	- REFUND_STATUS_ERROR,errorMsg:null(退款单类型错误，待卖家同意退款单且退货的退款单可以调用本接口)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeRefundOpAgreeReturnGoodsResult AlibabaTradeRefundOpAgreeReturnGoods(string refundId, string address = null, string post = null, string phone = null, string fullName = null, string mobilePhone = null, string discription = null, int? disputeType = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>退款单操作-卖家同意退货
        /// 卖家同意退货，并填写退货地址信息。注意：只有退货的售中或者售后退款单，才可以调用这个接口。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.refund.OpAgreeReturnGoods-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.refund.OpAgreeReturnGoods&amp;v=1</summary>
        /// <param name="refundId">退款单Id</param>
        /// <param name="address">卖家收货地址</param>
        /// <param name="post">邮编</param>
        /// <param name="phone">电话</param>
        /// <param name="fullName">全名</param>
        /// <param name="mobilePhone">手机</param>
        /// <param name="discription">说明</param>
        /// <param name="disputeType">1表示售中，2表示售后</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// INVALID_PARAM	- disputeType=* refundId=TQ8359259727492085,cause:null(纠纷类型填写错误，disputeType=1表示售中退款，disputeType=2表示售后退款)
        /// REFUND_STATUS_ERROR	- REFUND_STATUS_ERROR,errorMsg:null(退款单类型错误，待卖家同意退款单且退货的退款单可以调用本接口)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeRefundOpAgreeReturnGoodsResult> AlibabaTradeRefundOpAgreeReturnGoodsAsync(string refundId, string address = null, string post = null, string phone = null, string fullName = null, string mobilePhone = null, string discription = null, int? disputeType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>查询退款单详情-根据退款单ID
        /// 查询退款单详情，同时可以查询到退款操作列表。 该API需要像阿里巴巴申请权限才能访问。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.refund.OpQueryOrderRefund-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.refund.OpQueryOrderRefund&amp;v=1</summary>
        /// <param name="refundId">退款单业务主键 TQ+ID</param>
        /// <param name="needTimeOutInfo">需要退款单的超时信息</param>
        /// <param name="needOrderRefundOperation">需要退款单伴随的所有退款操作信息</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500	- {\&amp;quot;errorCode\&amp;quot;:\&amp;quot;003\&amp;quot;,\&amp;quot;errorMessage\&amp;quot;:\&amp;quot;SERVICE:查询数据失败，请检查输入参数后重试。\&amp;quot;,\&amp;quot;cause\&amp;quot;:\&amp;quot;\&amp;quot;}(非授权用户的退款单)
        /// 500	- {\&amp;quot;errorCode\&amp;quot;:\&amp;quot;003002\&amp;quot;,\&amp;quot;errorMessage\&amp;quot;:\&amp;quot;SERVICE:INVOKE_FAIL:退款数据错误，请检查退款单号，退款单号的格式一般为TD+id\&amp;quot;,\&amp;quot;cause\&amp;quot;:\&amp;quot;errorCode:REFUND_DATA_ERROR,errorMsg:refundId : 11043002311780591,cause:null\&amp;quot;}(退款单不正确)
        /// 500	- {\&amp;quot;errorCode\&amp;quot;:\&amp;quot;003002\&amp;quot;,\&amp;quot;errorMessage\&amp;quot;:\&amp;quot;SERVICE:INVOKE_FAIL:OrderRefundService#queryOrderRefundOperationList\&amp;quot;,\&amp;quot;cause\&amp;quot;:\&amp;quot;errorCode:INVALID_PARAM,errorMsg:null,cause:null\&amp;quot;}(退款单不正确)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeRefundOpQueryOrderRefundResult2 AlibabaTradeRefundOpQueryOrderRefund(string refundId, bool? needTimeOutInfo = null, bool? needOrderRefundOperation = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询退款单详情-根据退款单ID
        /// 查询退款单详情，同时可以查询到退款操作列表。 该API需要像阿里巴巴申请权限才能访问。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.refund.OpQueryOrderRefund-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.refund.OpQueryOrderRefund&amp;v=1</summary>
        /// <param name="refundId">退款单业务主键 TQ+ID</param>
        /// <param name="needTimeOutInfo">需要退款单的超时信息</param>
        /// <param name="needOrderRefundOperation">需要退款单伴随的所有退款操作信息</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500	- {\&amp;quot;errorCode\&amp;quot;:\&amp;quot;003\&amp;quot;,\&amp;quot;errorMessage\&amp;quot;:\&amp;quot;SERVICE:查询数据失败，请检查输入参数后重试。\&amp;quot;,\&amp;quot;cause\&amp;quot;:\&amp;quot;\&amp;quot;}(非授权用户的退款单)
        /// 500	- {\&amp;quot;errorCode\&amp;quot;:\&amp;quot;003002\&amp;quot;,\&amp;quot;errorMessage\&amp;quot;:\&amp;quot;SERVICE:INVOKE_FAIL:退款数据错误，请检查退款单号，退款单号的格式一般为TD+id\&amp;quot;,\&amp;quot;cause\&amp;quot;:\&amp;quot;errorCode:REFUND_DATA_ERROR,errorMsg:refundId : 11043002311780591,cause:null\&amp;quot;}(退款单不正确)
        /// 500	- {\&amp;quot;errorCode\&amp;quot;:\&amp;quot;003002\&amp;quot;,\&amp;quot;errorMessage\&amp;quot;:\&amp;quot;SERVICE:INVOKE_FAIL:OrderRefundService#queryOrderRefundOperationList\&amp;quot;,\&amp;quot;cause\&amp;quot;:\&amp;quot;errorCode:INVALID_PARAM,errorMsg:null,cause:null\&amp;quot;}(退款单不正确)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeRefundOpQueryOrderRefundResult2> AlibabaTradeRefundOpQueryOrderRefundAsync(string refundId, bool? needTimeOutInfo = null, bool? needOrderRefundOperation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>查询退款单列表(卖家视角)
        /// 根据订单号或退款单列表查询退款单列表，有可能有延迟。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.refund.queryOrderRefundList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.refund.queryOrderRefundList&amp;v=1</summary>
        /// <param name="orderId">订单Id</param>
        /// <param name="applyStartTime">退款申请时间（起始）</param>
        /// <param name="applyEndTime">退款申请时间(截止)</param>
        /// <param name="refundStatusSet">退款状态列表</param>
        /// <param name="buyerMemberId">买家memberId</param>
        /// <param name="buyerLoginId">买家loginId</param>
        /// <param name="currentPageNum">查询页码，起始页码为0</param>
        /// <param name="pageSize">页大小</param>
        /// <param name="logisticsNo">退货运单号</param>
        /// <param name="modifyStartTime">退款修改时间(起始)</param>
        /// <param name="modifyEndTime">退款修改时间(截止)</param>
        /// <param name="dipsuteType">1:售中退款，2:售后退款；0:所有退款单</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500	- {\&amp;quot;errorCode\&amp;quot;:\&amp;quot;003\&amp;quot;,\&amp;quot;errorMessage\&amp;quot;:\&amp;quot;SERVICE:查询数据失败，请检查输入参数后重试。\&amp;quot;,\&amp;quot;cause\&amp;quot;:\&amp;quot;\&amp;quot;}(订单号码输入错误)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeRefundQueryOrderRefundListResult AlibabaTradeRefundQueryOrderRefundList(long? orderId = null, System.DateTimeOffset? applyStartTime = null, System.DateTimeOffset? applyEndTime = null, System.Collections.Generic.IEnumerable<string> refundStatusSet = null, string buyerMemberId = null, string buyerLoginId = null, int? currentPageNum = null, int? pageSize = null, string logisticsNo = null, System.DateTimeOffset? modifyStartTime = null, System.DateTimeOffset? modifyEndTime = null, int? dipsuteType = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询退款单列表(卖家视角)
        /// 根据订单号或退款单列表查询退款单列表，有可能有延迟。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.refund.queryOrderRefundList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.refund.queryOrderRefundList&amp;v=1</summary>
        /// <param name="orderId">订单Id</param>
        /// <param name="applyStartTime">退款申请时间（起始）</param>
        /// <param name="applyEndTime">退款申请时间(截止)</param>
        /// <param name="refundStatusSet">退款状态列表</param>
        /// <param name="buyerMemberId">买家memberId</param>
        /// <param name="buyerLoginId">买家loginId</param>
        /// <param name="currentPageNum">查询页码，起始页码为0</param>
        /// <param name="pageSize">页大小</param>
        /// <param name="logisticsNo">退货运单号</param>
        /// <param name="modifyStartTime">退款修改时间(起始)</param>
        /// <param name="modifyEndTime">退款修改时间(截止)</param>
        /// <param name="dipsuteType">1:售中退款，2:售后退款；0:所有退款单</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500	- {\&amp;quot;errorCode\&amp;quot;:\&amp;quot;003\&amp;quot;,\&amp;quot;errorMessage\&amp;quot;:\&amp;quot;SERVICE:查询数据失败，请检查输入参数后重试。\&amp;quot;,\&amp;quot;cause\&amp;quot;:\&amp;quot;\&amp;quot;}(订单号码输入错误)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeRefundQueryOrderRefundListResult> AlibabaTradeRefundQueryOrderRefundListAsync(long? orderId = null, System.DateTimeOffset? applyStartTime = null, System.DateTimeOffset? applyEndTime = null, System.Collections.Generic.IEnumerable<string> refundStatusSet = null, string buyerMemberId = null, string buyerLoginId = null, int? currentPageNum = null, int? pageSize = null, string logisticsNo = null, System.DateTimeOffset? modifyStartTime = null, System.DateTimeOffset? modifyEndTime = null, int? dipsuteType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>查询商品支持的交易类型
        /// 查询商品支持的交易类型
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.queryTradeTypesOfOffer-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.queryTradeTypesOfOffer&amp;v=1</summary>
        /// <param name="sellerMemberId">卖家memberId</param>
        /// <param name="productId">商品Id</param>
        /// <param name="catId">类目id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeQueryTradeTypesOfOfferResult AlibabaTradeQueryTradeTypesOfOffer(string sellerMemberId, long productId, long? catId = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询商品支持的交易类型
        /// 查询商品支持的交易类型
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.queryTradeTypesOfOffer-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.queryTradeTypesOfOffer&amp;v=1</summary>
        /// <param name="sellerMemberId">卖家memberId</param>
        /// <param name="productId">商品Id</param>
        /// <param name="catId">类目id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeQueryTradeTypesOfOfferResult> AlibabaTradeQueryTradeTypesOfOfferAsync(string sellerMemberId, long productId, long? catId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>创建订单前预览数据接口
        /// 订单创建只允许购买同一个供应商的商品。本接口返回创建订单相关的优惠等信息。
        /// 1、校验商品数据是否允许订购。
        /// 2、校验代销关系
        /// 3、校验库存、起批量、是否满足混批条件
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.createOrder.preview-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.createOrder.preview&amp;v=1</summary>
        /// <param name="addressParam">收货地址信息</param>
        /// <param name="cargoParamList">商品信息</param>
        /// <param name="invoiceParam">发票信息</param>
        /// <param name="flow">general（创建大市场订单），saleproxy（创建分销订单）。saleproxy流程将校验分销关系</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_007	- 与供应商的代销关系不存在,不能使用saleproxy通道下单。(flow不能使用slproxy)
        /// 500_005	- 商品[offerId]的购买数量不满足起批量限制。(商品的购买数量小于起批量)
        /// 500_006	- 商品[offerId]的购买数量或者价格不满足混批限制。(商品的购买数量或者总金额均不满足混批条件)
        /// 500_004	- 商品[offerId_specId]库存不足，请核实库存后订购。(商品的某个规格库存不足)
        /// 500_002	- 商品[offerId]不属于同一卖家或者没有指定specId。(存在多个卖家的商品或者商品没有指定specId)
        /// 500_003	- 商品[offerId ]不属于同一卖家或者规格[specId] 不属于商品[offerId](存在多个卖家的商品或者商品不存在specId的规格)
        /// 500_001	- 商品[offerId]不支持在线交易，无法下单。(商品不支持在线交易，目前不能购买)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCreateOrderPreviewResult AlibabaCreateOrderPreview(AlibabaTradeFastAddress addressParam, System.Collections.Generic.IEnumerable<AlibabaTradeFastCargo> cargoParamList, AlibabaTradeFastInvoice invoiceParam, string flow);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建订单前预览数据接口
        /// 订单创建只允许购买同一个供应商的商品。本接口返回创建订单相关的优惠等信息。
        /// 1、校验商品数据是否允许订购。
        /// 2、校验代销关系
        /// 3、校验库存、起批量、是否满足混批条件
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.createOrder.preview-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.createOrder.preview&amp;v=1</summary>
        /// <param name="addressParam">收货地址信息</param>
        /// <param name="cargoParamList">商品信息</param>
        /// <param name="invoiceParam">发票信息</param>
        /// <param name="flow">general（创建大市场订单），saleproxy（创建分销订单）。saleproxy流程将校验分销关系</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_007	- 与供应商的代销关系不存在,不能使用saleproxy通道下单。(flow不能使用slproxy)
        /// 500_005	- 商品[offerId]的购买数量不满足起批量限制。(商品的购买数量小于起批量)
        /// 500_006	- 商品[offerId]的购买数量或者价格不满足混批限制。(商品的购买数量或者总金额均不满足混批条件)
        /// 500_004	- 商品[offerId_specId]库存不足，请核实库存后订购。(商品的某个规格库存不足)
        /// 500_002	- 商品[offerId]不属于同一卖家或者没有指定specId。(存在多个卖家的商品或者商品没有指定specId)
        /// 500_003	- 商品[offerId ]不属于同一卖家或者规格[specId] 不属于商品[offerId](存在多个卖家的商品或者商品不存在specId的规格)
        /// 500_001	- 商品[offerId]不支持在线交易，无法下单。(商品不支持在线交易，目前不能购买)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCreateOrderPreviewResult> AlibabaCreateOrderPreviewAsync(AlibabaTradeFastAddress addressParam, System.Collections.Generic.IEnumerable<AlibabaTradeFastCargo> cargoParamList, AlibabaTradeFastInvoice invoiceParam, string flow, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>查询退款单详情-根据订单ID
        /// 根据订单号实时查询退款单列表，目前只能查询到售中的退款单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.refund.OpQueryBatchRefundByOrderIdAndStatus-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.refund.OpQueryBatchRefundByOrderIdAndStatus&amp;v=1</summary>
        /// <param name="orderId">订单id</param>
        /// <param name="queryType">1：活动；3:退款成功（只支持退款中和退款成功）</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500	- &amp;quot;{\&amp;quot;errorCode\&amp;quot;:\&amp;quot;003002\&amp;quot;,\&amp;quot;errorMessage\&amp;quot;:\&amp;quot;SERVICE:INVOKE_FAIL:OrderRefundService.queryBatchRefundByOrderIdAndStatus\&amp;quot;,\&amp;quot;cause\&amp;quot;:\&amp;quot;errorCode:ORDER_NOT_EXIST,errorMsg:null,cause:null\&amp;quot;}&amp;quot;(订单号有误)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeRefundOpQueryBatchRefundByOrderIdAndStatusResult2 AlibabaTradeRefundOpQueryBatchRefundByOrderIdAndStatus(string orderId, string queryType);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询退款单详情-根据订单ID
        /// 根据订单号实时查询退款单列表，目前只能查询到售中的退款单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.refund.OpQueryBatchRefundByOrderIdAndStatus-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.refund.OpQueryBatchRefundByOrderIdAndStatus&amp;v=1</summary>
        /// <param name="orderId">订单id</param>
        /// <param name="queryType">1：活动；3:退款成功（只支持退款中和退款成功）</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500	- &amp;quot;{\&amp;quot;errorCode\&amp;quot;:\&amp;quot;003002\&amp;quot;,\&amp;quot;errorMessage\&amp;quot;:\&amp;quot;SERVICE:INVOKE_FAIL:OrderRefundService.queryBatchRefundByOrderIdAndStatus\&amp;quot;,\&amp;quot;cause\&amp;quot;:\&amp;quot;errorCode:ORDER_NOT_EXIST,errorMsg:null,cause:null\&amp;quot;}&amp;quot;(订单号有误)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeRefundOpQueryBatchRefundByOrderIdAndStatusResult2> AlibabaTradeRefundOpQueryBatchRefundByOrderIdAndStatusAsync(string orderId, string queryType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>查询退款单列表(买家视角)
        /// 买家查看退款单列表，该接口不支持子账号查询，请使用主账号授权后查询
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.refund.buyer.queryOrderRefundList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.refund.buyer.queryOrderRefundList&amp;v=1</summary>
        /// <param name="orderId">订单Id</param>
        /// <param name="applyStartTime">退款申请时间（起始）</param>
        /// <param name="applyEndTime">退款申请时间（截止）</param>
        /// <param name="refundStatusSet">退款状态列表</param>
        /// <param name="sellerMemberId">卖家memberId</param>
        /// <param name="currentPageNum">当前页码</param>
        /// <param name="pageSize">每页条数</param>
        /// <param name="logisticsNo">退货物流单号（传此字段查询时，需同时传入sellerMemberId）</param>
        /// <param name="modifyStartTime">退款修改时间(起始)</param>
        /// <param name="modifyEndTime">退款修改时间(截止)</param>
        /// <param name="dipsuteType">1:售中退款，2:售后退款；0:所有退款单</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeRefundBuyerQueryOrderRefundListResult AlibabaTradeRefundBuyerQueryOrderRefundList(long? orderId = null, System.DateTimeOffset? applyStartTime = null, System.DateTimeOffset? applyEndTime = null, System.Collections.Generic.IEnumerable<string> refundStatusSet = null, string sellerMemberId = null, int? currentPageNum = null, int? pageSize = null, string logisticsNo = null, System.DateTimeOffset? modifyStartTime = null, System.DateTimeOffset? modifyEndTime = null, int? dipsuteType = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询退款单列表(买家视角)
        /// 买家查看退款单列表，该接口不支持子账号查询，请使用主账号授权后查询
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.refund.buyer.queryOrderRefundList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.refund.buyer.queryOrderRefundList&amp;v=1</summary>
        /// <param name="orderId">订单Id</param>
        /// <param name="applyStartTime">退款申请时间（起始）</param>
        /// <param name="applyEndTime">退款申请时间（截止）</param>
        /// <param name="refundStatusSet">退款状态列表</param>
        /// <param name="sellerMemberId">卖家memberId</param>
        /// <param name="currentPageNum">当前页码</param>
        /// <param name="pageSize">每页条数</param>
        /// <param name="logisticsNo">退货物流单号（传此字段查询时，需同时传入sellerMemberId）</param>
        /// <param name="modifyStartTime">退款修改时间(起始)</param>
        /// <param name="modifyEndTime">退款修改时间(截止)</param>
        /// <param name="dipsuteType">1:售中退款，2:售后退款；0:所有退款单</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeRefundBuyerQueryOrderRefundListResult> AlibabaTradeRefundBuyerQueryOrderRefundListAsync(long? orderId = null, System.DateTimeOffset? applyStartTime = null, System.DateTimeOffset? applyEndTime = null, System.Collections.Generic.IEnumerable<string> refundStatusSet = null, string sellerMemberId = null, int? currentPageNum = null, int? pageSize = null, string logisticsNo = null, System.DateTimeOffset? modifyStartTime = null, System.DateTimeOffset? modifyEndTime = null, int? dipsuteType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>买家补充订单留言接口
        /// 买家补充订单留言接口，注意留言总长不超500字符
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.addFeedback-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.addFeedback&amp;v=1</summary>
        /// <param name="tradeFeedbackParam">请求参数</param>
        /// <returns>返回结果返回 ErrorCode 的错误信息
        /// 400_1	- parameter invalid(检查参数是否有传及参数类型是否符合要求)
        /// 400_2	- need authorization(需要授权登录)
        /// 500_1	- invoke remote service error(调用远程服务异常，请在ISV交流群里咨询技术支持或帮助中心提单)
        /// 500_2	- remote service error(服务异常，请稍后再试，或在ISV交流群里咨询技术支持或帮助中心提单)
        /// 500_2	- invalid parameter error(请求参数无效，请在ISV交流群里咨询技术支持或帮助中心提单)
        /// 500_2	- user order not exist error(订单号对应的订单不是当前授权用户的订单，无权操作)
        /// 500_2	- order not exist error(订单号不存在对应订单，请检查订单号是否正确)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response4 AlibabaTradeAddFeedback(AlibabaOceanOpenplatformBizTradeParamTradeFeedbackParam tradeFeedbackParam);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>买家补充订单留言接口
        /// 买家补充订单留言接口，注意留言总长不超500字符
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.addFeedback-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.addFeedback&amp;v=1</summary>
        /// <param name="tradeFeedbackParam">请求参数</param>
        /// <returns>返回结果返回 ErrorCode 的错误信息
        /// 400_1	- parameter invalid(检查参数是否有传及参数类型是否符合要求)
        /// 400_2	- need authorization(需要授权登录)
        /// 500_1	- invoke remote service error(调用远程服务异常，请在ISV交流群里咨询技术支持或帮助中心提单)
        /// 500_2	- remote service error(服务异常，请稍后再试，或在ISV交流群里咨询技术支持或帮助中心提单)
        /// 500_2	- invalid parameter error(请求参数无效，请在ISV交流群里咨询技术支持或帮助中心提单)
        /// 500_2	- user order not exist error(订单号对应的订单不是当前授权用户的订单，无权操作)
        /// 500_2	- order not exist error(订单号不存在对应订单，请检查订单号是否正确)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> AlibabaTradeAddFeedbackAsync(AlibabaOceanOpenplatformBizTradeParamTradeFeedbackParam tradeFeedbackParam, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>查询卖家混批设置
        /// 查询卖家混批设置。Query seller settings for mixed batch.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.OpQueryMarketingMixConfig-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.OpQueryMarketingMixConfig&amp;v=1</summary>
        /// <param name="sellerMemberId">卖家memberId</param>
        /// <param name="sellerLoginId">卖家LoginId，sellerMemberId为空时，以loginId为准</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_1	- 卖家信息不得为空。(检查sllerMemberId和sellerLoginId，这两个不能同时为空)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeOpQueryMarketingMixConfigResult AlibabaTradeOpQueryMarketingMixConfig(string sellerMemberId = null, string sellerLoginId = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询卖家混批设置
        /// 查询卖家混批设置。Query seller settings for mixed batch.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.OpQueryMarketingMixConfig-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.OpQueryMarketingMixConfig&amp;v=1</summary>
        /// <param name="sellerMemberId">卖家memberId</param>
        /// <param name="sellerLoginId">卖家LoginId，sellerMemberId为空时，以loginId为准</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_1	- 卖家信息不得为空。(检查sllerMemberId和sellerLoginId，这两个不能同时为空)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeOpQueryMarketingMixConfigResult> AlibabaTradeOpQueryMarketingMixConfigAsync(string sellerMemberId = null, string sellerLoginId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>订单列表查看(买家视角)
        /// 获取买家的订单列表，也就是用户的memberId必须等于订单里的买家memberId。该接口仅仅返回订单基本信息，不会返回订单的物流信息和发票信息；如果需要获取物流信息，请调用获取订单详情接口；如果需要获取发票信息，请调用获取发票信息的API
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.getBuyerOrderList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.getBuyerOrderList&amp;v=1</summary>
        /// <param name="bizTypes">业务类型，支持： &amp;quot;cn&amp;quot;(普通订单类型), &amp;quot;ws&amp;quot;(大额批发订单类型), &amp;quot;yp&amp;quot;(普通拿样订单类型), &amp;quot;yf&amp;quot;(一分钱拿样订单类型), &amp;quot;fs&amp;quot;(倒批(限时折扣)订单类型), &amp;quot;cz&amp;quot;(加工定制订单类型), &amp;quot;ag&amp;quot;(协议采购订单类型), &amp;quot;hp&amp;quot;(伙拼订单类型), &amp;quot;gc&amp;quot;(国采订单类型), &amp;quot;supply&amp;quot;(供销订单类型), &amp;quot;nyg&amp;quot;(nyg订单类型), &amp;quot;factory&amp;quot;(淘工厂订单类型), &amp;quot;quick&amp;quot;(快订下单), &amp;quot;xiangpin&amp;quot;(享拼订单), &amp;quot;nest&amp;quot;(采购商城-鸟巢), &amp;quot;f2f&amp;quot;(当面付), &amp;quot;cyfw&amp;quot;(存样服务), &amp;quot;sp&amp;quot;(代销订单标记), &amp;quot;wg&amp;quot;(微供订单), &amp;quot;factorysamp&amp;quot;(淘工厂打样订单), &amp;quot;factorybig&amp;quot;(淘工厂大货订单)</param>
        /// <param name="createEndTime">下单结束时间</param>
        /// <param name="createStartTime">下单开始时间</param>
        /// <param name="isHis">是否查询历史订单表,默认查询当前表，即默认值为false</param>
        /// <param name="modifyEndTime">查询修改时间结束</param>
        /// <param name="modifyStartTime">查询修改时间开始</param>
        /// <param name="orderStatus">订单状态，值有 success, cancel(交易取消，违约金等交割完毕), waitbuyerpay(等待卖家付款)， waitsellersend(等待卖家发货), waitbuyerreceive(等待买家收货 )</param>
        /// <param name="page">查询分页页码，从1开始</param>
        /// <param name="pageSize">查询的每页的数量</param>
        /// <param name="refundStatus">退款状态，支持： &amp;quot;waitselleragree&amp;quot;(等待卖家同意), &amp;quot;refundsuccess&amp;quot;(退款成功), &amp;quot;refundclose&amp;quot;(退款关闭), &amp;quot;waitbuyermodify&amp;quot;(待买家修改), &amp;quot;waitbuyersend&amp;quot;(等待买家退货), &amp;quot;waitsellerreceive&amp;quot;(等待卖家确认收货)</param>
        /// <param name="sellerMemberId">卖家memberId</param>
        /// <param name="sellerRateStatus">卖家评价状态 (4:已评价,5:未评价,6;不需要评价)</param>
        /// <param name="tradeType">交易类型:
        /// 担保交易(1),
        /// 预存款交易(2),
        /// ETC境外收单交易(3),
        /// 即时到帐交易(4),
        /// 保障金安全交易(5),
        /// 统一交易流程(6),
        /// 分阶段交易(7),
        /// 货到付款交易(8),
        /// 信用凭证支付交易(9),
        /// 账期支付交易(10),
        /// 1688交易4.0，新分阶段交易(50060),
        /// 当面付的交易流程(50070),
        /// 服务类的交易流程(50080)</param>
        /// <param name="productName">商品名称</param>
        /// <param name="needBuyerAddressAndPhone">是否需要查询买家的详细地址信息和电话</param>
        /// <param name="needMemoInfo">是否需要查询备注信息</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeGetBuyerOrderListResult AlibabaTradeGetBuyerOrderList(System.Collections.Generic.IEnumerable<string> bizTypes = null, System.DateTimeOffset? createEndTime = null, System.DateTimeOffset? createStartTime = null, bool? isHis = null, System.DateTimeOffset? modifyEndTime = null, System.DateTimeOffset? modifyStartTime = null, string orderStatus = null, int? page = null, int? pageSize = null, string refundStatus = null, string sellerMemberId = null, int? sellerRateStatus = null, string tradeType = null, string productName = null, bool? needBuyerAddressAndPhone = null, bool? needMemoInfo = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>订单列表查看(买家视角)
        /// 获取买家的订单列表，也就是用户的memberId必须等于订单里的买家memberId。该接口仅仅返回订单基本信息，不会返回订单的物流信息和发票信息；如果需要获取物流信息，请调用获取订单详情接口；如果需要获取发票信息，请调用获取发票信息的API
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.getBuyerOrderList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.getBuyerOrderList&amp;v=1</summary>
        /// <param name="bizTypes">业务类型，支持： &amp;quot;cn&amp;quot;(普通订单类型), &amp;quot;ws&amp;quot;(大额批发订单类型), &amp;quot;yp&amp;quot;(普通拿样订单类型), &amp;quot;yf&amp;quot;(一分钱拿样订单类型), &amp;quot;fs&amp;quot;(倒批(限时折扣)订单类型), &amp;quot;cz&amp;quot;(加工定制订单类型), &amp;quot;ag&amp;quot;(协议采购订单类型), &amp;quot;hp&amp;quot;(伙拼订单类型), &amp;quot;gc&amp;quot;(国采订单类型), &amp;quot;supply&amp;quot;(供销订单类型), &amp;quot;nyg&amp;quot;(nyg订单类型), &amp;quot;factory&amp;quot;(淘工厂订单类型), &amp;quot;quick&amp;quot;(快订下单), &amp;quot;xiangpin&amp;quot;(享拼订单), &amp;quot;nest&amp;quot;(采购商城-鸟巢), &amp;quot;f2f&amp;quot;(当面付), &amp;quot;cyfw&amp;quot;(存样服务), &amp;quot;sp&amp;quot;(代销订单标记), &amp;quot;wg&amp;quot;(微供订单), &amp;quot;factorysamp&amp;quot;(淘工厂打样订单), &amp;quot;factorybig&amp;quot;(淘工厂大货订单)</param>
        /// <param name="createEndTime">下单结束时间</param>
        /// <param name="createStartTime">下单开始时间</param>
        /// <param name="isHis">是否查询历史订单表,默认查询当前表，即默认值为false</param>
        /// <param name="modifyEndTime">查询修改时间结束</param>
        /// <param name="modifyStartTime">查询修改时间开始</param>
        /// <param name="orderStatus">订单状态，值有 success, cancel(交易取消，违约金等交割完毕), waitbuyerpay(等待卖家付款)， waitsellersend(等待卖家发货), waitbuyerreceive(等待买家收货 )</param>
        /// <param name="page">查询分页页码，从1开始</param>
        /// <param name="pageSize">查询的每页的数量</param>
        /// <param name="refundStatus">退款状态，支持： &amp;quot;waitselleragree&amp;quot;(等待卖家同意), &amp;quot;refundsuccess&amp;quot;(退款成功), &amp;quot;refundclose&amp;quot;(退款关闭), &amp;quot;waitbuyermodify&amp;quot;(待买家修改), &amp;quot;waitbuyersend&amp;quot;(等待买家退货), &amp;quot;waitsellerreceive&amp;quot;(等待卖家确认收货)</param>
        /// <param name="sellerMemberId">卖家memberId</param>
        /// <param name="sellerRateStatus">卖家评价状态 (4:已评价,5:未评价,6;不需要评价)</param>
        /// <param name="tradeType">交易类型:
        /// 担保交易(1),
        /// 预存款交易(2),
        /// ETC境外收单交易(3),
        /// 即时到帐交易(4),
        /// 保障金安全交易(5),
        /// 统一交易流程(6),
        /// 分阶段交易(7),
        /// 货到付款交易(8),
        /// 信用凭证支付交易(9),
        /// 账期支付交易(10),
        /// 1688交易4.0，新分阶段交易(50060),
        /// 当面付的交易流程(50070),
        /// 服务类的交易流程(50080)</param>
        /// <param name="productName">商品名称</param>
        /// <param name="needBuyerAddressAndPhone">是否需要查询买家的详细地址信息和电话</param>
        /// <param name="needMemoInfo">是否需要查询备注信息</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeGetBuyerOrderListResult> AlibabaTradeGetBuyerOrderListAsync(System.Collections.Generic.IEnumerable<string> bizTypes = null, System.DateTimeOffset? createEndTime = null, System.DateTimeOffset? createStartTime = null, bool? isHis = null, System.DateTimeOffset? modifyEndTime = null, System.DateTimeOffset? modifyStartTime = null, string orderStatus = null, int? page = null, int? pageSize = null, string refundStatus = null, string sellerMemberId = null, int? sellerRateStatus = null, string tradeType = null, string productName = null, bool? needBuyerAddressAndPhone = null, bool? needMemoInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>批量提交订单评价
        /// 此接口支持多笔订单（暂定最多10笔每次）同时提交评价，并且只支持卖家向买家的评价，目前当某笔订单存在多个商品时,只能为这笔订单的这些商品提交相同的评价内容。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:trade.order.batch.rate-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=trade.order.batch.rate&amp;v=1</summary>
        /// <param name="orders">订单评价：Map(String,TradeRateParam[]),前者为订单号，后者为评价内容与星级,结构请看数据结构订单评价参数。
        /// 评价星级(starLevel)必须是1-5, 当starLevel  4 时必须同时指定评价内容</param>
        /// <returns>提交评价失败的订单Map(Long,String),前者为失败的订单号，后者为失败的错误码：
        /// 1 返回为空时，创建全部成功
        /// 2 没指定订单号及评价内容时,接口直接返回成功结果
        /// 3 当订单已经评价过时，接口直接返回成功结果，不做任何处理
        /// 4 当指定的订单不是指定postMemberId用户的订单是，接口直接返回成功结果，不做任何处理
        /// 5 当指定的订单不处于待评价状态时，接口直接返回成功结果，不做任何处理返回 ErrorCode 的错误信息
        /// NULL_PARAM	- 指定的参数为空
        /// INVALID_PARAM	- 指定的参数有误
        /// INVOKE_DUBBO_ERROR	- 接口内部服务调用错误,请联系服务接口人
        /// UPDATE_DATABASE_FAILED	- 提交评价失败,数据库异常</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response5 TradeOrderBatchRate(System.Collections.Generic.IDictionary<string, string> orders);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>批量提交订单评价
        /// 此接口支持多笔订单（暂定最多10笔每次）同时提交评价，并且只支持卖家向买家的评价，目前当某笔订单存在多个商品时,只能为这笔订单的这些商品提交相同的评价内容。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:trade.order.batch.rate-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=trade.order.batch.rate&amp;v=1</summary>
        /// <param name="orders">订单评价：Map(String,TradeRateParam[]),前者为订单号，后者为评价内容与星级,结构请看数据结构订单评价参数。
        /// 评价星级(starLevel)必须是1-5, 当starLevel  4 时必须同时指定评价内容</param>
        /// <returns>提交评价失败的订单Map(Long,String),前者为失败的订单号，后者为失败的错误码：
        /// 1 返回为空时，创建全部成功
        /// 2 没指定订单号及评价内容时,接口直接返回成功结果
        /// 3 当订单已经评价过时，接口直接返回成功结果，不做任何处理
        /// 4 当指定的订单不是指定postMemberId用户的订单是，接口直接返回成功结果，不做任何处理
        /// 5 当指定的订单不处于待评价状态时，接口直接返回成功结果，不做任何处理返回 ErrorCode 的错误信息
        /// NULL_PARAM	- 指定的参数为空
        /// INVALID_PARAM	- 指定的参数有误
        /// INVOKE_DUBBO_ERROR	- 接口内部服务调用错误,请联系服务接口人
        /// UPDATE_DATABASE_FAILED	- 提交评价失败,数据库异常</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response5> TradeOrderBatchRateAsync(System.Collections.Generic.IDictionary<string, string> orders, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>延迟订单确认时间(卖家操作)
        /// 延迟订单确认时间。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.order.PostponeConfirmTime-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.order.PostponeConfirmTime&amp;v=1</summary>
        /// <param name="orderId">订单ID</param>
        /// <param name="delayedDays">延迟时间（天）</param>
        /// <param name="subPayOrderId">子支付单号，如果传递，该值必须是真实的subPayOrderId</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400	- 不支持输入的延迟天数[2],当前支持的延迟天数为3,5,7,10,30(当前支持的延迟天数为3,5,7,10,30)
        /// 500_1	- 延迟交易确认(订单不是等待买家确认收货状态)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeOrderPostponeConfirmTimeResult AlibabaTradeOrderPostponeConfirmTime(long orderId, int delayedDays, long? subPayOrderId = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>延迟订单确认时间(卖家操作)
        /// 延迟订单确认时间。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.order.PostponeConfirmTime-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.order.PostponeConfirmTime&amp;v=1</summary>
        /// <param name="orderId">订单ID</param>
        /// <param name="delayedDays">延迟时间（天）</param>
        /// <param name="subPayOrderId">子支付单号，如果传递，该值必须是真实的subPayOrderId</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400	- 不支持输入的延迟天数[2],当前支持的延迟天数为3,5,7,10,30(当前支持的延迟天数为3,5,7,10,30)
        /// 500_1	- 延迟交易确认(订单不是等待买家确认收货状态)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeOrderPostponeConfirmTimeResult> AlibabaTradeOrderPostponeConfirmTimeAsync(long orderId, int delayedDays, long? subPayOrderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取交易地址代码表详情
        /// 获取交易地址代码表，该API会返回输入code的详情和该code的下一级地区code.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.addresscode.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.addresscode.get&amp;v=1</summary>
        /// <param name="areaCode">地址code码</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 404	- 无法找到相对应的地址信息。(请输入正确的areaCode)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeAddresscodeGetResult AlibabaTradeAddresscodeGet(string areaCode, string webSite);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取交易地址代码表详情
        /// 获取交易地址代码表，该API会返回输入code的详情和该code的下一级地区code.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.addresscode.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.addresscode.get&amp;v=1</summary>
        /// <param name="areaCode">地址code码</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 404	- 无法找到相对应的地址信息。(请输入正确的areaCode)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeAddresscodeGetResult> AlibabaTradeAddresscodeGetAsync(string areaCode, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>根据理赔单或保险单号查询对应的订单号
        /// 根据理赔单或保险单号查询对应的订单号，查询理赔时type传lp，查询运费险时type传bx
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.queryOrderByInsure-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.queryOrderByInsure&amp;v=1</summary>
        /// <param name="tradeProtectParam">请求参数</param>
        /// <returns>返回结果返回 ErrorCode 的错误信息
        /// 400_1	- parameter invalid(检查参数)
        /// 400_2	- need authorization(授权登录)
        /// 400_3	- not support type(保单类型：查询理赔时type传lp，查询运费险时type传bx)
        /// 400_4	- protectId not exist(保单不存在)
        /// 400_5	- no permission(保单所属用户非当前授权用户)
        /// 400_6	- refundId not exist(保单对应的退款单不存在)
        /// 500_1	- invoke remote service error(调用底层服务异常，请ISV交流群里咨询技术支持或直接帮助中心提单)
        /// 500_2	- system error(调用底层服务异常，请ISV交流群里咨询技术支持或直接帮助中心提单)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaOceanOpenplatformBizTradeResultTradeProtectResult AlibabaTradeQueryOrderByInsure(AlibabaOceanOpenplatformBizTradeParamTradeProtectParam tradeProtectParam);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据理赔单或保险单号查询对应的订单号
        /// 根据理赔单或保险单号查询对应的订单号，查询理赔时type传lp，查询运费险时type传bx
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.queryOrderByInsure-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.queryOrderByInsure&amp;v=1</summary>
        /// <param name="tradeProtectParam">请求参数</param>
        /// <returns>返回结果返回 ErrorCode 的错误信息
        /// 400_1	- parameter invalid(检查参数)
        /// 400_2	- need authorization(授权登录)
        /// 400_3	- not support type(保单类型：查询理赔时type传lp，查询运费险时type传bx)
        /// 400_4	- protectId not exist(保单不存在)
        /// 400_5	- no permission(保单所属用户非当前授权用户)
        /// 400_6	- refundId not exist(保单对应的退款单不存在)
        /// 500_1	- invoke remote service error(调用底层服务异常，请ISV交流群里咨询技术支持或直接帮助中心提单)
        /// 500_2	- system error(调用底层服务异常，请ISV交流群里咨询技术支持或直接帮助中心提单)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaOceanOpenplatformBizTradeResultTradeProtectResult> AlibabaTradeQueryOrderByInsureAsync(AlibabaOceanOpenplatformBizTradeParamTradeProtectParam tradeProtectParam, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>买家获取保存的收货地址信息列表
        /// 买家获取保存的收货地址信息列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.receiveAddress.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.receiveAddress.get&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeReceiveAddressGetResult AlibabaTradeReceiveAddressGet();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>买家获取保存的收货地址信息列表
        /// 买家获取保存的收货地址信息列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.receiveAddress.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.receiveAddress.get&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeReceiveAddressGetResult> AlibabaTradeReceiveAddressGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>订单列表查看(卖家视角)
        /// 获取卖家订单列表，也就是用户的memberId必须等于订单的sellerMemberId。该接口仅仅返回订单基本信息，不会返回订单的物流信息和发票信息；如果需要获取物流信息，请调用获取订单详情接口；如果需要获取发票信息，请调用获取发票信息的API
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.getSellerOrderList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.getSellerOrderList&amp;v=1</summary>
        /// <param name="createStartTime">下单开始时间</param>
        /// <param name="createEndTime">下单结束时间</param>
        /// <param name="modifyStartTime">查询修改时间开始</param>
        /// <param name="modifyEndTime">查询修改时间结束</param>
        /// <param name="page">查询分页页码，从1开始</param>
        /// <param name="pageSize">查询的每页的数量(最高20)</param>
        /// <param name="orderStatus">订单状态，值有success,cancel(交易取消，违约金等交割完毕),waitbuyerpay(等待买家付款)，waitsellersend(等待卖家发货),waitbuyerreceive(等待买家收货)</param>
        /// <param name="refundStatus">退款状态，支持：
        /// &amp;quot;waitselleragree&amp;quot;(等待卖家同意),
        /// &amp;quot;refundsuccess&amp;quot;(退款成功),
        /// &amp;quot;refundclose&amp;quot;(退款关闭),
        /// &amp;quot;waitbuyermodify&amp;quot;(待买家修改),
        /// &amp;quot;waitbuyersend&amp;quot;(等待买家退货),
        /// &amp;quot;waitsellerreceive&amp;quot;(等待卖家确认收货)</param>
        /// <param name="buyerMemberId">买家memberId</param>
        /// <param name="tradeType">交易类型:
        /// 担保交易(1),
        /// 预存款交易(2),
        /// ETC境外收单交易(3),
        /// 即时到帐交易(4),
        /// 保障金安全交易(5),
        /// 统一交易流程(6),
        /// 分阶段交易(7),
        /// 货到付款交易(8),
        /// 信用凭证支付交易(9),
        /// 账期支付交易(10),
        /// 1688交易4.0，新分阶段交易(50060),
        /// 当面付的交易流程(50070),
        /// 服务类的交易流程(50080)</param>
        /// <param name="bizTypes">业务类型，支持： &amp;quot;cn&amp;quot;(普通订单类型), &amp;quot;ws&amp;quot;(大额批发订单类型), &amp;quot;yp&amp;quot;(普通拿样订单类型), &amp;quot;yf&amp;quot;(一分钱拿样订单类型), &amp;quot;fs&amp;quot;(倒批(限时折扣)订单类型), &amp;quot;cz&amp;quot;(加工定制订单类型), &amp;quot;ag&amp;quot;(协议采购订单类型), &amp;quot;hp&amp;quot;(伙拼订单类型), &amp;quot;gc&amp;quot;(国采订单类型), &amp;quot;supply&amp;quot;(供销订单类型), &amp;quot;nyg&amp;quot;(nyg订单类型), &amp;quot;factory&amp;quot;(淘工厂订单类型), &amp;quot;quick&amp;quot;(快订下单), &amp;quot;xiangpin&amp;quot;(享拼订单), &amp;quot;nest&amp;quot;(采购商城-鸟巢), &amp;quot;f2f&amp;quot;(当面付), &amp;quot;cyfw&amp;quot;(存样服务), &amp;quot;sp&amp;quot;(代销订单标记), &amp;quot;wg&amp;quot;(微供订单), &amp;quot;factorysamp&amp;quot;(淘工厂打样订单), &amp;quot;factorybig&amp;quot;(淘工厂大货订单)</param>
        /// <param name="isHis">是否查询历史订单表,默认查询当前表</param>
        /// <param name="productName">商品名称</param>
        /// <param name="needBuyerAddressAndPhone">是否需要查询买家的详细地址信息和电话</param>
        /// <param name="needMemoInfo">是否需要查询备注信息</param>
        /// <param name="tousuStatus">是否查找投诉中的地拟改单</param>
        /// <param name="buyerRateStatus">买家评价状态 (4:已评价,5:未评价,6;不需要评价)</param>
        /// <param name="sellerRateStatus">卖家评价状态 (4:已评价,5:未评价,6;不需要评价)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeGetSellerOrderListResult AlibabaTradeGetSellerOrderList(System.DateTimeOffset? createStartTime = null, System.DateTimeOffset? createEndTime = null, System.DateTimeOffset? modifyStartTime = null, System.DateTimeOffset? modifyEndTime = null, int? page = null, int? pageSize = null, string orderStatus = null, string refundStatus = null, string buyerMemberId = null, string tradeType = null, System.Collections.Generic.IEnumerable<string> bizTypes = null, bool? isHis = null, string productName = null, bool? needBuyerAddressAndPhone = null, bool? needMemoInfo = null, bool? tousuStatus = null, int? buyerRateStatus = null, int? sellerRateStatus = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>订单列表查看(卖家视角)
        /// 获取卖家订单列表，也就是用户的memberId必须等于订单的sellerMemberId。该接口仅仅返回订单基本信息，不会返回订单的物流信息和发票信息；如果需要获取物流信息，请调用获取订单详情接口；如果需要获取发票信息，请调用获取发票信息的API
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.getSellerOrderList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.getSellerOrderList&amp;v=1</summary>
        /// <param name="createStartTime">下单开始时间</param>
        /// <param name="createEndTime">下单结束时间</param>
        /// <param name="modifyStartTime">查询修改时间开始</param>
        /// <param name="modifyEndTime">查询修改时间结束</param>
        /// <param name="page">查询分页页码，从1开始</param>
        /// <param name="pageSize">查询的每页的数量(最高20)</param>
        /// <param name="orderStatus">订单状态，值有success,cancel(交易取消，违约金等交割完毕),waitbuyerpay(等待买家付款)，waitsellersend(等待卖家发货),waitbuyerreceive(等待买家收货)</param>
        /// <param name="refundStatus">退款状态，支持：
        /// &amp;quot;waitselleragree&amp;quot;(等待卖家同意),
        /// &amp;quot;refundsuccess&amp;quot;(退款成功),
        /// &amp;quot;refundclose&amp;quot;(退款关闭),
        /// &amp;quot;waitbuyermodify&amp;quot;(待买家修改),
        /// &amp;quot;waitbuyersend&amp;quot;(等待买家退货),
        /// &amp;quot;waitsellerreceive&amp;quot;(等待卖家确认收货)</param>
        /// <param name="buyerMemberId">买家memberId</param>
        /// <param name="tradeType">交易类型:
        /// 担保交易(1),
        /// 预存款交易(2),
        /// ETC境外收单交易(3),
        /// 即时到帐交易(4),
        /// 保障金安全交易(5),
        /// 统一交易流程(6),
        /// 分阶段交易(7),
        /// 货到付款交易(8),
        /// 信用凭证支付交易(9),
        /// 账期支付交易(10),
        /// 1688交易4.0，新分阶段交易(50060),
        /// 当面付的交易流程(50070),
        /// 服务类的交易流程(50080)</param>
        /// <param name="bizTypes">业务类型，支持： &amp;quot;cn&amp;quot;(普通订单类型), &amp;quot;ws&amp;quot;(大额批发订单类型), &amp;quot;yp&amp;quot;(普通拿样订单类型), &amp;quot;yf&amp;quot;(一分钱拿样订单类型), &amp;quot;fs&amp;quot;(倒批(限时折扣)订单类型), &amp;quot;cz&amp;quot;(加工定制订单类型), &amp;quot;ag&amp;quot;(协议采购订单类型), &amp;quot;hp&amp;quot;(伙拼订单类型), &amp;quot;gc&amp;quot;(国采订单类型), &amp;quot;supply&amp;quot;(供销订单类型), &amp;quot;nyg&amp;quot;(nyg订单类型), &amp;quot;factory&amp;quot;(淘工厂订单类型), &amp;quot;quick&amp;quot;(快订下单), &amp;quot;xiangpin&amp;quot;(享拼订单), &amp;quot;nest&amp;quot;(采购商城-鸟巢), &amp;quot;f2f&amp;quot;(当面付), &amp;quot;cyfw&amp;quot;(存样服务), &amp;quot;sp&amp;quot;(代销订单标记), &amp;quot;wg&amp;quot;(微供订单), &amp;quot;factorysamp&amp;quot;(淘工厂打样订单), &amp;quot;factorybig&amp;quot;(淘工厂大货订单)</param>
        /// <param name="isHis">是否查询历史订单表,默认查询当前表</param>
        /// <param name="productName">商品名称</param>
        /// <param name="needBuyerAddressAndPhone">是否需要查询买家的详细地址信息和电话</param>
        /// <param name="needMemoInfo">是否需要查询备注信息</param>
        /// <param name="tousuStatus">是否查找投诉中的地拟改单</param>
        /// <param name="buyerRateStatus">买家评价状态 (4:已评价,5:未评价,6;不需要评价)</param>
        /// <param name="sellerRateStatus">卖家评价状态 (4:已评价,5:未评价,6;不需要评价)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeGetSellerOrderListResult> AlibabaTradeGetSellerOrderListAsync(System.DateTimeOffset? createStartTime = null, System.DateTimeOffset? createEndTime = null, System.DateTimeOffset? modifyStartTime = null, System.DateTimeOffset? modifyEndTime = null, int? page = null, int? pageSize = null, string orderStatus = null, string refundStatus = null, string buyerMemberId = null, string tradeType = null, System.Collections.Generic.IEnumerable<string> bizTypes = null, bool? isHis = null, string productName = null, bool? needBuyerAddressAndPhone = null, bool? needMemoInfo = null, bool? tousuStatus = null, int? buyerRateStatus = null, int? sellerRateStatus = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取订单的发票信息
        /// 获取订单的发票信息, 该接口需要特定的合作伙伴才能申请使用
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.invoice.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.invoice.get&amp;v=1</summary>
        /// <param name="orderId">发票所关联的订单ID</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_1	- 获取订单时出错(订单号输入有误)
        /// 404_1	- 该订单没有发票信息(该订单没有发票信息)
        /// PEMISSION_ERROR	- 你没有权限访问该发票信息(不是授权用户的订单)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaInvoiceGetResult AlibabaInvoiceGet(long orderId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取订单的发票信息
        /// 获取订单的发票信息, 该接口需要特定的合作伙伴才能申请使用
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.invoice.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.invoice.get&amp;v=1</summary>
        /// <param name="orderId">发票所关联的订单ID</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_1	- 获取订单时出错(订单号输入有误)
        /// 404_1	- 该订单没有发票信息(该订单没有发票信息)
        /// PEMISSION_ERROR	- 你没有权限访问该发票信息(不是授权用户的订单)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaInvoiceGetResult> AlibabaInvoiceGetAsync(long orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>取消交易
        /// 买家或者卖家取消交易，注意只有特定状态的交易才能取消，1688可用于取消未付款的订单。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.cancel-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.cancel&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="tradeID">交易id，订单号</param>
        /// <param name="cancelReason">原因描述；buyerCancel:买家取消订单;sellerGoodsLack:卖家库存不足;other:其它</param>
        /// <param name="remark">备注</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// ORDER_STATUS_ERROR	- 订单状态错误(只能取消待支付的订单，需要先确认订单状态)
        /// 400_3	- 没有权限取消该订单(只有订单的买卖双方才能取消订单，确认授权用户是否该订单的买卖双方)
        /// ORDER_NOT_EXIST	- 订单不存在(确认订单号是否正确)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeCancelResult AlibabaTradeCancel(string webSite, long tradeID, string cancelReason, string remark = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>取消交易
        /// 买家或者卖家取消交易，注意只有特定状态的交易才能取消，1688可用于取消未付款的订单。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.cancel-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.cancel&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="tradeID">交易id，订单号</param>
        /// <param name="cancelReason">原因描述；buyerCancel:买家取消订单;sellerGoodsLack:卖家库存不足;other:其它</param>
        /// <param name="remark">备注</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// ORDER_STATUS_ERROR	- 订单状态错误(只能取消待支付的订单，需要先确认订单状态)
        /// 400_3	- 没有权限取消该订单(只有订单的买卖双方才能取消订单，确认授权用户是否该订单的买卖双方)
        /// ORDER_NOT_EXIST	- 订单不存在(确认订单号是否正确)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeCancelResult> AlibabaTradeCancelAsync(string webSite, long tradeID, string cancelReason, string remark = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取交易地址的下一级信息
        /// 获取交易地址的下一级信息，如果code不输入，返回最上层的地址列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.addresscode.getchild-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.addresscode.getchild&amp;v=1</summary>
        /// <param name="webSite">站点信息,1688或者alibaba</param>
        /// <param name="areaCode">地址码，如果不输入则获取最上层信息</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeAddresscodeGetchildResult AlibabaTradeAddresscodeGetchild(string webSite, string areaCode = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取交易地址的下一级信息
        /// 获取交易地址的下一级信息，如果code不输入，返回最上层的地址列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.addresscode.getchild-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.addresscode.getchild&amp;v=1</summary>
        /// <param name="webSite">站点信息,1688或者alibaba</param>
        /// <param name="areaCode">地址码，如果不输入则获取最上层信息</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeAddresscodeGetchildResult> AlibabaTradeAddresscodeGetchildAsync(string webSite, string areaCode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【最新】快速创建1688订单（推荐使用）
        /// 快速创建1688大市场订单和1688代销订单，订单一步创建，不需要先调用订单预览，接口参数简单，地址参数传省市区街道的文本名，不需要额外查询地址码，系统默认选择最优惠下单方式，默认支付宝担保交易方式，详细地址必须不超过200个字，不要用地址做其他用途，需要留言或备注的有专门字段，留言和备注都支持500字
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.fastCreateOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.fastCreateOrder&amp;v=1</summary>
        /// <param name="flow">流程</param>
        /// <param name="addressParam">收货地址信息</param>
        /// <param name="cargoParamList">商品信息</param>
        /// <param name="subUserId">子账号ID</param>
        /// <param name="message">买家留言</param>
        /// <param name="invoiceParam">发票信息</param>
        /// <param name="shopPromotionId">店铺优惠ID，通过“创建订单前预览数据接口”获得。为空默认使用默认优惠</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400	- 请求参数错误(检查请求参数是否满足要求)
        /// 400	- User authorization is required	(TOKEN失效，需要重新获取)
        /// 400	- Address is required	(收货地址必须要填)
        /// 400	- Cargo list is required	(货品信息必须要填)
        /// 400	- max cargo count is	(超过最大购买数)
        /// 400	- OfferId and quantity is required	(商品ID和购买数量必须要填)
        /// 400	- AddressId or FullName and Address is required	(收货地址信息要填完整)
        /// 400	- FullName length is required in 2~25	(收货人信息长度范围为2-25)
        /// 400		- phone length is required 1~30	(电话号码长度范围为1-30)
        /// 400		- Flow is empty or not exist	(flow参数必填，若接口没有要求传flow则可以忽略)
        /// 400		- Cargo list not duplicate is required(货品信息出现了重复的情况，需要累加处理)
        /// 400		- not support tradeType:	(不支持的交易方式)
        /// 400	- availableQuota less than sumPayment	(可用额度不足，需要先联系卖家提升账期可用额度)
        /// 500		- view order service error(接口调用出错，请检查参数是否正确或稍后重试)
        /// FAIL_BIZ_FAIL_BIZ_UNSUPPORT_MIX		- 该卖家不支持混批,所有货品数量应该达到最小起批量。请重新选择货品或修改购买数量后进行下单。	
        /// FAIL_BIZ_FAIL_BIZ_BOOKED_BEYOND_THE_MAX_QUANTITY		- 该订单中部分货品的订购数量超过了最大允许的购买量。
        /// FAIL_BIZ_FAIL_BIZ_BOOKED_LESS_THAN_LEAST_QUANTITY		- 该订单中部分货品的订购数量小于最小起批量。	
        /// FAIL_BIZ_FAIL_BIZ_ILLEGAL_OFFER		- 该订单中部分货品不支持交易，请联系卖家。
        /// FAIL_BIZ_FAIL_BIZ_LESS_THAN_MIX_BEGIN	- 该订单中部分货品数量小于混批起批量，请重新选择货品进行下单。
        /// FAIL_BIZ_FAIL_BIZ_ILLEGAL_CARGO_DATA	- 货品信息错误或者货品已失效，请重试
        /// FAIL_BIZ_QUANTITY_UNMATCH_SELLUNIT_SCALE	- 您该笔订单的货品数量不符合订购要求，请查看卖家设置并修改。
        /// FAIL_BIZ_ORDER_VIEW_RESULT_NOT_GET		- 订单展示服务没有返回处理结果。
        /// FAIL_BIZ_PRODUCT_TRADE_STAT_ERROR		- 库存不足或扣减库存时出现了问题。请确认购买数量后重新提交订单。	
        /// FAIL_BIZ_FAIL_BIZ_PROXY_RELATED_NOT_FUND	- 卖家未授权代销，您不能在此通道下单!请联系卖家授权!	
        /// FAIL_BIZ_FAIL_BIZ_QUANTITY_OUT_OF_SCOPE	- 订购数量必须大于0小于等于10亿。	
        /// FAIL_BIZ_MESSAGE_LENGTH_IS_ILLEGA	- 您的留言过长，留言长度须小于500个字符，请更改留言!
        /// FAIL_BIZ_FAIL_BIZ_CARGO_CANNOT_AUTH		- 您无权购买该订单中部分私密货品，请联系卖家。
        /// FAIL_BIZ_FAIL_BIZ_ILLEGAL_SELLER_NOT_ENABLED	- 卖家处于无效状态!不允许进行交易!
        /// FAIL_BIZ_CARGO_CARRIAGE_HAS_CHANGED		- 该货品运费已变化，请重新确认订单或者联系卖家。
        /// FAIL_BIZ_RECEIVE_ADDRESS_MOBILE_PHONE_NULL	- 收货地址里的电话和手机不能同时为空。
        /// FAIL_BIZ_XXX_ALL_ORDER_BLOCKS_SOME_COMMIT_ERROR		- 部分订单提交逻辑处理失败。
        /// FAIL_BIZ_SYSTEM_ERROR		- 系统繁忙,请重试!
        /// FAIL_BIZ_FAIL_BIZ_CARGO_CARRIAGE_HAS_ERROR		- 获取该货品运费发生错误，请重试。
        /// FAIL_BIZ_FAIL_BIZ_OFFER_PREHEATING		- 该订单中存在商品未到指定开售时间。
        /// FAIL_BIZ_TRADE_TYPE_HAS_CHANGED_RE_SELECT		- 交易方式发生变化请重新选择。
        /// FAIL_BIZ_NO_SERVICE_INFO		- 未获取到服务信息，服务数据可能发生变化!	
        /// FAIL_BIZ_TAOBAO_TP_EXCEPTION		- 系统错误，订单创建失败!	
        /// FAIL_BIZ_ORDER_COMMIT_ORDERPARAM_NOT_CONSTRUCTED	- 交时没有成功构造创建订单的参数。</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeFastCreateOrderResult AlibabaTradeFastCreateOrder(string flow, AlibabaTradeFastAddress addressParam, System.Collections.Generic.IEnumerable<AlibabaTradeFastCargo> cargoParamList, long? subUserId = null, string message = null, AlibabaTradeFastInvoice invoiceParam = null, string shopPromotionId = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【最新】快速创建1688订单（推荐使用）
        /// 快速创建1688大市场订单和1688代销订单，订单一步创建，不需要先调用订单预览，接口参数简单，地址参数传省市区街道的文本名，不需要额外查询地址码，系统默认选择最优惠下单方式，默认支付宝担保交易方式，详细地址必须不超过200个字，不要用地址做其他用途，需要留言或备注的有专门字段，留言和备注都支持500字
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.fastCreateOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.fastCreateOrder&amp;v=1</summary>
        /// <param name="flow">流程</param>
        /// <param name="addressParam">收货地址信息</param>
        /// <param name="cargoParamList">商品信息</param>
        /// <param name="subUserId">子账号ID</param>
        /// <param name="message">买家留言</param>
        /// <param name="invoiceParam">发票信息</param>
        /// <param name="shopPromotionId">店铺优惠ID，通过“创建订单前预览数据接口”获得。为空默认使用默认优惠</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400	- 请求参数错误(检查请求参数是否满足要求)
        /// 400	- User authorization is required	(TOKEN失效，需要重新获取)
        /// 400	- Address is required	(收货地址必须要填)
        /// 400	- Cargo list is required	(货品信息必须要填)
        /// 400	- max cargo count is	(超过最大购买数)
        /// 400	- OfferId and quantity is required	(商品ID和购买数量必须要填)
        /// 400	- AddressId or FullName and Address is required	(收货地址信息要填完整)
        /// 400	- FullName length is required in 2~25	(收货人信息长度范围为2-25)
        /// 400		- phone length is required 1~30	(电话号码长度范围为1-30)
        /// 400		- Flow is empty or not exist	(flow参数必填，若接口没有要求传flow则可以忽略)
        /// 400		- Cargo list not duplicate is required(货品信息出现了重复的情况，需要累加处理)
        /// 400		- not support tradeType:	(不支持的交易方式)
        /// 400	- availableQuota less than sumPayment	(可用额度不足，需要先联系卖家提升账期可用额度)
        /// 500		- view order service error(接口调用出错，请检查参数是否正确或稍后重试)
        /// FAIL_BIZ_FAIL_BIZ_UNSUPPORT_MIX		- 该卖家不支持混批,所有货品数量应该达到最小起批量。请重新选择货品或修改购买数量后进行下单。	
        /// FAIL_BIZ_FAIL_BIZ_BOOKED_BEYOND_THE_MAX_QUANTITY		- 该订单中部分货品的订购数量超过了最大允许的购买量。
        /// FAIL_BIZ_FAIL_BIZ_BOOKED_LESS_THAN_LEAST_QUANTITY		- 该订单中部分货品的订购数量小于最小起批量。	
        /// FAIL_BIZ_FAIL_BIZ_ILLEGAL_OFFER		- 该订单中部分货品不支持交易，请联系卖家。
        /// FAIL_BIZ_FAIL_BIZ_LESS_THAN_MIX_BEGIN	- 该订单中部分货品数量小于混批起批量，请重新选择货品进行下单。
        /// FAIL_BIZ_FAIL_BIZ_ILLEGAL_CARGO_DATA	- 货品信息错误或者货品已失效，请重试
        /// FAIL_BIZ_QUANTITY_UNMATCH_SELLUNIT_SCALE	- 您该笔订单的货品数量不符合订购要求，请查看卖家设置并修改。
        /// FAIL_BIZ_ORDER_VIEW_RESULT_NOT_GET		- 订单展示服务没有返回处理结果。
        /// FAIL_BIZ_PRODUCT_TRADE_STAT_ERROR		- 库存不足或扣减库存时出现了问题。请确认购买数量后重新提交订单。	
        /// FAIL_BIZ_FAIL_BIZ_PROXY_RELATED_NOT_FUND	- 卖家未授权代销，您不能在此通道下单!请联系卖家授权!	
        /// FAIL_BIZ_FAIL_BIZ_QUANTITY_OUT_OF_SCOPE	- 订购数量必须大于0小于等于10亿。	
        /// FAIL_BIZ_MESSAGE_LENGTH_IS_ILLEGA	- 您的留言过长，留言长度须小于500个字符，请更改留言!
        /// FAIL_BIZ_FAIL_BIZ_CARGO_CANNOT_AUTH		- 您无权购买该订单中部分私密货品，请联系卖家。
        /// FAIL_BIZ_FAIL_BIZ_ILLEGAL_SELLER_NOT_ENABLED	- 卖家处于无效状态!不允许进行交易!
        /// FAIL_BIZ_CARGO_CARRIAGE_HAS_CHANGED		- 该货品运费已变化，请重新确认订单或者联系卖家。
        /// FAIL_BIZ_RECEIVE_ADDRESS_MOBILE_PHONE_NULL	- 收货地址里的电话和手机不能同时为空。
        /// FAIL_BIZ_XXX_ALL_ORDER_BLOCKS_SOME_COMMIT_ERROR		- 部分订单提交逻辑处理失败。
        /// FAIL_BIZ_SYSTEM_ERROR		- 系统繁忙,请重试!
        /// FAIL_BIZ_FAIL_BIZ_CARGO_CARRIAGE_HAS_ERROR		- 获取该货品运费发生错误，请重试。
        /// FAIL_BIZ_FAIL_BIZ_OFFER_PREHEATING		- 该订单中存在商品未到指定开售时间。
        /// FAIL_BIZ_TRADE_TYPE_HAS_CHANGED_RE_SELECT		- 交易方式发生变化请重新选择。
        /// FAIL_BIZ_NO_SERVICE_INFO		- 未获取到服务信息，服务数据可能发生变化!	
        /// FAIL_BIZ_TAOBAO_TP_EXCEPTION		- 系统错误，订单创建失败!	
        /// FAIL_BIZ_ORDER_COMMIT_ORDERPARAM_NOT_CONSTRUCTED	- 交时没有成功构造创建订单的参数。</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeFastCreateOrderResult> AlibabaTradeFastCreateOrderAsync(string flow, AlibabaTradeFastAddress addressParam, System.Collections.Generic.IEnumerable<AlibabaTradeFastCargo> cargoParamList, long? subUserId = null, string message = null, AlibabaTradeFastInvoice invoiceParam = null, string shopPromotionId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>修改订单备忘
        /// 授权用户为卖家修改卖家备忘，授权用户为买家修改买家备忘
        /// 注意：该接口可重复调用，备注内容将覆盖前一次调用
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.order.memoAdd-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.order.memoAdd&amp;v=1</summary>
        /// <param name="orderId">订单ID</param>
        /// <param name="memo">备忘信息</param>
        /// <param name="remarkIcon">备忘图标，目前仅支持数字。1位红色图标，2为蓝色图标，3为绿色图标，4为黄色图标</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaOrderMemoAddResult AlibabaOrderMemoAdd(long orderId, string memo, string remarkIcon);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>修改订单备忘
        /// 授权用户为卖家修改卖家备忘，授权用户为买家修改买家备忘
        /// 注意：该接口可重复调用，备注内容将覆盖前一次调用
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.order.memoAdd-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.order.memoAdd&amp;v=1</summary>
        /// <param name="orderId">订单ID</param>
        /// <param name="memo">备忘信息</param>
        /// <param name="remarkIcon">备忘图标，目前仅支持数字。1位红色图标，2为蓝色图标，3为绿色图标，4为黄色图标</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaOrderMemoAddResult> AlibabaOrderMemoAddAsync(long orderId, string memo, string remarkIcon, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>根据地址解析地区码
        /// 根据地址信息，解析地区码
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.addresscode.parse-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.addresscode.parse&amp;v=1</summary>
        /// <param name="addressInfo">地址信息</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeAddresscodeParseResult AlibabaTradeAddresscodeParse(string addressInfo);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据地址解析地区码
        /// 根据地址信息，解析地区码
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.addresscode.parse-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.addresscode.parse&amp;v=1</summary>
        /// <param name="addressInfo">地址信息</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeAddresscodeParseResult> AlibabaTradeAddresscodeParseAsync(string addressInfo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>修改订单价格
        /// 修改订单价格，注意：订单价格修改逻辑同1688后台页面，是在订单原价的基础之上计算总价，不是在原先的折扣后的总价基础之上再增加或减少价格，对于订单已经存在在折扣是覆盖的。
        /// entryDiscounts不需要已经关闭的子订单信息。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:trade.order.modifyOrderPrice-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=trade.order.modifyOrderPrice&amp;v=1</summary>
        /// <param name="orderId">订单id</param>
        /// <param name="carriage">订单修改之后的运费，单位为分</param>
        /// <param name="entryDiscounts">改价明细,discount值的单位为分，正数为涨价，负数为减价</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// FAIL_BIZ_TRADING_INVALID_PARAM	- 参数错误(参考参数说明)
        /// FAIL_BIZ_TRADING_ORDER_NOT_EXIST	- 订单不存在(检查订单号有效性)
        /// FAIL_BIZ_TRADING_ORDER_STATUS_ERROR	- 订单状态不正确（就是该状态不能修改价格）(检查下订单状态，只有等待买家付款状态的订单才能修改订单价格)
        /// FAIL_BIZ_TRADING_MODIFY_PRICE_ERROR	- 修改价格失败（例如不能涨价，只能降价）(确定订单改价限制，只能修改订单类型为6、8、9、10的订单，既tradeTypeStr=6、8、9、10)
        /// FAIL_BIZ_TRADING_SYSTEM_ERROR	- 系统错误（系统繁忙）(稍后重试或联系开放平台管理人)
        /// FAIL_BIZ_TRADING_ORDER_ENTRY_STATUS_ERROR	- 子订单状态已改变，请返回重试(entryDiscounts中传递了已经删除的子订单信息，只需要传递未关闭的子订单即可)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        TradeOrderModifyOrderPriceResult TradeOrderModifyOrderPrice(long orderId, long carriage, string entryDiscounts);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>修改订单价格
        /// 修改订单价格，注意：订单价格修改逻辑同1688后台页面，是在订单原价的基础之上计算总价，不是在原先的折扣后的总价基础之上再增加或减少价格，对于订单已经存在在折扣是覆盖的。
        /// entryDiscounts不需要已经关闭的子订单信息。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:trade.order.modifyOrderPrice-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=trade.order.modifyOrderPrice&amp;v=1</summary>
        /// <param name="orderId">订单id</param>
        /// <param name="carriage">订单修改之后的运费，单位为分</param>
        /// <param name="entryDiscounts">改价明细,discount值的单位为分，正数为涨价，负数为减价</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// FAIL_BIZ_TRADING_INVALID_PARAM	- 参数错误(参考参数说明)
        /// FAIL_BIZ_TRADING_ORDER_NOT_EXIST	- 订单不存在(检查订单号有效性)
        /// FAIL_BIZ_TRADING_ORDER_STATUS_ERROR	- 订单状态不正确（就是该状态不能修改价格）(检查下订单状态，只有等待买家付款状态的订单才能修改订单价格)
        /// FAIL_BIZ_TRADING_MODIFY_PRICE_ERROR	- 修改价格失败（例如不能涨价，只能降价）(确定订单改价限制，只能修改订单类型为6、8、9、10的订单，既tradeTypeStr=6、8、9、10)
        /// FAIL_BIZ_TRADING_SYSTEM_ERROR	- 系统错误（系统繁忙）(稍后重试或联系开放平台管理人)
        /// FAIL_BIZ_TRADING_ORDER_ENTRY_STATUS_ERROR	- 子订单状态已改变，请返回重试(entryDiscounts中传递了已经删除的子订单信息，只需要传递未关闭的子订单即可)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TradeOrderModifyOrderPriceResult> TradeOrderModifyOrderPriceAsync(long orderId, long carriage, string entryDiscounts, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取授权用户的基本信息
        /// 获取授权用户的基本信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.account:alibaba.account.basic-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.account&amp;n=alibaba.account.basic&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaAccountBasicResult AlibabaAccountBasic();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取授权用户的基本信息
        /// 获取授权用户的基本信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.account:alibaba.account.basic-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.account&amp;n=alibaba.account.basic&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaAccountBasicResult> AlibabaAccountBasicAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取非授权用户的基本信息
        /// 该接口本身需要授权，但可以查看他人的用户信息，主要使用在一些分销，采购场景。该接口由平台所招募的特定ISV可申请使用。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.account:alibaba.account.agent.basic-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.account&amp;n=alibaba.account.agent.basic&amp;v=1</summary>
        /// <param name="loginId">用户的loginId，入参不可同时为空</param>
        /// <param name="domain">旺铺域名，入参不可同时为空</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaAccountAgentBasicResult AlibabaAccountAgentBasic(string loginId = null, string domain = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取非授权用户的基本信息
        /// 该接口本身需要授权，但可以查看他人的用户信息，主要使用在一些分销，采购场景。该接口由平台所招募的特定ISV可申请使用。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.account:alibaba.account.agent.basic-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.account&amp;n=alibaba.account.agent.basic&amp;v=1</summary>
        /// <param name="loginId">用户的loginId，入参不可同时为空</param>
        /// <param name="domain">旺铺域名，入参不可同时为空</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaAccountAgentBasicResult> AlibabaAccountAgentBasicAsync(string loginId = null, string domain = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>标题属性不一致（Deprecated）
        /// 用来判断，用户标题和属性中填写的信息是否一致，是否存在冲突的关键属性
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:search.title.properties.inconsistent-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=search.title.properties.inconsistent&amp;v=1</summary>
        /// <param name="title">Offer标题,对应为offer的标题，字段名为title</param>
        /// <param name="catid">Offer 发布类目id,对应为offer的发布类目id，字段名为catid</param>
        /// <param name="brief">Offer属性,对应为offer的属性，字段名为brief。brief的字段格式要求为： key：value 多个间空格分开</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        void SearchTitlePropertiesInconsistent(string title, string catid, string brief);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>标题属性不一致（Deprecated）
        /// 用来判断，用户标题和属性中填写的信息是否一致，是否存在冲突的关键属性
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:search.title.properties.inconsistent-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=search.title.properties.inconsistent&amp;v=1</summary>
        /// <param name="title">Offer标题,对应为offer的标题，字段名为title</param>
        /// <param name="catid">Offer 发布类目id,对应为offer的发布类目id，字段名为catid</param>
        /// <param name="brief">Offer属性,对应为offer的属性，字段名为brief。brief的字段格式要求为： key：value 多个间空格分开</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SearchTitlePropertiesInconsistentAsync(string title, string catid, string brief, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>查询淘宝卖家的商品在1688的同款及相似款信息
        /// 查询淘宝卖家的商品在1688的同款及相似款信息，此API为定向招募开放
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.graph.offer.info-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.graph.offer.info&amp;v=1</summary>
        /// <param name="taobaoNickName">淘宝用户的登陆的nickName</param>
        /// <returns>同款及相似款商品的统计信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCbuSearchwebOpenHsfResultIsvGraphCommonResult AlibabaSearchGraphOfferInfo(string taobaoNickName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询淘宝卖家的商品在1688的同款及相似款信息
        /// 查询淘宝卖家的商品在1688的同款及相似款信息，此API为定向招募开放
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.graph.offer.info-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.graph.offer.info&amp;v=1</summary>
        /// <param name="taobaoNickName">淘宝用户的登陆的nickName</param>
        /// <returns>同款及相似款商品的统计信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCbuSearchwebOpenHsfResultIsvGraphCommonResult> AlibabaSearchGraphOfferInfoAsync(string taobaoNickName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>分页查询淘宝商品在1688的同款商品信息
        /// 分页查询淘宝商品在1688的同款商品信息，此API为定向招募开放
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.graph.offer.same.pages-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.graph.offer.same.pages&amp;v=1</summary>
        /// <param name="taobaoOfferId">淘宝的offerid</param>
        /// <param name="beginPage">查询的页码</param>
        /// <param name="pageSize">每页的offer数量</param>
        /// <returns>查询的同款商品信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult AlibabaSearchGraphOfferSamePages(long taobaoOfferId, int beginPage, int pageSize);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>分页查询淘宝商品在1688的同款商品信息
        /// 分页查询淘宝商品在1688的同款商品信息，此API为定向招募开放
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.graph.offer.same.pages-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.graph.offer.same.pages&amp;v=1</summary>
        /// <param name="taobaoOfferId">淘宝的offerid</param>
        /// <param name="beginPage">查询的页码</param>
        /// <param name="pageSize">每页的offer数量</param>
        /// <returns>查询的同款商品信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult> AlibabaSearchGraphOfferSamePagesAsync(long taobaoOfferId, int beginPage, int pageSize, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>ISV代销版猜你喜欢接口2
        /// ISV代销版猜你喜欢接口2
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.guess.offer.daixiao.version2-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.guess.offer.daixiao.version2&amp;v=1</summary>
        /// <param name="companyMemberId">用户memberID</param>
        /// <param name="pageSize">offer个数</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult AlibabaSearchGuessOfferDaixiaoVersion2(string companyMemberId, int? pageSize = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>ISV代销版猜你喜欢接口2
        /// ISV代销版猜你喜欢接口2
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.guess.offer.daixiao.version2-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.guess.offer.daixiao.version2&amp;v=1</summary>
        /// <param name="companyMemberId">用户memberID</param>
        /// <param name="pageSize">offer个数</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult> AlibabaSearchGuessOfferDaixiaoVersion2Async(string companyMemberId, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>类目作弊
        /// 用户在发布offer时候，需要选择对应的发布类目，类目作弊就是用来检测选择的类目跟发布的offer信息是否匹配
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:search.category.cheating-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=search.category.cheating&amp;v=1</summary>
        /// <param name="title">Offer标题,对应为offer的标题，字段名为title</param>
        /// <param name="catid">Offer 发布类目id,对应为offer的发布类目id，字段名为catid</param>
        /// <param name="userid">卖家id（1688的memberId）,对应为该offer的旺铺userid</param>
        /// <returns>对于检测到类目作弊的，在type字段中，会标示为anti，否则为none。同时系统会推荐一到多个类目id，分别在catid，catname，以及score中标示，解析相关字段就可以得到。</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response6 SearchCategoryCheating(string title, string catid, string userid);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>类目作弊
        /// 用户在发布offer时候，需要选择对应的发布类目，类目作弊就是用来检测选择的类目跟发布的offer信息是否匹配
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:search.category.cheating-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=search.category.cheating&amp;v=1</summary>
        /// <param name="title">Offer标题,对应为offer的标题，字段名为title</param>
        /// <param name="catid">Offer 发布类目id,对应为offer的发布类目id，字段名为catid</param>
        /// <param name="userid">卖家id（1688的memberId）,对应为该offer的旺铺userid</param>
        /// <returns>对于检测到类目作弊的，在type字段中，会标示为anti，否则为none。同时系统会推荐一到多个类目id，分别在catid，catname，以及score中标示，解析相关字段就可以得到。</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response6> SearchCategoryCheatingAsync(string title, string catid, string userid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>属性滥用
        /// 判断用户填写的属性是否存在滥用，比如属性值多个重复使用，属性值过长，以及属性值无意义等。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:search.properties.abuse-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=search.properties.abuse&amp;v=1</summary>
        /// <param name="catid">Offer 发布类目id,对应为offer的发布类目id，字段名为catid</param>
        /// <param name="brief">Offer属性,对应为offer的属性，字段名为brief。brief的字段格式要求为： key：value 多个间空格分开</param>
        /// <returns>对于存在属性滥用的，会在OFFERLEVEL输出对应的作弊程度，没有作弊的会标示为NONE.其他字段会标示具体的引起属性滥用的原因以及具体的属性KEY和VALUE</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response7 SearchPropertiesAbuse(string catid, string brief);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>属性滥用
        /// 判断用户填写的属性是否存在滥用，比如属性值多个重复使用，属性值过长，以及属性值无意义等。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:search.properties.abuse-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=search.properties.abuse&amp;v=1</summary>
        /// <param name="catid">Offer 发布类目id,对应为offer的发布类目id，字段名为catid</param>
        /// <param name="brief">Offer属性,对应为offer的属性，字段名为brief。brief的字段格式要求为： key：value 多个间空格分开</param>
        /// <returns>对于存在属性滥用的，会在OFFERLEVEL输出对应的作弊程度，没有作弊的会标示为NONE.其他字段会标示具体的引起属性滥用的原因以及具体的属性KEY和VALUE</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response7> SearchPropertiesAbuseAsync(string catid, string brief, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>商品推荐以品推品-1688offer id推淘货源offer
        /// 商品推荐以品推品-1688offer id推淘货源offer
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.graph.offer.daixiao.similar.pages-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.graph.offer.daixiao.similar.pages&amp;v=1</summary>
        /// <param name="offerId">offer的id</param>
        /// <param name="beginPage">查询的页码</param>
        /// <param name="pageSize">每页的offer数量</param>
        /// <returns>相似款商品的信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult AlibabaSearchGraphOfferDaixiaoSimilarPages(long offerId, int? beginPage = null, int? pageSize = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>商品推荐以品推品-1688offer id推淘货源offer
        /// 商品推荐以品推品-1688offer id推淘货源offer
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.graph.offer.daixiao.similar.pages-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.graph.offer.daixiao.similar.pages&amp;v=1</summary>
        /// <param name="offerId">offer的id</param>
        /// <param name="beginPage">查询的页码</param>
        /// <param name="pageSize">每页的offer数量</param>
        /// <returns>相似款商品的信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult> AlibabaSearchGraphOfferDaixiaoSimilarPagesAsync(long offerId, int? beginPage = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>标题堆砌（Deprecated）
        /// 标题堆砌，用来检测offer标题中是否存在堆砌多个关键词的情况，包括产品词堆砌，型号词堆砌，品牌堆砌等
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:search.title.stuffing-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=search.title.stuffing&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        void SearchTitleStuffing(string title, string catid);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>标题堆砌（Deprecated）
        /// 标题堆砌，用来检测offer标题中是否存在堆砌多个关键词的情况，包括产品词堆砌，型号词堆砌，品牌堆砌等
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:search.title.stuffing-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=search.title.stuffing&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SearchTitleStuffingAsync(string title, string catid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>分页查询淘宝商品在1688的相似款商品信息
        /// 分页查询淘宝商品在1688的相似款商品信息，此API为定向招募开放
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.graph.offer.similar.pages-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.graph.offer.similar.pages&amp;v=1</summary>
        /// <param name="taobaoOfferId">淘宝的offer的id</param>
        /// <param name="beginPage">查询的页码</param>
        /// <param name="pageSize">每页的offer数量</param>
        /// <returns>相似款商品的信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult AlibabaSearchGraphOfferSimilarPages(long taobaoOfferId, int beginPage, int pageSize);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>分页查询淘宝商品在1688的相似款商品信息
        /// 分页查询淘宝商品在1688的相似款商品信息，此API为定向招募开放
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.graph.offer.similar.pages-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.graph.offer.similar.pages&amp;v=1</summary>
        /// <param name="taobaoOfferId">淘宝的offer的id</param>
        /// <param name="beginPage">查询的页码</param>
        /// <param name="pageSize">每页的offer数量</param>
        /// <returns>相似款商品的信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult> AlibabaSearchGraphOfferSimilarPagesAsync(long taobaoOfferId, int beginPage, int pageSize, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>订购的订单列表
        /// 订购的订单列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.app.pieceorder.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.app.pieceorder.get&amp;v=1</summary>
        /// <param name="gmtCreate">下单时间</param>
        /// <param name="startIndex">第几页 （用于分页）</param>
        /// <param name="aliId">买家的aliId</param>
        /// <param name="pageSize">每页大小（用于分页）
        /// 限制：小于等于50</param>
        /// <param name="bizStatusList">订单服务状态列表
        /// B:服务前，S:服务中，P：挂起，E：关闭，C:作废</param>
        /// <returns>isv订单信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response8 AlibabaAppPieceorderGet(System.DateTimeOffset gmtCreate, int? startIndex = null, long? aliId = null, int? pageSize = null, System.Collections.Generic.IEnumerable<string> bizStatusList = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>订购的订单列表
        /// 订购的订单列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.app.pieceorder.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.app.pieceorder.get&amp;v=1</summary>
        /// <param name="gmtCreate">下单时间</param>
        /// <param name="startIndex">第几页 （用于分页）</param>
        /// <param name="aliId">买家的aliId</param>
        /// <param name="pageSize">每页大小（用于分页）
        /// 限制：小于等于50</param>
        /// <param name="bizStatusList">订单服务状态列表
        /// B:服务前，S:服务中，P：挂起，E：关闭，C:作废</param>
        /// <returns>isv订单信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response8> AlibabaAppPieceorderGetAsync(System.DateTimeOffset gmtCreate, int? startIndex = null, long? aliId = null, int? pageSize = null, System.Collections.Generic.IEnumerable<string> bizStatusList = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>查询系统时间
        /// 获取系统时间，从而跟本地时间进行校准
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:system.time.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=system.time.get&amp;v=1</summary>
        /// <returns>当前系统时间，格式为yyyyMMddHHmmssSSSZ，即年月日时分秒毫秒时区</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.DateTimeOffset SystemTimeGet();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询系统时间
        /// 获取系统时间，从而跟本地时间进行校准
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:system.time.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=system.time.get&amp;v=1</summary>
        /// <returns>当前系统时间，格式为yyyyMMddHHmmssSSSZ，即年月日时分秒毫秒时区</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.DateTimeOffset> SystemTimeGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取某个应用最近一个月的到期订单信息
        /// ISV获取自己名下的应用最近一个月的到期的订单信息列表。
        /// 只会状态是服务中或者待发布的才有到期时间
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:app.expire.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=app.expire.get&amp;v=1</summary>
        /// <param name="gmtServiceEnd">订单到期时间</param>
        /// <param name="memberId">订购者会员memberId</param>
        /// <param name="bizStatusList">订单服务状态列表
        /// B:服务前，S:服务中，P：挂起，E：关闭，C:作废</param>
        /// <param name="pageSize">每页大小（用于分页）
        /// 限制：小于等于50</param>
        /// <param name="startIndex">第几页 （用于分页）</param>
        /// <returns>isv订单信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response8 AppExpireGet(System.DateTimeOffset gmtServiceEnd, string memberId = null, System.Collections.Generic.IEnumerable<string> bizStatusList = null, int? pageSize = null, int? startIndex = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取某个应用最近一个月的到期订单信息
        /// ISV获取自己名下的应用最近一个月的到期的订单信息列表。
        /// 只会状态是服务中或者待发布的才有到期时间
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:app.expire.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=app.expire.get&amp;v=1</summary>
        /// <param name="gmtServiceEnd">订单到期时间</param>
        /// <param name="memberId">订购者会员memberId</param>
        /// <param name="bizStatusList">订单服务状态列表
        /// B:服务前，S:服务中，P：挂起，E：关闭，C:作废</param>
        /// <param name="pageSize">每页大小（用于分页）
        /// 限制：小于等于50</param>
        /// <param name="startIndex">第几页 （用于分页）</param>
        /// <returns>isv订单信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response8> AppExpireGetAsync(System.DateTimeOffset gmtServiceEnd, string memberId = null, System.Collections.Generic.IEnumerable<string> bizStatusList = null, int? pageSize = null, int? startIndex = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>服务商(ISV) 根据订单行号查询订单信息
        /// 服务商(ISV) 根据订单行号查询订单信息，如果订单号不存在或不属于当前查询的应用，结果不返回订单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.app.orderListbyIds-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.app.orderListbyIds&amp;v=1</summary>
        /// <param name="orderIdList">订单ID列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaAppOrderListbyIdsResult AlibabaAppOrderListbyIds(System.Collections.Generic.IEnumerable<string> orderIdList);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>服务商(ISV) 根据订单行号查询订单信息
        /// 服务商(ISV) 根据订单行号查询订单信息，如果订单号不存在或不属于当前查询的应用，结果不返回订单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.app.orderListbyIds-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.app.orderListbyIds&amp;v=1</summary>
        /// <param name="orderIdList">订单ID列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaAppOrderListbyIdsResult> AlibabaAppOrderListbyIdsAsync(System.Collections.Generic.IEnumerable<string> orderIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>app 在服务市场被订购的订单列表
        /// 获取调用该api的app在服务市场被订购的订单列表。appkey唯一表示一个app
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:app.order.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=app.order.get&amp;v=1</summary>
        /// <param name="gmtCreate">下单时间</param>
        /// <param name="memberId">订购者会员memberId</param>
        /// <param name="bizStatusList">订单服务状态列表
        /// B:服务前，S:服务中，P：挂起，E：关闭，C:作废</param>
        /// <param name="pageSize">每页大小（用于分页）
        /// 限制：小于等于50</param>
        /// <param name="startIndex">第几页 （用于分页）</param>
        /// <param name="loginId">订购者会员LoginId</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 11000	- 未知错误(未知错误)
        /// 11002	- 参数错误(参数错误)
        /// 11003	- 产品不存在或者已经下架(产品不存在或者已经下架)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AppOrderGetResult AppOrderGet(System.DateTimeOffset gmtCreate, string memberId = null, System.Collections.Generic.IEnumerable<string> bizStatusList = null, int? pageSize = null, int? startIndex = null, string loginId = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>app 在服务市场被订购的订单列表
        /// 获取调用该api的app在服务市场被订购的订单列表。appkey唯一表示一个app
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:app.order.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=app.order.get&amp;v=1</summary>
        /// <param name="gmtCreate">下单时间</param>
        /// <param name="memberId">订购者会员memberId</param>
        /// <param name="bizStatusList">订单服务状态列表
        /// B:服务前，S:服务中，P：挂起，E：关闭，C:作废</param>
        /// <param name="pageSize">每页大小（用于分页）
        /// 限制：小于等于50</param>
        /// <param name="startIndex">第几页 （用于分页）</param>
        /// <param name="loginId">订购者会员LoginId</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 11000	- 未知错误(未知错误)
        /// 11002	- 参数错误(参数错误)
        /// 11003	- 产品不存在或者已经下架(产品不存在或者已经下架)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AppOrderGetResult> AppOrderGetAsync(System.DateTimeOffset gmtCreate, string memberId = null, System.Collections.Generic.IEnumerable<string> bizStatusList = null, int? pageSize = null, int? startIndex = null, string loginId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【产品】查询SKU的代销价格和库存
        /// 根据渠道商ID和商品ID和SPECID查询指定SKU下商品的折扣后的代销价格和库存
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.querySkuBySpecId-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.querySkuBySpecId&amp;v=1</summary>
        /// <param name="productId">产品Id</param>
        /// <param name="specId">sku的SpecId</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaDistributorQuerySkuBySpecIdResult AlibabaDistributorQuerySkuBySpecId(long productId, string specId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【产品】查询SKU的代销价格和库存
        /// 根据渠道商ID和商品ID和SPECID查询指定SKU下商品的折扣后的代销价格和库存
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.querySkuBySpecId-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.querySkuBySpecId&amp;v=1</summary>
        /// <param name="productId">产品Id</param>
        /// <param name="specId">sku的SpecId</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaDistributorQuerySkuBySpecIdResult> AlibabaDistributorQuerySkuBySpecIdAsync(long productId, string specId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【关系】分销商-分销商查看概览数据
        /// 通过分销商ID获取代销概览
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.getOverviewByConsignerId-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.getOverviewByConsignerId&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaRelationGetOverviewByConsignerIdResult AlibabaRelationGetOverviewByConsignerId();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【关系】分销商-分销商查看概览数据
        /// 通过分销商ID获取代销概览
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.getOverviewByConsignerId-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.getOverviewByConsignerId&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaRelationGetOverviewByConsignerIdResult> AlibabaRelationGetOverviewByConsignerIdAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【产品】获取供应商可代销产品列表
        /// 获取供应商可代销产品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.supplier.listForAllConsignment-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.supplier.listForAllConsignment&amp;v=1</summary>
        /// <param name="keyword">模糊查询的关键字</param>
        /// <param name="productlineId">产品线Id</param>
        /// <param name="pageNo">页码。取值范围:大于零的整数;默认值为1，即返回第一页数据</param>
        /// <param name="pageSize">返回列表结果集每页条数。取值范围:大于零的整数;默认为20条，网页端默认10条</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaSupplierListForAllConsignmentResult AlibabaSupplierListForAllConsignment(string keyword = null, long? productlineId = null, int? pageNo = null, int? pageSize = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【产品】获取供应商可代销产品列表
        /// 获取供应商可代销产品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.supplier.listForAllConsignment-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.supplier.listForAllConsignment&amp;v=1</summary>
        /// <param name="keyword">模糊查询的关键字</param>
        /// <param name="productlineId">产品线Id</param>
        /// <param name="pageNo">页码。取值范围:大于零的整数;默认值为1，即返回第一页数据</param>
        /// <param name="pageSize">返回列表结果集每页条数。取值范围:大于零的整数;默认为20条，网页端默认10条</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaSupplierListForAllConsignmentResult> AlibabaSupplierListForAllConsignmentAsync(string keyword = null, long? productlineId = null, int? pageNo = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【关系】分销商-终止代销关系
        /// 分销商终止关系,立刻生效
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.endConsignRelationByConsigner-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.endConsignRelationByConsigner&amp;v=1</summary>
        /// <param name="supplierLoginId">供应商LoginId</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaRelationEndConsignRelationByConsignerResult AlibabaRelationEndConsignRelationByConsigner(string supplierLoginId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【关系】分销商-终止代销关系
        /// 分销商终止关系,立刻生效
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.endConsignRelationByConsigner-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.endConsignRelationByConsigner&amp;v=1</summary>
        /// <param name="supplierLoginId">供应商LoginId</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaRelationEndConsignRelationByConsignerResult> AlibabaRelationEndConsignRelationByConsignerAsync(string supplierLoginId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>代销市场商品搜索服务
        /// 代销市场商品搜索服务
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.daixiao.offer.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.daixiao.offer.get&amp;v=1</summary>
        /// <param name="request">搜索参数</param>
        /// <returns>代销商品搜索的返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult AlibabaSearchDaixiaoOfferGet(ComAlibabaCbuSearchwebOpenHsfRequestIsvDaixiaoOfferRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>代销市场商品搜索服务
        /// 代销市场商品搜索服务
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.daixiao.offer.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.daixiao.offer.get&amp;v=1</summary>
        /// <param name="request">搜索参数</param>
        /// <returns>代销商品搜索的返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult> AlibabaSearchDaixiaoOfferGetAsync(ComAlibabaCbuSearchwebOpenHsfRequestIsvDaixiaoOfferRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【采购单】修改采购单信息
        /// 修改采购单信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.modifySupplyOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.modifySupplyOrder&amp;v=1</summary>
        /// <param name="orderId">采购单Id</param>
        /// <param name="buyAmount">购买数量</param>
        /// <param name="specId">sku规格Id，例如af478130f6c683c4c77bb511796617d7，非sku类型则不用传</param>
        /// <param name="specInfo">sku规格信息的Map,key为规格属性名称，value为规格属性值，例如{&amp;quot;颜色&amp;quot;:&amp;quot;黄色&amp;quot;,&amp;quot;尺码&amp;quot;:&amp;quot;XS&amp;quot;}</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaDistributorModifySupplyOrderResult AlibabaDistributorModifySupplyOrder(long orderId, long buyAmount, string specId = null, System.Collections.Generic.IDictionary<string, string> specInfo = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【采购单】修改采购单信息
        /// 修改采购单信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.modifySupplyOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.modifySupplyOrder&amp;v=1</summary>
        /// <param name="orderId">采购单Id</param>
        /// <param name="buyAmount">购买数量</param>
        /// <param name="specId">sku规格Id，例如af478130f6c683c4c77bb511796617d7，非sku类型则不用传</param>
        /// <param name="specInfo">sku规格信息的Map,key为规格属性名称，value为规格属性值，例如{&amp;quot;颜色&amp;quot;:&amp;quot;黄色&amp;quot;,&amp;quot;尺码&amp;quot;:&amp;quot;XS&amp;quot;}</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaDistributorModifySupplyOrderResult> AlibabaDistributorModifySupplyOrderAsync(long orderId, long buyAmount, string specId = null, System.Collections.Generic.IDictionary<string, string> specInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【采购单】获取采购单列表
        /// 获取采购单列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.listSupplyOrders-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.listSupplyOrders&amp;v=1</summary>
        /// <param name="keyword">模糊查询关键字</param>
        /// <param name="supplierMemberId">供应商memberId</param>
        /// <param name="dataStatus">数据状态，0：待处理（正常），1：已删除（逻辑删除），2：已忽略</param>
        /// <param name="pageNo">页码。取值范围:大于零的整数;默认值为1，即返回第一页数据</param>
        /// <param name="pageSize">返回列表结果集每页条数。取值范围:大于零的整数;默认为20条，网页端默认10条</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaDistributorListSupplyOrdersResult AlibabaDistributorListSupplyOrders(string keyword = null, string supplierMemberId = null, long? dataStatus = null, int? pageNo = null, int? pageSize = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【采购单】获取采购单列表
        /// 获取采购单列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.listSupplyOrders-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.listSupplyOrders&amp;v=1</summary>
        /// <param name="keyword">模糊查询关键字</param>
        /// <param name="supplierMemberId">供应商memberId</param>
        /// <param name="dataStatus">数据状态，0：待处理（正常），1：已删除（逻辑删除），2：已忽略</param>
        /// <param name="pageNo">页码。取值范围:大于零的整数;默认值为1，即返回第一页数据</param>
        /// <param name="pageSize">返回列表结果集每页条数。取值范围:大于零的整数;默认为20条，网页端默认10条</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaDistributorListSupplyOrdersResult> AlibabaDistributorListSupplyOrdersAsync(string keyword = null, string supplierMemberId = null, long? dataStatus = null, int? pageNo = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【产品】关联代销关系
        /// 关联代销关系
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.linkConsignSellItem-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.linkConsignSellItem&amp;v=1</summary>
        /// <param name="productId">需要关联代销关系的产品Id</param>
        /// <param name="itemUrl">淘宝宝贝链接</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaDistributorLinkConsignSellItemResult AlibabaDistributorLinkConsignSellItem(long productId, string itemUrl);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【产品】关联代销关系
        /// 关联代销关系
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.linkConsignSellItem-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.linkConsignSellItem&amp;v=1</summary>
        /// <param name="productId">需要关联代销关系的产品Id</param>
        /// <param name="itemUrl">淘宝宝贝链接</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaDistributorLinkConsignSellItemResult> AlibabaDistributorLinkConsignSellItemAsync(long productId, string itemUrl, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【关系】供应商-添加等级
        /// 添加等级
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.addGroup-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.addGroup&amp;v=1</summary>
        /// <param name="groupName">等级名称</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaRelationAddGroupResult AlibabaRelationAddGroup(string groupName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【关系】供应商-添加等级
        /// 添加等级
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.addGroup-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.addGroup&amp;v=1</summary>
        /// <param name="groupName">等级名称</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaRelationAddGroupResult> AlibabaRelationAddGroupAsync(string groupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【采购单】删除采购单
        /// 删除采购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.deleteSupplyOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.deleteSupplyOrder&amp;v=1</summary>
        /// <param name="supplyOrders">采购单列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaDistributorDeleteSupplyOrderResult AlibabaDistributorDeleteSupplyOrder(System.Collections.Generic.IEnumerable<long> supplyOrders);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【采购单】删除采购单
        /// 删除采购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.deleteSupplyOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.deleteSupplyOrder&amp;v=1</summary>
        /// <param name="supplyOrders">采购单列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaDistributorDeleteSupplyOrderResult> AlibabaDistributorDeleteSupplyOrderAsync(System.Collections.Generic.IEnumerable<long> supplyOrders, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【关系】供应商-查询所有等级信息
        /// 查询所有等级信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.queryConsignerGroups-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.queryConsignerGroups&amp;v=1</summary>
        /// <returns>等级列表</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response9 AlibabaRelationQueryConsignerGroups();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【关系】供应商-查询所有等级信息
        /// 查询所有等级信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.queryConsignerGroups-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.queryConsignerGroups&amp;v=1</summary>
        /// <returns>等级列表</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response9> AlibabaRelationQueryConsignerGroupsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【采购单】【已废弃】确认采购单
        /// 【已废弃】确认采购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.confirmOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.confirmOrder&amp;v=1</summary>
        /// <param name="supplyOrders">采购单列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaDistributorConfirmOrderResult AlibabaDistributorConfirmOrder(System.Collections.Generic.IEnumerable<long> supplyOrders);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【采购单】【已废弃】确认采购单
        /// 【已废弃】确认采购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.confirmOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.confirmOrder&amp;v=1</summary>
        /// <param name="supplyOrders">采购单列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaDistributorConfirmOrderResult> AlibabaDistributorConfirmOrderAsync(System.Collections.Generic.IEnumerable<long> supplyOrders, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【产品】获取已代销产品列表
        /// 获取已代销产品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.listForAlreadyConsignment-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.listForAlreadyConsignment&amp;v=1</summary>
        /// <param name="supplierMemberId">供应商memberId</param>
        /// <param name="keyword">模糊查询关键字</param>
        /// <param name="pageNo">页码。取值范围:大于零的整数;默认值为1，即返回第一页数据</param>
        /// <param name="pageSize">返回列表结果集每页条数。取值范围:大于零的整数;默认为20条，网页端默认10条</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaDistributorListForAlreadyConsignmentResult AlibabaDistributorListForAlreadyConsignment(string supplierMemberId, string keyword = null, int? pageNo = null, int? pageSize = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【产品】获取已代销产品列表
        /// 获取已代销产品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.listForAlreadyConsignment-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.listForAlreadyConsignment&amp;v=1</summary>
        /// <param name="supplierMemberId">供应商memberId</param>
        /// <param name="keyword">模糊查询关键字</param>
        /// <param name="pageNo">页码。取值范围:大于零的整数;默认值为1，即返回第一页数据</param>
        /// <param name="pageSize">返回列表结果集每页条数。取值范围:大于零的整数;默认为20条，网页端默认10条</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaDistributorListForAlreadyConsignmentResult> AlibabaDistributorListForAlreadyConsignmentAsync(string supplierMemberId, string keyword = null, int? pageNo = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【采购单】忽略采购单
        /// 忽略采购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.ignoreSupplyOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.ignoreSupplyOrder&amp;v=1</summary>
        /// <param name="supplyOrders">采购单列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaDistributorIgnoreSupplyOrderResult AlibabaDistributorIgnoreSupplyOrder(System.Collections.Generic.IEnumerable<long> supplyOrders);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【采购单】忽略采购单
        /// 忽略采购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.ignoreSupplyOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.ignoreSupplyOrder&amp;v=1</summary>
        /// <param name="supplyOrders">采购单列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaDistributorIgnoreSupplyOrderResult> AlibabaDistributorIgnoreSupplyOrderAsync(System.Collections.Generic.IEnumerable<long> supplyOrders, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【关系】分销商-查询供应商列表
        /// 通过分销商 userID 获取 供应商列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.querySuppliers-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.querySuppliers&amp;v=1</summary>
        /// <param name="supplierLoginId">供应商登录ID，指定该参数可以查询授权用户与指定供应商的分销关系</param>
        /// <param name="currentPage">当前页码</param>
        /// <param name="pageSize">每页多少个</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaRelationSuppliersResult AlibabaRelationQuerySuppliers(string supplierLoginId = null, int? currentPage = null, int? pageSize = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【关系】分销商-查询供应商列表
        /// 通过分销商 userID 获取 供应商列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.querySuppliers-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.querySuppliers&amp;v=1</summary>
        /// <param name="supplierLoginId">供应商登录ID，指定该参数可以查询授权用户与指定供应商的分销关系</param>
        /// <param name="currentPage">当前页码</param>
        /// <param name="pageSize">每页多少个</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaRelationSuppliersResult> AlibabaRelationQuerySuppliersAsync(string supplierLoginId = null, int? currentPage = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【关系】供应商-查询权益设置
        /// 查询权益测试
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.rights.queryAllRights-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.rights.queryAllRights&amp;v=1</summary>
        /// <returns>权益设置模型</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response7 AlibabaRightsQueryAllRights();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【关系】供应商-查询权益设置
        /// 查询权益测试
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.rights.queryAllRights-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.rights.queryAllRights&amp;v=1</summary>
        /// <returns>权益设置模型</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response7> AlibabaRightsQueryAllRightsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【产品线】供应商-查询产品分组信息
        /// 查询产品分组信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.productline.queryConsignerProductlines-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.productline.queryConsignerProductlines&amp;v=1</summary>
        /// <returns>产品分组结果集合</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response10 AlibabaProductlineQueryConsignerProductlines();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【产品线】供应商-查询产品分组信息
        /// 查询产品分组信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.productline.queryConsignerProductlines-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.productline.queryConsignerProductlines&amp;v=1</summary>
        /// <returns>产品分组结果集合</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response10> AlibabaProductlineQueryConsignerProductlinesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【关系】供应商-修改优惠设置类型
        /// 供应商批量修改分组等级
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.updateAllRightsRightType-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.updateAllRightsRightType&amp;v=1</summary>
        /// <param name="rightType">优惠类型</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaRelationUpdateAllRightsRightTypeResult AlibabaRelationUpdateAllRightsRightType(string rightType);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【关系】供应商-修改优惠设置类型
        /// 供应商批量修改分组等级
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.updateAllRightsRightType-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.updateAllRightsRightType&amp;v=1</summary>
        /// <param name="rightType">优惠类型</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaRelationUpdateAllRightsRightTypeResult> AlibabaRelationUpdateAllRightsRightTypeAsync(string rightType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【产品】传淘宝代销
        /// 传淘宝代销
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.downloadConsignSell-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.downloadConsignSell&amp;v=1</summary>
        /// <param name="productId">需要传淘宝的产品Id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaDistributorDownloadConsignSellResult AlibabaDistributorDownloadConsignSell(long productId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【产品】传淘宝代销
        /// 传淘宝代销
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.downloadConsignSell-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.downloadConsignSell&amp;v=1</summary>
        /// <param name="productId">需要传淘宝的产品Id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaDistributorDownloadConsignSellResult> AlibabaDistributorDownloadConsignSellAsync(long productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【产品】【已废弃】规格同步
        /// 规格同步
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.syncTbSkuInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.syncTbSkuInfo&amp;v=1</summary>
        /// <param name="productId">需要同步sku信息的产品Id</param>
        /// <param name="itemId">淘宝宝贝Id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaDistributorSyncTbSkuInfoResult AlibabaDistributorSyncTbSkuInfo(long productId, long itemId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【产品】【已废弃】规格同步
        /// 规格同步
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.syncTbSkuInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.syncTbSkuInfo&amp;v=1</summary>
        /// <param name="productId">需要同步sku信息的产品Id</param>
        /// <param name="itemId">淘宝宝贝Id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaDistributorSyncTbSkuInfoResult> AlibabaDistributorSyncTbSkuInfoAsync(long productId, long itemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>推荐代销市场的商品
        /// 推荐代销市场的商品
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.daixiao.recom.offer-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.daixiao.recom.offer&amp;v=1</summary>
        /// <param name="request">查询参数</param>
        /// <returns>代销市场推荐的商品信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult AlibabaSearchDaixiaoRecomOffer(ComAlibabaCbuSearchwebOpenHsfRequestIsvDaixiaoRecomRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>推荐代销市场的商品
        /// 推荐代销市场的商品
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.daixiao.recom.offer-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.daixiao.recom.offer&amp;v=1</summary>
        /// <param name="request">查询参数</param>
        /// <returns>代销市场推荐的商品信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult> AlibabaSearchDaixiaoRecomOfferAsync(ComAlibabaCbuSearchwebOpenHsfRequestIsvDaixiaoRecomRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【产品】取消代销关系
        /// 取消代销关系
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.unLinkConsignSellItem-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.unLinkConsignSellItem&amp;v=1</summary>
        /// <param name="productId">需要取消关联关系的产品Id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaDistributorUnLinkConsignSellItemResult AlibabaDistributorUnLinkConsignSellItem(long productId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【产品】取消代销关系
        /// 取消代销关系
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.unLinkConsignSellItem-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.unLinkConsignSellItem&amp;v=1</summary>
        /// <param name="productId">需要取消关联关系的产品Id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaDistributorUnLinkConsignSellItemResult> AlibabaDistributorUnLinkConsignSellItemAsync(long productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>推荐代销市场的供应商
        /// 推荐代销市场的供应商
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.daixiao.recom.company-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.daixiao.recom.company&amp;v=1</summary>
        /// <param name="request">查询参数</param>
        /// <returns>推荐的供应商信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        ComAlibabaCbuSearchwebOpenHsfResultDaixiaoRecomCommonResult AlibabaSearchDaixiaoRecomCompany(ComAlibabaCbuSearchwebOpenHsfRequestIsvDaixiaoRecomRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>推荐代销市场的供应商
        /// 推荐代销市场的供应商
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.daixiao.recom.company-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.daixiao.recom.company&amp;v=1</summary>
        /// <param name="request">查询参数</param>
        /// <returns>推荐的供应商信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComAlibabaCbuSearchwebOpenHsfResultDaixiaoRecomCommonResult> AlibabaSearchDaixiaoRecomCompanyAsync(ComAlibabaCbuSearchwebOpenHsfRequestIsvDaixiaoRecomRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【产品】一键代销
        /// 一键代销
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.fastConsign-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.fastConsign&amp;v=1</summary>
        /// <param name="productId">需要一键代销的产品Id</param>
        /// <param name="supplierMemberId">供应商memberId</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaDistributorFastConsignResult AlibabaDistributorFastConsign(long productId, string supplierMemberId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【产品】一键代销
        /// 一键代销
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.fastConsign-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.fastConsign&amp;v=1</summary>
        /// <param name="productId">需要一键代销的产品Id</param>
        /// <param name="supplierMemberId">供应商memberId</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaDistributorFastConsignResult> AlibabaDistributorFastConsignAsync(long productId, string supplierMemberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【关系】供应商-查询分销商列表
        /// 通过供应商userId查询分销商列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.queryConsigners-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.queryConsigners&amp;v=1</summary>
        /// <param name="consignerLoginId">指定分销商LoginId</param>
        /// <param name="consignerGrade">分销商等级</param>
        /// <param name="currentPage">当前页码</param>
        /// <param name="pageSize">每页多少个</param>
        /// <returns>查询结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaRelationConsignersResult AlibabaRelationQueryConsigners(string consignerLoginId = null, long? consignerGrade = null, int? currentPage = null, int? pageSize = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【关系】供应商-查询分销商列表
        /// 通过供应商userId查询分销商列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.queryConsigners-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.queryConsigners&amp;v=1</summary>
        /// <param name="consignerLoginId">指定分销商LoginId</param>
        /// <param name="consignerGrade">分销商等级</param>
        /// <param name="currentPage">当前页码</param>
        /// <param name="pageSize">每页多少个</param>
        /// <returns>查询结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaRelationConsignersResult> AlibabaRelationQueryConsignersAsync(string consignerLoginId = null, long? consignerGrade = null, int? currentPage = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【产品】获取可代销产品列表
        /// 获取可代销产品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.listForAllConsignment-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.listForAllConsignment&amp;v=1</summary>
        /// <param name="supplierMemberId">供应商memberId</param>
        /// <param name="keyword">模糊查询关键字</param>
        /// <param name="pageNo">页码。取值范围:大于零的整数;默认值为1，即返回第一页数据</param>
        /// <param name="pageSize">返回列表结果集每页条数。取值范围:大于零的整数;默认为20条，网页端默认10条</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaDistributorListForAllConsignmentResult AlibabaDistributorListForAllConsignment(string supplierMemberId, string keyword = null, int? pageNo = null, int? pageSize = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【产品】获取可代销产品列表
        /// 获取可代销产品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.listForAllConsignment-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.listForAllConsignment&amp;v=1</summary>
        /// <param name="supplierMemberId">供应商memberId</param>
        /// <param name="keyword">模糊查询关键字</param>
        /// <param name="pageNo">页码。取值范围:大于零的整数;默认值为1，即返回第一页数据</param>
        /// <param name="pageSize">返回列表结果集每页条数。取值范围:大于零的整数;默认为20条，网页端默认10条</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaDistributorListForAllConsignmentResult> AlibabaDistributorListForAllConsignmentAsync(string supplierMemberId, string keyword = null, int? pageNo = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【关系】供应商-供应商批量修改分组等级
        /// 供应商批量修改分组等级
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.changeGroup-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.changeGroup&amp;v=1</summary>
        /// <param name="groupId">等级ID</param>
        /// <param name="loginIdList">需要修改的列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaRelationChangeGroupResult AlibabaRelationChangeGroup(long groupId, System.Collections.Generic.IEnumerable<string> loginIdList);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【关系】供应商-供应商批量修改分组等级
        /// 供应商批量修改分组等级
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.changeGroup-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.changeGroup&amp;v=1</summary>
        /// <param name="groupId">等级ID</param>
        /// <param name="loginIdList">需要修改的列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaRelationChangeGroupResult> AlibabaRelationChangeGroupAsync(long groupId, System.Collections.Generic.IEnumerable<string> loginIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>【采购单】自动创建订单
        /// 自动创建订单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.autoCreateOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.autoCreateOrder&amp;v=1</summary>
        /// <param name="supplyOrders">采购单列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaDistributorAutoCreateOrderResult AlibabaDistributorAutoCreateOrder(System.Collections.Generic.IEnumerable<long> supplyOrders);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【采购单】自动创建订单
        /// 自动创建订单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.autoCreateOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.autoCreateOrder&amp;v=1</summary>
        /// <param name="supplyOrders">采购单列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaDistributorAutoCreateOrderResult> AlibabaDistributorAutoCreateOrderAsync(System.Collections.Generic.IEnumerable<long> supplyOrders, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取网销宝推广单元列表
        /// 获取网销宝推广单元列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.adgroup.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.adgroup.list&amp;v=1</summary>
        /// <param name="adGroupIdList">推广单元id列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response11 AlibabaCnp4pAdgroupList(System.Collections.Generic.IEnumerable<string> adGroupIdList);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝推广单元列表
        /// 获取网销宝推广单元列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.adgroup.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.adgroup.list&amp;v=1</summary>
        /// <param name="adGroupIdList">推广单元id列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response11> AlibabaCnp4pAdgroupListAsync(System.Collections.Generic.IEnumerable<string> adGroupIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>更新网销宝推广计划
        /// 更新网销宝推广计划
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.update&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="budget">计划预算</param>
        /// <param name="onlineStatus">计划状态，0为暂停；1为推广中；</param>
        /// <param name="promoteArea">计划投放地域，全部则为“0”，多个以英文逗号&amp;quot;,分隔&amp;quot;</param>
        /// <param name="schedule">计划投放时段，7*24小时分别用0、1代表暂停和投放。</param>
        /// <param name="cositeFlag">计划是否支持站外定向推广：0不支持，1支持</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCnp4pCampaign AlibabaCnp4pCampaignUpdate(long campaignId, double? budget = null, int? onlineStatus = null, string promoteArea = null, string schedule = null, int? cositeFlag = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新网销宝推广计划
        /// 更新网销宝推广计划
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.update&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="budget">计划预算</param>
        /// <param name="onlineStatus">计划状态，0为暂停；1为推广中；</param>
        /// <param name="promoteArea">计划投放地域，全部则为“0”，多个以英文逗号&amp;quot;,分隔&amp;quot;</param>
        /// <param name="schedule">计划投放时段，7*24小时分别用0、1代表暂停和投放。</param>
        /// <param name="cositeFlag">计划是否支持站外定向推广：0不支持，1支持</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCnp4pCampaign> AlibabaCnp4pCampaignUpdateAsync(long campaignId, double? budget = null, int? onlineStatus = null, string promoteArea = null, string schedule = null, int? cositeFlag = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>删除计划信息
        /// 删除计划信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.delete&amp;v=1</summary>
        /// <param name="campaignIdList">推广计划id</param>
        /// <returns>通用int型结果返回 ErrorCode 的错误信息
        /// 110000	- 计划id为空
        /// 110017	- 计划信息不存在
        /// 88806	- 包含不允许操作的产品线计划id信息(移除非支持操作的产品线计划id信息)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response4 AlibabaCnp4pCampaignDelete(System.Collections.Generic.IEnumerable<string> campaignIdList);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除计划信息
        /// 删除计划信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.delete&amp;v=1</summary>
        /// <param name="campaignIdList">推广计划id</param>
        /// <returns>通用int型结果返回 ErrorCode 的错误信息
        /// 110000	- 计划id为空
        /// 110017	- 计划信息不存在
        /// 88806	- 包含不允许操作的产品线计划id信息(移除非支持操作的产品线计划id信息)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> AlibabaCnp4pCampaignDeleteAsync(System.Collections.Generic.IEnumerable<string> campaignIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取网销宝关键词排名
        /// 获取网销宝关键词排名
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.rank.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.rank.get&amp;v=1</summary>
        /// <param name="adGroupId">单元id</param>
        /// <param name="keywordId">关键词id</param>
        /// <param name="areaCode">排名所在区域</param>
        /// <returns>关键词排名返回 ErrorCode 的错误信息
        /// 系统错误	- 999999(系统错误)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCnp4pKeywordRank AlibabaCnp4pKeywordRankGet(long adGroupId, long keywordId, string areaCode = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝关键词排名
        /// 获取网销宝关键词排名
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.rank.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.rank.get&amp;v=1</summary>
        /// <param name="adGroupId">单元id</param>
        /// <param name="keywordId">关键词id</param>
        /// <param name="areaCode">排名所在区域</param>
        /// <returns>关键词排名返回 ErrorCode 的错误信息
        /// 系统错误	- 999999(系统错误)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCnp4pKeywordRank> AlibabaCnp4pKeywordRankGetAsync(long adGroupId, long keywordId, string areaCode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>根据推广计划获取网销宝推广单元列表
        /// 根据推广计划获取网销宝推广单元列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.adgroup.bycampaignids.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.adgroup.bycampaignids.list&amp;v=1</summary>
        /// <param name="campaignId">推广计划id</param>
        /// <param name="pageNo">分页页码，从1开始</param>
        /// <param name="pageSize">分页页条数，最大200</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCnp4pAdgroupBycampaignidsListResult AlibabaCnp4pAdgroupBycampaignidsList(long campaignId, int pageNo, int pageSize);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据推广计划获取网销宝推广单元列表
        /// 根据推广计划获取网销宝推广单元列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.adgroup.bycampaignids.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.adgroup.bycampaignids.list&amp;v=1</summary>
        /// <param name="campaignId">推广计划id</param>
        /// <param name="pageNo">分页页码，从1开始</param>
        /// <param name="pageSize">分页页条数，最大200</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCnp4pAdgroupBycampaignidsListResult> AlibabaCnp4pAdgroupBycampaignidsListAsync(long campaignId, int pageNo, int pageSize, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取网销宝关键词列表
        /// 获取网销宝关键词列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.list&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="keywordIdList">关键词id列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response12 AlibabaCnp4pKeywordList(long campaignId, System.Collections.Generic.IEnumerable<string> keywordIdList);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝关键词列表
        /// 获取网销宝关键词列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.list&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="keywordIdList">关键词id列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response12> AlibabaCnp4pKeywordListAsync(long campaignId, System.Collections.Generic.IEnumerable<string> keywordIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取网销宝关键词报表详情
        /// 获取网销宝关键词报表详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.report.keywordEffect-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.report.keywordEffect&amp;v=1</summary>
        /// <param name="startTime">报表起始日期</param>
        /// <param name="endTime">报表截止日期</param>
        /// <param name="campaignId">计划id</param>
        /// <param name="adGroupId">单元id</param>
        /// <param name="pageNo">分页起始页码，默认为1开始</param>
        /// <param name="pageSize">分页一页页数，最大一页200条</param>
        /// <param name="keywordId">关键词id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCnp4pReportKeywordEffectResult AlibabaCnp4pReportKeywordEffect(System.DateTimeOffset startTime, System.DateTimeOffset endTime, long campaignId, long adGroupId, int pageNo, int pageSize, long? keywordId = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝关键词报表详情
        /// 获取网销宝关键词报表详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.report.keywordEffect-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.report.keywordEffect&amp;v=1</summary>
        /// <param name="startTime">报表起始日期</param>
        /// <param name="endTime">报表截止日期</param>
        /// <param name="campaignId">计划id</param>
        /// <param name="adGroupId">单元id</param>
        /// <param name="pageNo">分页起始页码，默认为1开始</param>
        /// <param name="pageSize">分页一页页数，最大一页200条</param>
        /// <param name="keywordId">关键词id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCnp4pReportKeywordEffectResult> AlibabaCnp4pReportKeywordEffectAsync(System.DateTimeOffset startTime, System.DateTimeOffset endTime, long campaignId, long adGroupId, int pageNo, int pageSize, long? keywordId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取关键词相关词列表
        /// 获取关键词相关词列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.list.relativeword-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.list.relativeword&amp;v=1</summary>
        /// <returns>返回 ErrorCode 的错误信息
        /// 100000	- 客户号为空
        /// 130003	- 关键词为空</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response13 AlibabaCnp4pKeywordListRelativeword(string keyword);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取关键词相关词列表
        /// 获取关键词相关词列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.list.relativeword-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.list.relativeword&amp;v=1</summary>
        /// <returns>返回 ErrorCode 的错误信息
        /// 100000	- 客户号为空
        /// 130003	- 关键词为空</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response13> AlibabaCnp4pKeywordListRelativewordAsync(string keyword, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>新增网销宝推广单元
        /// 新增网销宝推广单元
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.adgroup.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.adgroup.add&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="onlineState">推广单元上下线状态：0下线；1上线</param>
        /// <param name="bidPrice">推广单元默认出价，单位元</param>
        /// <param name="offerId">1688中文站offer产品信息id，具体获取指定用户offer列表可以从这个API获取：https://open.1688.com/doc/api/cn/api.htm?ns=cn.alibaba.open&amp;n=offer.getPublishOfferList&amp;v=1</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCnp4pAdgroup AlibabaCnp4pAdgroupAdd(long campaignId, int onlineState, double bidPrice, long offerId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>新增网销宝推广单元
        /// 新增网销宝推广单元
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.adgroup.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.adgroup.add&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="onlineState">推广单元上下线状态：0下线；1上线</param>
        /// <param name="bidPrice">推广单元默认出价，单位元</param>
        /// <param name="offerId">1688中文站offer产品信息id，具体获取指定用户offer列表可以从这个API获取：https://open.1688.com/doc/api/cn/api.htm?ns=cn.alibaba.open&amp;n=offer.getPublishOfferList&amp;v=1</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCnp4pAdgroup> AlibabaCnp4pAdgroupAddAsync(long campaignId, int onlineState, double bidPrice, long offerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取关键词相关性信息
        /// 获取关键词相关性及诊断建议
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.list.mlrscore-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.list.mlrscore&amp;v=1</summary>
        /// <returns>返回 ErrorCode 的错误信息
        /// 100000	- 客户号为空(未登录授权)
        /// 120000	- 推广单元id为空(参数传入推广单元id)
        /// 130000	- 关键词列表id为空(传入关键词id列表)
        /// 130002	- 关键词id列表size大于上限(传不超过关键词id上限列表)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response14 AlibabaCnp4pKeywordListMlrscore(long adGroupId, System.Collections.Generic.IEnumerable<string> keywordIdList);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取关键词相关性信息
        /// 获取关键词相关性及诊断建议
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.list.mlrscore-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.list.mlrscore&amp;v=1</summary>
        /// <returns>返回 ErrorCode 的错误信息
        /// 100000	- 客户号为空(未登录授权)
        /// 120000	- 推广单元id为空(参数传入推广单元id)
        /// 130000	- 关键词列表id为空(传入关键词id列表)
        /// 130002	- 关键词id列表size大于上限(传不超过关键词id上限列表)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response14> AlibabaCnp4pKeywordListMlrscoreAsync(long adGroupId, System.Collections.Generic.IEnumerable<string> keywordIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取关键词推荐价格
        /// 获取关键词推荐价格
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.list.recommend.price-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.list.recommend.price&amp;v=1</summary>
        /// <param name="adGroupId">推广单元id</param>
        /// <param name="keywordIdList">关键词id列表</param>
        /// <param name="areaCode">投放地域码</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 100000	- 客户信息为空
        /// 100001	- 地域码为空
        /// 120000	- 推广单元为空
        /// 130000	- 关键词id为空
        /// 130002	- 关键词id列表size超过上限</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response15 AlibabaCnp4pKeywordListRecommendPrice(long adGroupId, System.Collections.Generic.IEnumerable<string> keywordIdList, string areaCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取关键词推荐价格
        /// 获取关键词推荐价格
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.list.recommend.price-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.list.recommend.price&amp;v=1</summary>
        /// <param name="adGroupId">推广单元id</param>
        /// <param name="keywordIdList">关键词id列表</param>
        /// <param name="areaCode">投放地域码</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 100000	- 客户信息为空
        /// 100001	- 地域码为空
        /// 120000	- 推广单元为空
        /// 130000	- 关键词id为空
        /// 130002	- 关键词id列表size超过上限</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response15> AlibabaCnp4pKeywordListRecommendPriceAsync(long adGroupId, System.Collections.Generic.IEnumerable<string> keywordIdList, string areaCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>删除网销宝推广单元
        /// 删除网销宝推广单元
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.adgroup.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.adgroup.delete&amp;v=1</summary>
        /// <param name="adGroupId">单元id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCnp4pAdgroup AlibabaCnp4pAdgroupDelete(long adGroupId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除网销宝推广单元
        /// 删除网销宝推广单元
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.adgroup.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.adgroup.delete&amp;v=1</summary>
        /// <param name="adGroupId">单元id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCnp4pAdgroup> AlibabaCnp4pAdgroupDeleteAsync(long adGroupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取网销宝计划列表
        /// 获取网销宝计划列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.list&amp;v=1</summary>
        /// <param name="campaignIdList">计划id列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response16 AlibabaCnp4pCampaignList(System.Collections.Generic.IEnumerable<string> campaignIdList = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝计划列表
        /// 获取网销宝计划列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.list&amp;v=1</summary>
        /// <param name="campaignIdList">计划id列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response16> AlibabaCnp4pCampaignListAsync(System.Collections.Generic.IEnumerable<string> campaignIdList = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>更新网销宝推广计划投放时段
        /// 更新网销宝推广计划投放时段
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.schedule.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.schedule.update&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="schedule">计划投放时段，7*24小时分别用0、1代表暂停和投放。</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCnp4pCampaign AlibabaCnp4pCampaignScheduleUpdate(long campaignId, string schedule);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新网销宝推广计划投放时段
        /// 更新网销宝推广计划投放时段
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.schedule.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.schedule.update&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="schedule">计划投放时段，7*24小时分别用0、1代表暂停和投放。</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCnp4pCampaign> AlibabaCnp4pCampaignScheduleUpdateAsync(long campaignId, string schedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取可投放的地域列表
        /// 获取可投放的地域列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.areaList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.areaList&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response17 AlibabaCnp4pCampaignAreaList();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取可投放的地域列表
        /// 获取可投放的地域列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.areaList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.areaList&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response17> AlibabaCnp4pCampaignAreaListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取网销宝推广计划报表详情
        /// 获取网销宝推广计划报表详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.report.campaignEffect-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.report.campaignEffect&amp;v=1</summary>
        /// <param name="startTime">报表起始日期</param>
        /// <param name="endTime">报表截止日期</param>
        /// <param name="pageNo">分页起始页码，默认为1开始</param>
        /// <param name="pageSize">分页一页页数，最大一页200条</param>
        /// <param name="reportType">报表类型，为空则全部；site_in则为站内，site_out则为站外</param>
        /// <param name="campaignId">计划id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCnp4pReportCampaignEffectResult AlibabaCnp4pReportCampaignEffect(System.DateTimeOffset startTime, System.DateTimeOffset endTime, int pageNo, int pageSize, string reportType = null, long? campaignId = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝推广计划报表详情
        /// 获取网销宝推广计划报表详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.report.campaignEffect-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.report.campaignEffect&amp;v=1</summary>
        /// <param name="startTime">报表起始日期</param>
        /// <param name="endTime">报表截止日期</param>
        /// <param name="pageNo">分页起始页码，默认为1开始</param>
        /// <param name="pageSize">分页一页页数，最大一页200条</param>
        /// <param name="reportType">报表类型，为空则全部；site_in则为站内，site_out则为站外</param>
        /// <param name="campaignId">计划id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCnp4pReportCampaignEffectResult> AlibabaCnp4pReportCampaignEffectAsync(System.DateTimeOffset startTime, System.DateTimeOffset endTime, int pageNo, int pageSize, string reportType = null, long? campaignId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取网销宝关键词质量分
        /// 获取网销宝关键词质量分
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.quality.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.quality.list&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response18 AlibabaCnp4pKeywordQualityList(long adGroupId, System.Collections.Generic.IEnumerable<string> keywordIdList);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝关键词质量分
        /// 获取网销宝关键词质量分
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.quality.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.quality.list&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response18> AlibabaCnp4pKeywordQualityListAsync(long adGroupId, System.Collections.Generic.IEnumerable<string> keywordIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取网销宝指定推广单元的推荐词
        /// 获取网销宝指定推广单元的推荐词
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.recommend.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.recommend.list&amp;v=1</summary>
        /// <param name="pageNo">分页页码，从1开始</param>
        /// <param name="pageSize">分页页条数，最多10条</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response19 AlibabaCnp4pKeywordRecommendList(long adGroupId, int pageNo, int pageSize);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝指定推广单元的推荐词
        /// 获取网销宝指定推广单元的推荐词
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.recommend.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.recommend.list&amp;v=1</summary>
        /// <param name="pageNo">分页页码，从1开始</param>
        /// <param name="pageSize">分页页条数，最多10条</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response19> AlibabaCnp4pKeywordRecommendListAsync(long adGroupId, int pageNo, int pageSize, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>根据关键词查询联盟offer列表
        /// 根据关键词查询联盟offer列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.union.offerbyquery.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.union.offerbyquery.list&amp;v=1</summary>
        /// <param name="unionPid">联盟推广位ID</param>
        /// <param name="query">查询关键词</param>
        /// <param name="requestIp">请求者的IP</param>
        /// <param name="requestUserAgent">请求者的UA</param>
        /// <param name="pageNo">分页页码，从1开始</param>
        /// <param name="pageSize">分页页条数，最大20条</param>
        /// <param name="requestReferer">请求者的Referer</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 77703	- 该用户不是联盟用户(联系联盟系统管理员，加入联盟平台)
        /// 88804	- 请求的数据起始页码为1
        /// 150001	- 联盟pid无效
        /// 150002	- 请求ip无效
        /// 150003	- 请求query无效
        /// 150004	- 请求useragent无效
        /// 150005	- 请求页面条数超出限制</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response20 AlibabaCnp4pUnionOfferbyqueryList(string unionPid, string query, string requestIp, string requestUserAgent, int pageNo, int pageSize, string requestReferer = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据关键词查询联盟offer列表
        /// 根据关键词查询联盟offer列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.union.offerbyquery.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.union.offerbyquery.list&amp;v=1</summary>
        /// <param name="unionPid">联盟推广位ID</param>
        /// <param name="query">查询关键词</param>
        /// <param name="requestIp">请求者的IP</param>
        /// <param name="requestUserAgent">请求者的UA</param>
        /// <param name="pageNo">分页页码，从1开始</param>
        /// <param name="pageSize">分页页条数，最大20条</param>
        /// <param name="requestReferer">请求者的Referer</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 77703	- 该用户不是联盟用户(联系联盟系统管理员，加入联盟平台)
        /// 88804	- 请求的数据起始页码为1
        /// 150001	- 联盟pid无效
        /// 150002	- 请求ip无效
        /// 150003	- 请求query无效
        /// 150004	- 请求useragent无效
        /// 150005	- 请求页面条数超出限制</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response20> AlibabaCnp4pUnionOfferbyqueryListAsync(string unionPid, string query, string requestIp, string requestUserAgent, int pageNo, int pageSize, string requestReferer = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取推广单元审核状态
        /// 获取推广单元审核状态
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.audit.get.creative.status-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.audit.get.creative.status&amp;v=1</summary>
        /// <param name="adGroupId">推广单元id</param>
        /// <returns>返回审核状态对象返回 ErrorCode 的错误信息
        /// 120000	- 推广单元为空(参数中传入推广单元id，eg=100234)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response21 AlibabaCnp4pAuditGetCreativeStatus(long adGroupId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取推广单元审核状态
        /// 获取推广单元审核状态
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.audit.get.creative.status-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.audit.get.creative.status&amp;v=1</summary>
        /// <param name="adGroupId">推广单元id</param>
        /// <returns>返回审核状态对象返回 ErrorCode 的错误信息
        /// 120000	- 推广单元为空(参数中传入推广单元id，eg=100234)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response21> AlibabaCnp4pAuditGetCreativeStatusAsync(long adGroupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>计划、推广单元等实时消耗
        /// 获取客户计划、推官单元、关键词等粒度实时消耗信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.settle.campaignRealTimeCost-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.settle.campaignRealTimeCost&amp;v=1</summary>
        /// <param name="type">类型(1计划；2推广单元)</param>
        /// <param name="objectId">类型对象id</param>
        /// <returns>结算消耗返回 ErrorCode 的错误信息
        /// 88805	- 不支持的查询消耗类型（1：计划；2：推广单元）
        /// 88806	- 参数中包含暂未开放的产品线id信息
        /// 110000	- 查询参数id为空</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response22 AlibabaCnp4pSettleCampaignRealTimeCost(int type, long objectId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>计划、推广单元等实时消耗
        /// 获取客户计划、推官单元、关键词等粒度实时消耗信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.settle.campaignRealTimeCost-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.settle.campaignRealTimeCost&amp;v=1</summary>
        /// <param name="type">类型(1计划；2推广单元)</param>
        /// <param name="objectId">类型对象id</param>
        /// <returns>结算消耗返回 ErrorCode 的错误信息
        /// 88805	- 不支持的查询消耗类型（1：计划；2：推广单元）
        /// 88806	- 参数中包含暂未开放的产品线id信息
        /// 110000	- 查询参数id为空</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response22> AlibabaCnp4pSettleCampaignRealTimeCostAsync(int type, long objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>更新网销宝推广单元
        /// 更新网销宝推广单元
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.adgroup.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.adgroup.update&amp;v=1</summary>
        /// <param name="campaignId">推广计划id</param>
        /// <param name="adGroupId">推广单元id</param>
        /// <param name="onlineState">推广单元上下线状态：0下线；1上线</param>
        /// <param name="bidPrice">推广单元默认出价，单位元</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCnp4pAdgroup AlibabaCnp4pAdgroupUpdate(long campaignId, long adGroupId, int? onlineState = null, double? bidPrice = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新网销宝推广单元
        /// 更新网销宝推广单元
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.adgroup.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.adgroup.update&amp;v=1</summary>
        /// <param name="campaignId">推广计划id</param>
        /// <param name="adGroupId">推广单元id</param>
        /// <param name="onlineState">推广单元上下线状态：0下线；1上线</param>
        /// <param name="bidPrice">推广单元默认出价，单位元</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCnp4pAdgroup> AlibabaCnp4pAdgroupUpdateAsync(long campaignId, long adGroupId, int? onlineState = null, double? bidPrice = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取网销宝账户实时消耗，单位：元
        /// 获取网销宝账户实时消耗，单位：元
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.account.realtimeCost-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.account.realtimeCost&amp;v=1</summary>
        /// <returns>网销宝客户当天实时消耗，单位：元</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response23 AlibabaCnp4pAccountRealtimeCost();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝账户实时消耗，单位：元
        /// 获取网销宝账户实时消耗，单位：元
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.account.realtimeCost-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.account.realtimeCost&amp;v=1</summary>
        /// <returns>网销宝客户当天实时消耗，单位：元</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response23> AlibabaCnp4pAccountRealtimeCostAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>添加网销宝关键词
        /// 添加网销宝关键词
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.add&amp;v=1</summary>
        /// <param name="adGroupId">推广单元id</param>
        /// <param name="keywords">关键词列表，关键词和出价json字符串，keyword:词，不能有一些特殊字符。bidPrice：出价，以“元”为单位，保留两位小数，不能大于日限额。</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 130001	- 关键词重复
        /// 130002	- 1个单元下的关键词数量不能超过200个
        /// 130003	- 关键词不能为空字符
        /// 130004	- 关键词最长为20个汉字或40个英文字符
        /// 130005	- 关键词与已有的关键词冲突
        /// 130006	- 关键词中含有特殊字符
        /// 130007	- 关键词触犯黑名单规则
        /// 130008	- 关键词触犯注册商标规则
        /// 130009	- 关键词含侵犯他人合法权益词汇
        /// 130010	- 关键词出价必须大于0
        /// 130011	- 关键词的出价不能超过99.9
        /// 130012	- 关键词的出价不能超过计划日消耗上限
        /// 130013	- 关键词对应推广计划id为空
        /// 130014	- 关键词对应推广计划id无效或者不属于该用户
        /// 130015	- 关键词对应推广单元id为空
        /// 130016	- 关键词对应推广单元id无效或者不属于该用户
        /// 130017	- 关键词质量分过差，不建议添加
        /// 130018	- 关键词不存在
        /// 130019	- 关键词查询质量分最大批次为10
        /// 130020	- 关键词查询推荐词最大批次为10</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCnp4pKeywordAddResult AlibabaCnp4pKeywordAdd(long adGroupId, System.Collections.Generic.IEnumerable<string> keywords);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>添加网销宝关键词
        /// 添加网销宝关键词
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.add&amp;v=1</summary>
        /// <param name="adGroupId">推广单元id</param>
        /// <param name="keywords">关键词列表，关键词和出价json字符串，keyword:词，不能有一些特殊字符。bidPrice：出价，以“元”为单位，保留两位小数，不能大于日限额。</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 130001	- 关键词重复
        /// 130002	- 1个单元下的关键词数量不能超过200个
        /// 130003	- 关键词不能为空字符
        /// 130004	- 关键词最长为20个汉字或40个英文字符
        /// 130005	- 关键词与已有的关键词冲突
        /// 130006	- 关键词中含有特殊字符
        /// 130007	- 关键词触犯黑名单规则
        /// 130008	- 关键词触犯注册商标规则
        /// 130009	- 关键词含侵犯他人合法权益词汇
        /// 130010	- 关键词出价必须大于0
        /// 130011	- 关键词的出价不能超过99.9
        /// 130012	- 关键词的出价不能超过计划日消耗上限
        /// 130013	- 关键词对应推广计划id为空
        /// 130014	- 关键词对应推广计划id无效或者不属于该用户
        /// 130015	- 关键词对应推广单元id为空
        /// 130016	- 关键词对应推广单元id无效或者不属于该用户
        /// 130017	- 关键词质量分过差，不建议添加
        /// 130018	- 关键词不存在
        /// 130019	- 关键词查询质量分最大批次为10
        /// 130020	- 关键词查询推荐词最大批次为10</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCnp4pKeywordAddResult> AlibabaCnp4pKeywordAddAsync(long adGroupId, System.Collections.Generic.IEnumerable<string> keywords, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>更新网销宝推广计划投放地域
        /// 更新网销宝推广计划投放地域
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.area.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.area.update&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="promoteArea">计划投放地域，全部则为“0”，多个以英文逗号&amp;quot;,分隔&amp;quot;</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCnp4pCampaign AlibabaCnp4pCampaignAreaUpdate(long campaignId, string promoteArea);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新网销宝推广计划投放地域
        /// 更新网销宝推广计划投放地域
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.area.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.area.update&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="promoteArea">计划投放地域，全部则为“0”，多个以英文逗号&amp;quot;,分隔&amp;quot;</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCnp4pCampaign> AlibabaCnp4pCampaignAreaUpdateAsync(long campaignId, string promoteArea, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取网销宝推广单元报表详情
        /// 获取网销宝推广单元报表详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.report.adGroupEffect-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.report.adGroupEffect&amp;v=1</summary>
        /// <param name="startTime">报表起始日期</param>
        /// <param name="endTime">报表截止日期</param>
        /// <param name="campaignId">推广计划id</param>
        /// <param name="pageNo">分页起始页码，默认为1开始</param>
        /// <param name="pageSize">分页一页页数，最大一页200条</param>
        /// <param name="adGroupId">推广单元id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCnp4pReportAdGroupEffectResult AlibabaCnp4pReportAdGroupEffect(System.DateTimeOffset startTime, System.DateTimeOffset endTime, long campaignId, int pageNo, int pageSize, long? adGroupId = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝推广单元报表详情
        /// 获取网销宝推广单元报表详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.report.adGroupEffect-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.report.adGroupEffect&amp;v=1</summary>
        /// <param name="startTime">报表起始日期</param>
        /// <param name="endTime">报表截止日期</param>
        /// <param name="campaignId">推广计划id</param>
        /// <param name="pageNo">分页起始页码，默认为1开始</param>
        /// <param name="pageSize">分页一页页数，最大一页200条</param>
        /// <param name="adGroupId">推广单元id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCnp4pReportAdGroupEffectResult> AlibabaCnp4pReportAdGroupEffectAsync(System.DateTimeOffset startTime, System.DateTimeOffset endTime, long campaignId, int pageNo, int pageSize, long? adGroupId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>添加网销宝推广计划
        /// 添加网销宝推广计划
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.add&amp;v=1</summary>
        /// <param name="title">计划标题</param>
        /// <param name="budget">计划预算</param>
        /// <param name="onlineStatus">计划状态，0为暂停；1为推广中；</param>
        /// <param name="promoteArea">计划投放地域，全部则为“0”，多个以英文逗号&amp;quot;,分隔&amp;quot;</param>
        /// <param name="schedule">计划投放时段，7*24小时分别用0、1代表暂停和投放。</param>
        /// <param name="cositeFlag">计划是否支持站外定向推广：0不支持，1支持</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCnp4pCampaign AlibabaCnp4pCampaignAdd(string title, double budget, int onlineStatus, string promoteArea = null, string schedule = null, int? cositeFlag = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>添加网销宝推广计划
        /// 添加网销宝推广计划
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.add&amp;v=1</summary>
        /// <param name="title">计划标题</param>
        /// <param name="budget">计划预算</param>
        /// <param name="onlineStatus">计划状态，0为暂停；1为推广中；</param>
        /// <param name="promoteArea">计划投放地域，全部则为“0”，多个以英文逗号&amp;quot;,分隔&amp;quot;</param>
        /// <param name="schedule">计划投放时段，7*24小时分别用0、1代表暂停和投放。</param>
        /// <param name="cositeFlag">计划是否支持站外定向推广：0不支持，1支持</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCnp4pCampaign> AlibabaCnp4pCampaignAddAsync(string title, double budget, int onlineStatus, string promoteArea = null, string schedule = null, int? cositeFlag = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>删除网销宝推广关键词
        /// 删除网销宝推广关键词
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.delete&amp;v=1</summary>
        /// <param name="campaignId">推广计划id</param>
        /// <param name="keywordIdList">关键词id列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response12 AlibabaCnp4pKeywordDelete(long campaignId, System.Collections.Generic.IEnumerable<string> keywordIdList);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除网销宝推广关键词
        /// 删除网销宝推广关键词
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.delete&amp;v=1</summary>
        /// <param name="campaignId">推广计划id</param>
        /// <param name="keywordIdList">关键词id列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response12> AlibabaCnp4pKeywordDeleteAsync(long campaignId, System.Collections.Generic.IEnumerable<string> keywordIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>根据adGroupId获取网销宝关键词列表
        /// 根据adGroupId获取网销宝关键词列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.byadgroupid.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.byadgroupid.list&amp;v=1</summary>
        /// <param name="adGroupId">单元id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response12 AlibabaCnp4pKeywordByadgroupidList(long adGroupId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据adGroupId获取网销宝关键词列表
        /// 根据adGroupId获取网销宝关键词列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.byadgroupid.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.byadgroupid.list&amp;v=1</summary>
        /// <param name="adGroupId">单元id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response12> AlibabaCnp4pKeywordByadgroupidListAsync(long adGroupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>更新网销宝推广关键词价格
        /// 更新网销宝推广关键词价格
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.price.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.price.update&amp;v=1</summary>
        /// <param name="keywords">关键词列表，由keywordId、adGroupId、bidPrice组成的json字符串，其中keywordId为关键词id，adGroupId为单元id，bidPrice出价，以“元”为单位，保留一位小数，不能大于日限额。</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response12 AlibabaCnp4pKeywordPriceUpdate(System.Collections.Generic.IEnumerable<string> keywords);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新网销宝推广关键词价格
        /// 更新网销宝推广关键词价格
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.price.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.price.update&amp;v=1</summary>
        /// <param name="keywords">关键词列表，由keywordId、adGroupId、bidPrice组成的json字符串，其中keywordId为关键词id，adGroupId为单元id，bidPrice出价，以“元”为单位，保留一位小数，不能大于日限额。</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response12> AlibabaCnp4pKeywordPriceUpdateAsync(System.Collections.Generic.IEnumerable<string> keywords, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取网销宝客户账户余额
        /// 获取网销宝客户账户余额
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.account.balance-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.account.balance&amp;v=1</summary>
        /// <returns>网销宝账户余额，单位为元</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response24 AlibabaCnp4pAccountBalance();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝客户账户余额
        /// 获取网销宝客户账户余额
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.account.balance-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.account.balance&amp;v=1</summary>
        /// <returns>网销宝账户余额，单位为元</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response24> AlibabaCnp4pAccountBalanceAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取资质审核状态
        /// 获取资质审核状态
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.audit.get.certificate.status-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.audit.get.certificate.status&amp;v=1</summary>
        /// <returns>返回审核状态对象</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response21 AlibabaCnp4pAuditGetCertificateStatus();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取资质审核状态
        /// 获取资质审核状态
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.audit.get.certificate.status-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.audit.get.certificate.status&amp;v=1</summary>
        /// <returns>返回审核状态对象</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response21> AlibabaCnp4pAuditGetCertificateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>更新网销宝计划日预算
        /// 更新网销宝计划日预算
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.budget.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.budget.update&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="budget">计划预算</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCnp4pCampaign AlibabaCnp4pCampaignBudgetUpdate(long campaignId, double budget);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新网销宝计划日预算
        /// 更新网销宝计划日预算
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.budget.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.budget.update&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="budget">计划预算</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCnp4pCampaign> AlibabaCnp4pCampaignBudgetUpdateAsync(long campaignId, double budget, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取网销宝客户报表详情
        /// 获取网销宝客户报表详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.report.custEffect-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.report.custEffect&amp;v=1</summary>
        /// <param name="startTime">报表起始日期</param>
        /// <param name="endTime">报表截止日期</param>
        /// <param name="pageNo">分页起始页码，默认为1开始</param>
        /// <param name="pageSize">分页一页页数，最大一页200条</param>
        /// <param name="reportType">报表类型，为空则全部；site_in则为站内，site_out则为站外</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCnp4pReportCustEffectResult AlibabaCnp4pReportCustEffect(System.DateTimeOffset startTime, System.DateTimeOffset endTime, int pageNo, int pageSize, string reportType = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝客户报表详情
        /// 获取网销宝客户报表详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.report.custEffect-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.report.custEffect&amp;v=1</summary>
        /// <param name="startTime">报表起始日期</param>
        /// <param name="endTime">报表截止日期</param>
        /// <param name="pageNo">分页起始页码，默认为1开始</param>
        /// <param name="pageSize">分页一页页数，最大一页200条</param>
        /// <param name="reportType">报表类型，为空则全部；site_in则为站内，site_out则为站外</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCnp4pReportCustEffectResult> AlibabaCnp4pReportCustEffectAsync(System.DateTimeOffset startTime, System.DateTimeOffset endTime, int pageNo, int pageSize, string reportType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取联盟结算明细列表(按月)
        /// 获取联盟结算明细列表(按月)
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listCPSSettleInfoDetail-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listCPSSettleInfoDetail&amp;v=1</summary>
        /// <param name="pageNo">页偏移量</param>
        /// <param name="pageSize">分页大小</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 88804	- 请求的数据页条数超过系统限制1-200
        /// 88807	- 请求的数据起始页码为1</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCpsListCPSSettleInfoDetailResult AlibabaCpsListCPSSettleInfoDetail(int pageNo, int pageSize);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取联盟结算明细列表(按月)
        /// 获取联盟结算明细列表(按月)
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listCPSSettleInfoDetail-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listCPSSettleInfoDetail&amp;v=1</summary>
        /// <param name="pageNo">页偏移量</param>
        /// <param name="pageSize">分页大小</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 88804	- 请求的数据页条数超过系统限制1-200
        /// 88807	- 请求的数据起始页码为1</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCpsListCPSSettleInfoDetailResult> AlibabaCpsListCPSSettleInfoDetailAsync(int pageNo, int pageSize, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取选品库组信息
        /// 获取选品库组信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listGroupInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listGroupInfo&amp;v=1</summary>
        /// <param name="groupId">组id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response4 AlibabaCpsListGroupInfo(long? groupId = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取选品库组信息
        /// 获取选品库组信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listGroupInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listGroupInfo&amp;v=1</summary>
        /// <param name="groupId">组id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> AlibabaCpsListGroupInfoAsync(long? groupId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取offer价格雷达信息列表
        /// 获取offer价格雷达信息列表
        /// 
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listPriceRadarOffer-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listPriceRadarOffer&amp;v=1</summary>
        /// <param name="offerIds">offerId列表</param>
        /// <returns>结果返回</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response4 AlibabaCpsListPriceRadarOffer(System.Collections.Generic.IEnumerable<long> offerIds);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取offer价格雷达信息列表
        /// 获取offer价格雷达信息列表
        /// 
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listPriceRadarOffer-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listPriceRadarOffer&amp;v=1</summary>
        /// <param name="offerIds">offerId列表</param>
        /// <returns>结果返回</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> AlibabaCpsListPriceRadarOfferAsync(System.Collections.Generic.IEnumerable<long> offerIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>网盟账单列表查询(下线，请使用【联盟账单列表查询】接口)
        /// 该接口后期会下线，仅老网盟用户使用，新接入不能使用该接口
        /// 
        /// 新接入请使用以下接口
        /// 联盟账单列表查询alibaba.cps.tradeBillList
        /// 
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.webUnionTradeBillList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.webUnionTradeBillList&amp;v=1</summary>
        /// <param name="queryOrderType">订单状态查询类型</param>
        /// <param name="queryTimeType">订单时间查询类型</param>
        /// <param name="queryStartTime">查询开始时间</param>
        /// <param name="queryEndTime">查询结束时间</param>
        /// <param name="pageNo">页偏移量</param>
        /// <param name="pageSize">页大小</param>
        /// <param name="webUnionKey">网盟appKey</param>
        /// <param name="orderState">订单状态</param>
        /// <param name="settleState">结算状态</param>
        /// <param name="rightsState">维权状态</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 160001	- 无效网盟appKey
        /// 150005	- 请求页面大小超出限制</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCpsWebUnionTradeBillListResult AlibabaCpsWebUnionTradeBillList(string queryOrderType, string queryTimeType, string queryStartTime, string queryEndTime, int pageNo, int pageSize, string webUnionKey = null, int? orderState = null, int? settleState = null, int? rightsState = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>网盟账单列表查询(下线，请使用【联盟账单列表查询】接口)
        /// 该接口后期会下线，仅老网盟用户使用，新接入不能使用该接口
        /// 
        /// 新接入请使用以下接口
        /// 联盟账单列表查询alibaba.cps.tradeBillList
        /// 
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.webUnionTradeBillList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.webUnionTradeBillList&amp;v=1</summary>
        /// <param name="queryOrderType">订单状态查询类型</param>
        /// <param name="queryTimeType">订单时间查询类型</param>
        /// <param name="queryStartTime">查询开始时间</param>
        /// <param name="queryEndTime">查询结束时间</param>
        /// <param name="pageNo">页偏移量</param>
        /// <param name="pageSize">页大小</param>
        /// <param name="webUnionKey">网盟appKey</param>
        /// <param name="orderState">订单状态</param>
        /// <param name="settleState">结算状态</param>
        /// <param name="rightsState">维权状态</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 160001	- 无效网盟appKey
        /// 150005	- 请求页面大小超出限制</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCpsWebUnionTradeBillListResult> AlibabaCpsWebUnionTradeBillListAsync(string queryOrderType, string queryTimeType, string queryStartTime, string queryEndTime, int pageNo, int pageSize, string webUnionKey = null, int? orderState = null, int? settleState = null, int? rightsState = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取联盟活动列表
        /// 获取联盟活动列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listActivityPageQuery-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listActivityPageQuery&amp;v=1</summary>
        /// <returns>返回 ErrorCode 的错误信息
        /// 88804	- 请求的数据页条数超过系统限制1-200
        /// 88807	- 请求的数据起始页码为1</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCpsListActivityPageQueryResult AlibabaCpsListActivityPageQuery();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取联盟活动列表
        /// 获取联盟活动列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listActivityPageQuery-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listActivityPageQuery&amp;v=1</summary>
        /// <returns>返回 ErrorCode 的错误信息
        /// 88804	- 请求的数据页条数超过系统限制1-200
        /// 88807	- 请求的数据起始页码为1</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCpsListActivityPageQueryResult> AlibabaCpsListActivityPageQueryAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>查询订单的汇总信息
        /// 查询订单的汇总信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.queryTradeInfoSum-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.queryTradeInfoSum&amp;v=1</summary>
        /// <param name="startDate">订单创建开始时间13位时间戳，开始时间跟结束时间不能超过31天</param>
        /// <param name="endDate">订单创建结束时间13位时间戳，开始时间跟结束时间不能超过31天</param>
        /// <param name="mediaZoneId">媒体推广位id</param>
        /// <returns>结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaP4pOpenClientDtoOpenUnionRptTradeDTO AlibabaCpsQueryTradeInfoSum(long startDate, long endDate, long? mediaZoneId = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询订单的汇总信息
        /// 查询订单的汇总信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.queryTradeInfoSum-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.queryTradeInfoSum&amp;v=1</summary>
        /// <param name="startDate">订单创建开始时间13位时间戳，开始时间跟结束时间不能超过31天</param>
        /// <param name="endDate">订单创建结束时间13位时间戳，开始时间跟结束时间不能超过31天</param>
        /// <param name="mediaZoneId">媒体推广位id</param>
        /// <returns>结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaP4pOpenClientDtoOpenUnionRptTradeDTO> AlibabaCpsQueryTradeInfoSumAsync(long startDate, long endDate, long? mediaZoneId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取联盟商家列表
        /// 获取联盟商家列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listShopPageQuery-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listShopPageQuery&amp;v=1</summary>
        /// <param name="categoryId">类目id</param>
        /// <param name="pageNo">页偏移量</param>
        /// <param name="pageSize">分页大小</param>
        /// <param name="sellerId">卖家id</param>
        /// <param name="companyName">公司名称</param>
        /// <param name="defineTags">属性标签</param>
        /// <param name="filterRatioMin">佣金比例下限</param>
        /// <param name="filterRatioMax">佣金比例上限</param>
        /// <param name="sortField">排序字段(desc降序，asc升序)</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 88804	- 请求的数据页条数超过系统限制1-200
        /// 88807	- 请求的数据起始页码为1</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCpsListShopPageQueryResult AlibabaCpsListShopPageQuery(long categoryId, int pageNo, int pageSize, long? sellerId = null, string companyName = null, string defineTags = null, double? filterRatioMin = null, double? filterRatioMax = null, string sortField = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取联盟商家列表
        /// 获取联盟商家列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listShopPageQuery-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listShopPageQuery&amp;v=1</summary>
        /// <param name="categoryId">类目id</param>
        /// <param name="pageNo">页偏移量</param>
        /// <param name="pageSize">分页大小</param>
        /// <param name="sellerId">卖家id</param>
        /// <param name="companyName">公司名称</param>
        /// <param name="defineTags">属性标签</param>
        /// <param name="filterRatioMin">佣金比例下限</param>
        /// <param name="filterRatioMax">佣金比例上限</param>
        /// <param name="sortField">排序字段(desc降序，asc升序)</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 88804	- 请求的数据页条数超过系统限制1-200
        /// 88807	- 请求的数据起始页码为1</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCpsListShopPageQueryResult> AlibabaCpsListShopPageQueryAsync(long categoryId, int pageNo, int pageSize, long? sellerId = null, string companyName = null, string defineTags = null, double? filterRatioMin = null, double? filterRatioMax = null, string sortField = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>联盟账单列表查询
        /// 联盟实时获取订单列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.tradeBillList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.tradeBillList&amp;v=1</summary>
        /// <param name="queryOrderType">订单状态查询类型</param>
        /// <param name="queryTimeType">订单时间查询类型</param>
        /// <param name="queryStartTime">查询开始时间</param>
        /// <param name="queryEndTime">查询结束时间</param>
        /// <param name="pageNo">页偏移量</param>
        /// <param name="pageSize">页大小</param>
        /// <param name="orderState">订单状态</param>
        /// <param name="settleState">结算状态</param>
        /// <param name="rightsState">维权状态</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 150005	- 请求页面大小超出限制</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCpsTradeBillListResult AlibabaCpsTradeBillList(string queryOrderType, string queryTimeType, string queryStartTime, string queryEndTime, int pageNo, int pageSize, int? orderState = null, int? settleState = null, int? rightsState = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>联盟账单列表查询
        /// 联盟实时获取订单列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.tradeBillList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.tradeBillList&amp;v=1</summary>
        /// <param name="queryOrderType">订单状态查询类型</param>
        /// <param name="queryTimeType">订单时间查询类型</param>
        /// <param name="queryStartTime">查询开始时间</param>
        /// <param name="queryEndTime">查询结束时间</param>
        /// <param name="pageNo">页偏移量</param>
        /// <param name="pageSize">页大小</param>
        /// <param name="orderState">订单状态</param>
        /// <param name="settleState">结算状态</param>
        /// <param name="rightsState">维权状态</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 150005	- 请求页面大小超出限制</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCpsTradeBillListResult> AlibabaCpsTradeBillListAsync(string queryOrderType, string queryTimeType, string queryStartTime, string queryEndTime, int pageNo, int pageSize, int? orderState = null, int? settleState = null, int? rightsState = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>批量生成联盟推广url点击信息
        /// 批量生成联盟推广url点击信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.genClickUrl-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.genClickUrl&amp;v=1</summary>
        /// <param name="type">转链接类型(店铺、商品、活动)</param>
        /// <param name="mediaId">媒体id</param>
        /// <param name="mediaZoneId">媒体推广位id</param>
        /// <param name="objectValueList">推广实体</param>
        /// <param name="ext">其他自定义参数，查询订单会返回该参数</param>
        /// <returns>结构体返回 ErrorCode 的错误信息
        /// 99993	- 业务参数不能为空
        /// 150008	- 无效生成点击实体类型
        /// 88804	- 请求的数据页条数超过系统限制1-200
        /// 88807	- 请求的数据起始页码为1</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response4 AlibabaCpsGenClickUrl(int type, long mediaId, long mediaZoneId, System.Collections.Generic.IEnumerable<string> objectValueList, string ext = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>批量生成联盟推广url点击信息
        /// 批量生成联盟推广url点击信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.genClickUrl-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.genClickUrl&amp;v=1</summary>
        /// <param name="type">转链接类型(店铺、商品、活动)</param>
        /// <param name="mediaId">媒体id</param>
        /// <param name="mediaZoneId">媒体推广位id</param>
        /// <param name="objectValueList">推广实体</param>
        /// <param name="ext">其他自定义参数，查询订单会返回该参数</param>
        /// <returns>结构体返回 ErrorCode 的错误信息
        /// 99993	- 业务参数不能为空
        /// 150008	- 无效生成点击实体类型
        /// 88804	- 请求的数据页条数超过系统限制1-200
        /// 88807	- 请求的数据起始页码为1</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> AlibabaCpsGenClickUrlAsync(int type, long mediaId, long mediaZoneId, System.Collections.Generic.IEnumerable<string> objectValueList, string ext = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取媒体推广位信息
        /// 获取用户媒体及推广位信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listMediaInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listMediaInfo&amp;v=1</summary>
        /// <param name="mediaId">媒体id</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 150009	- 无效媒体id</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response4 AlibabaCpsListMediaInfo(long? mediaId = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取媒体推广位信息
        /// 获取用户媒体及推广位信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listMediaInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listMediaInfo&amp;v=1</summary>
        /// <param name="mediaId">媒体id</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 150009	- 无效媒体id</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> AlibabaCpsListMediaInfoAsync(long? mediaId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>查询实时uv，muv接口
        /// 查询实时uv，muv接口
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.queryRealtimeVisitor-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.queryRealtimeVisitor&amp;v=1</summary>
        /// <param name="bizDate">指定查询日13位时间戳，只能在30天内</param>
        /// <param name="mediaZoneId">媒体推广位id</param>
        /// <returns>结果返回 ErrorCode 的错误信息
        /// 88803	- 缺少参数</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response4 AlibabaCpsQueryRealtimeVisitor(long bizDate, long? mediaZoneId = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询实时uv，muv接口
        /// 查询实时uv，muv接口
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.queryRealtimeVisitor-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.queryRealtimeVisitor&amp;v=1</summary>
        /// <param name="bizDate">指定查询日13位时间戳，只能在30天内</param>
        /// <param name="mediaZoneId">媒体推广位id</param>
        /// <returns>结果返回 ErrorCode 的错误信息
        /// 88803	- 缺少参数</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> AlibabaCpsQueryRealtimeVisitorAsync(long bizDate, long? mediaZoneId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取联盟offer列表
        /// 获取联盟offer列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listOfferPageQuery-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listOfferPageQuery&amp;v=1</summary>
        /// <param name="pageNo">页号</param>
        /// <param name="pageSize">页大小</param>
        /// <param name="categoryId">类目id
        /// 类目id和feedInfo至少输入一项</param>
        /// <param name="feedInfo">关键词或offerId
        /// 类目id和feedInfo至少输入一项</param>
        /// <param name="defineTags">属性标签，属性间以逗号分隔</param>
        /// <param name="filterMinPrice">售价下限</param>
        /// <param name="filterMaxPrice">售价上限</param>
        /// <param name="filterQuantityBeginMin">起批量下限</param>
        /// <param name="filterQuantityBeginMax">起批量上限</param>
        /// <param name="filterSaleQuantityMin">销量下限</param>
        /// <param name="filterSaleQuantityMax">销量上限</param>
        /// <param name="filterRatioMin">佣金比例下限</param>
        /// <param name="filterRatioMax">佣金比例上限</param>
        /// <param name="sortField">排序字段(desc降序，asc升序)</param>
        /// <param name="filterOldBuyerRatio">老买家佣金比例筛选，注意这里与ratio格式不同，用~分割上下区间，如0.1~:表示大于等于0.1;~0.2:表于小于等于0.2;0.2~0.3:表示0.2到0.3</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 88804	- 请求的数据页条数超过系统限制1-200
        /// 88807	- 请求的数据起始页码为1
        /// 99993	- 缺少必须输入参数项(类目id和feedInfo信息至少输入一项)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCpsListOfferPageQueryResult AlibabaCpsListOfferPageQuery(int pageNo, int pageSize, long? categoryId = null, string feedInfo = null, string defineTags = null, double? filterMinPrice = null, double? filterMaxPrice = null, int? filterQuantityBeginMin = null, int? filterQuantityBeginMax = null, int? filterSaleQuantityMin = null, int? filterSaleQuantityMax = null, double? filterRatioMin = null, double? filterRatioMax = null, string sortField = null, string filterOldBuyerRatio = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取联盟offer列表
        /// 获取联盟offer列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listOfferPageQuery-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listOfferPageQuery&amp;v=1</summary>
        /// <param name="pageNo">页号</param>
        /// <param name="pageSize">页大小</param>
        /// <param name="categoryId">类目id
        /// 类目id和feedInfo至少输入一项</param>
        /// <param name="feedInfo">关键词或offerId
        /// 类目id和feedInfo至少输入一项</param>
        /// <param name="defineTags">属性标签，属性间以逗号分隔</param>
        /// <param name="filterMinPrice">售价下限</param>
        /// <param name="filterMaxPrice">售价上限</param>
        /// <param name="filterQuantityBeginMin">起批量下限</param>
        /// <param name="filterQuantityBeginMax">起批量上限</param>
        /// <param name="filterSaleQuantityMin">销量下限</param>
        /// <param name="filterSaleQuantityMax">销量上限</param>
        /// <param name="filterRatioMin">佣金比例下限</param>
        /// <param name="filterRatioMax">佣金比例上限</param>
        /// <param name="sortField">排序字段(desc降序，asc升序)</param>
        /// <param name="filterOldBuyerRatio">老买家佣金比例筛选，注意这里与ratio格式不同，用~分割上下区间，如0.1~:表示大于等于0.1;~0.2:表于小于等于0.2;0.2~0.3:表示0.2到0.3</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 88804	- 请求的数据页条数超过系统限制1-200
        /// 88807	- 请求的数据起始页码为1
        /// 99993	- 缺少必须输入参数项(类目id和feedInfo信息至少输入一项)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCpsListOfferPageQueryResult> AlibabaCpsListOfferPageQueryAsync(int pageNo, int pageSize, long? categoryId = null, string feedInfo = null, string defineTags = null, double? filterMinPrice = null, double? filterMaxPrice = null, int? filterQuantityBeginMin = null, int? filterQuantityBeginMax = null, int? filterSaleQuantityMin = null, int? filterSaleQuantityMax = null, double? filterRatioMin = null, double? filterRatioMax = null, string sortField = null, string filterOldBuyerRatio = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取联盟结算摘要账单
        /// 获取联盟结算摘要账单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.getCPSSettleSummaryInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.getCPSSettleSummaryInfo&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCpsOpenCPSSettleSummaryDTO AlibabaCpsGetCPSSettleSummaryInfo();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取联盟结算摘要账单
        /// 获取联盟结算摘要账单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.getCPSSettleSummaryInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.getCPSSettleSummaryInfo&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCpsOpenCPSSettleSummaryDTO> AlibabaCpsGetCPSSettleSummaryInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>通过询价单id获取询价单
        /// 通过询价单id获取询价单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.buyOffer.getBuyOfferById-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.buyOffer.getBuyOfferById&amp;v=1</summary>
        /// <param name="buyOfferId">询价单ID</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// ISV.DATA_NOT_EXIST	- 数据不存在
        /// ISP.SYSTEM_ERROR	- 系统出错(请联系开发人员排查)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        ComAlibabaCaigouApiBuyOfferModelBuyOffer CaigouApiBuyOfferGetBuyOfferById(long buyOfferId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>通过询价单id获取询价单
        /// 通过询价单id获取询价单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.buyOffer.getBuyOfferById-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.buyOffer.getBuyOfferById&amp;v=1</summary>
        /// <param name="buyOfferId">询价单ID</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// ISV.DATA_NOT_EXIST	- 数据不存在
        /// ISP.SYSTEM_ERROR	- 系统出错(请联系开发人员排查)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComAlibabaCaigouApiBuyOfferModelBuyOffer> CaigouApiBuyOfferGetBuyOfferByIdAsync(long buyOfferId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>游标式获取失败的消息列表
        /// 游标式获取失败的消息列表，获取的消息会自动消费成功的确认。所以下次以相同条件调用获取的是剩下的数据，直至返回数据为空
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:push.cursor.messageList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=push.cursor.messageList&amp;v=1</summary>
        /// <param name="createStartTime">消息创建时间查找范围开始</param>
        /// <param name="createEndTime">消息创建时间查找范围结束</param>
        /// <param name="quantity">每次取的数据量，范围20-200，默认20</param>
        /// <param name="type">消息类型</param>
        /// <param name="userInfo">用户Id</param>
        /// <returns>推送消息列表</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response25 PushCursorMessageList(System.DateTimeOffset? createStartTime = null, System.DateTimeOffset? createEndTime = null, int? quantity = null, string type = null, string userInfo = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>游标式获取失败的消息列表
        /// 游标式获取失败的消息列表，获取的消息会自动消费成功的确认。所以下次以相同条件调用获取的是剩下的数据，直至返回数据为空
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:push.cursor.messageList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=push.cursor.messageList&amp;v=1</summary>
        /// <param name="createStartTime">消息创建时间查找范围开始</param>
        /// <param name="createEndTime">消息创建时间查找范围结束</param>
        /// <param name="quantity">每次取的数据量，范围20-200，默认20</param>
        /// <param name="type">消息类型</param>
        /// <param name="userInfo">用户Id</param>
        /// <returns>推送消息列表</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response25> PushCursorMessageListAsync(System.DateTimeOffset? createStartTime = null, System.DateTimeOffset? createEndTime = null, int? quantity = null, string type = null, string userInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>批量新增/修改erp物料
        /// 批量新增/修改erp物料，不存在则新增，存在则更新
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.batchAddOrUpdateErpProducts-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.batchAddOrUpdateErpProducts&amp;v=1</summary>
        /// <param name="coopParams">添加或更新的erp物料参数</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCaigouProductResultData AlibabaCaigouProductBatchAddOrUpdateErpProducts(System.Collections.Generic.IEnumerable<AlibabaCaigouProductAddOrUpdateErpProductCoopParam> coopParams);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>批量新增/修改erp物料
        /// 批量新增/修改erp物料，不存在则新增，存在则更新
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.batchAddOrUpdateErpProducts-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.batchAddOrUpdateErpProducts&amp;v=1</summary>
        /// <param name="coopParams">添加或更新的erp物料参数</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCaigouProductResultData> AlibabaCaigouProductBatchAddOrUpdateErpProductsAsync(System.Collections.Generic.IEnumerable<AlibabaCaigouProductAddOrUpdateErpProductCoopParam> coopParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>根据系统域编码、erp物料编码和memberId批量删除erp物料信息
        /// 根据系统域编码、erp物料编码和memberId批量删除erp物料信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.removeErpProducts-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.removeErpProducts&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        CnAlibabaOpenAlibabaCaigouProductRemoveErpProductsAlibabaCaigouProductResultData AlibabaCaigouProductRemoveErpProducts(System.Collections.Generic.IEnumerable<AlibabaCaigouProductErpProductCoopParam> erpProductCoopParamList);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据系统域编码、erp物料编码和memberId批量删除erp物料信息
        /// 根据系统域编码、erp物料编码和memberId批量删除erp物料信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.removeErpProducts-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.removeErpProducts&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CnAlibabaOpenAlibabaCaigouProductRemoveErpProductsAlibabaCaigouProductResultData> AlibabaCaigouProductRemoveErpProductsAsync(System.Collections.Generic.IEnumerable<AlibabaCaigouProductErpProductCoopParam> erpProductCoopParamList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>查询erp物料
        /// 根据系统域编码、物料编码、会员ID查询erp物料
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.getErpProductByErpProductCode-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.getErpProductByErpProductCode&amp;v=1</summary>
        /// <param name="systemDomainCode">系统域编码</param>
        /// <param name="erpProductCode">erp物料编码</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        CnAlibabaOpenAlibabaCaigouProductGetErpProductByErpProductCodeAlibabaCaigouProductResultData AlibabaCaigouProductGetErpProductByErpProductCode(string systemDomainCode, string erpProductCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询erp物料
        /// 根据系统域编码、物料编码、会员ID查询erp物料
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.getErpProductByErpProductCode-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.getErpProductByErpProductCode&amp;v=1</summary>
        /// <param name="systemDomainCode">系统域编码</param>
        /// <param name="erpProductCode">erp物料编码</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CnAlibabaOpenAlibabaCaigouProductGetErpProductByErpProductCodeAlibabaCaigouProductResultData> AlibabaCaigouProductGetErpProductByErpProductCodeAsync(string systemDomainCode, string erpProductCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>创建子帐号
        /// 用户在免登和接口调用的时候都需要使用1688上对应的操作员帐号，一般情况下企业系统中都没有1688上对应的子帐号ID，可以通过这个接口为某个操作员快速创建一个子帐号，同时记录到接入商系统内部，便于下次使用。
        /// 注意：如果对应子帐号已经建立过了，则直接返回已经建立的子帐号ID，调用此接口前，需要主帐号登陆过旺旺（至少一次），并且已经领用了子帐号，领用页面：http://mai.taobao.com/subaccount/index.htm
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.account.createSubAccount-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.account.createSubAccount&amp;v=1</summary>
        /// <param name="employeeId">需要创建的子帐号在接入商系统内部唯一编号或者ID</param>
        /// <param name="name">需要创建的子帐号的姓名</param>
        /// <param name="mobileNo">需要创建的子帐号的手机号，如果为空的话将来无法收到来自1688的采购业务提醒</param>
        /// <param name="email">需要创建的子帐号的邮箱，如果为空则无法收到来自1688采购业务的邮件提醒</param>
        /// <param name="sex">需要创建的子帐号的性别，枚举值：1或者2；1表示男，2表示女</param>
        /// <param name="department">需要创建的子帐号所属部门，多级部门用&amp;quot;-&amp;quot;分割，最多三级；如果为空，系统默认会在主帐号下面创建一个“我的团队”这个部门，所有没有传部门的子帐号都会归属到这个默认部门下面去。</param>
        /// <param name="role">需要创建的子帐号在1688的岗位，例如：1688采购员、采购经理、财务，如果为空的话这个子帐号就没有相关采购寻源的权限或者采购的权限</param>
        /// <param name="authCompanies">授权公司编码，多个用英文分号分隔</param>
        /// <param name="authFactories">授权工厂编码，多个用英文分号分隔</param>
        /// <param name="authPurchaseCenters">授权采购中心编码，多个用英文分号分隔</param>
        /// <param name="authCostCenters">授权成本中心，格式：公司编码|成本中心编码   多个成本中心用英文分号分隔</param>
        /// <param name="authAreas">授权区域名称，多个用英文分号分隔</param>
        /// <param name="authCategories">授权类目编码，多个用英文分号分隔</param>
        /// <returns>创建成功的子帐号ID或者是已经与接入商系统内部employeeId绑定的子帐号ID返回 ErrorCode 的错误信息
        /// ISV.CONFLICT_MEMBER	- 主帐号存在同名帐号，这个是由于alibaba帐号体系合并导致还有很少一部分会员存在用户名冲突问题，新注册的不存在这个问题，如果主帐号冲突的话就不能使用子帐号相关功能，所以当发现这个问题后。(请修改自己的帐号名或者联系采购运营服务同学。)
        /// ISV.INVALID_PARAM	- 接口传入参数不合法(请按接口参数说明检查传入的param参数，确保param对象中的employeeId,buyerMemberId,name,departmend是合法有效的)
        /// ISV.DATA_PRIVILEGE_ILLEGAL	- 您无权调用此api接口，此接口只对与采购平台合作采购商才能提供这个接口服务(请先与采购平台进行合作，可联系采购运营服务同学进行咨询)
        /// ISP.SYSTEM_ERROR	- ISP系统繁忙(请确认主帐号已经登陆过旺旺（至少一次），并且已经领用了子帐号；请稍等片刻，在进行尝试；通知采购运营服务同学告知问题。)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response26 CaigouApiAccountCreateSubAccount(string employeeId, string name, string mobileNo = null, string email = null, string sex = null, string department = null, string role = null, string authCompanies = null, string authFactories = null, string authPurchaseCenters = null, string authCostCenters = null, string authAreas = null, string authCategories = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建子帐号
        /// 用户在免登和接口调用的时候都需要使用1688上对应的操作员帐号，一般情况下企业系统中都没有1688上对应的子帐号ID，可以通过这个接口为某个操作员快速创建一个子帐号，同时记录到接入商系统内部，便于下次使用。
        /// 注意：如果对应子帐号已经建立过了，则直接返回已经建立的子帐号ID，调用此接口前，需要主帐号登陆过旺旺（至少一次），并且已经领用了子帐号，领用页面：http://mai.taobao.com/subaccount/index.htm
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.account.createSubAccount-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.account.createSubAccount&amp;v=1</summary>
        /// <param name="employeeId">需要创建的子帐号在接入商系统内部唯一编号或者ID</param>
        /// <param name="name">需要创建的子帐号的姓名</param>
        /// <param name="mobileNo">需要创建的子帐号的手机号，如果为空的话将来无法收到来自1688的采购业务提醒</param>
        /// <param name="email">需要创建的子帐号的邮箱，如果为空则无法收到来自1688采购业务的邮件提醒</param>
        /// <param name="sex">需要创建的子帐号的性别，枚举值：1或者2；1表示男，2表示女</param>
        /// <param name="department">需要创建的子帐号所属部门，多级部门用&amp;quot;-&amp;quot;分割，最多三级；如果为空，系统默认会在主帐号下面创建一个“我的团队”这个部门，所有没有传部门的子帐号都会归属到这个默认部门下面去。</param>
        /// <param name="role">需要创建的子帐号在1688的岗位，例如：1688采购员、采购经理、财务，如果为空的话这个子帐号就没有相关采购寻源的权限或者采购的权限</param>
        /// <param name="authCompanies">授权公司编码，多个用英文分号分隔</param>
        /// <param name="authFactories">授权工厂编码，多个用英文分号分隔</param>
        /// <param name="authPurchaseCenters">授权采购中心编码，多个用英文分号分隔</param>
        /// <param name="authCostCenters">授权成本中心，格式：公司编码|成本中心编码   多个成本中心用英文分号分隔</param>
        /// <param name="authAreas">授权区域名称，多个用英文分号分隔</param>
        /// <param name="authCategories">授权类目编码，多个用英文分号分隔</param>
        /// <returns>创建成功的子帐号ID或者是已经与接入商系统内部employeeId绑定的子帐号ID返回 ErrorCode 的错误信息
        /// ISV.CONFLICT_MEMBER	- 主帐号存在同名帐号，这个是由于alibaba帐号体系合并导致还有很少一部分会员存在用户名冲突问题，新注册的不存在这个问题，如果主帐号冲突的话就不能使用子帐号相关功能，所以当发现这个问题后。(请修改自己的帐号名或者联系采购运营服务同学。)
        /// ISV.INVALID_PARAM	- 接口传入参数不合法(请按接口参数说明检查传入的param参数，确保param对象中的employeeId,buyerMemberId,name,departmend是合法有效的)
        /// ISV.DATA_PRIVILEGE_ILLEGAL	- 您无权调用此api接口，此接口只对与采购平台合作采购商才能提供这个接口服务(请先与采购平台进行合作，可联系采购运营服务同学进行咨询)
        /// ISP.SYSTEM_ERROR	- ISP系统繁忙(请确认主帐号已经登陆过旺旺（至少一次），并且已经领用了子帐号；请稍等片刻，在进行尝试；通知采购运营服务同学告知问题。)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response26> CaigouApiAccountCreateSubAccountAsync(string employeeId, string name, string mobileNo = null, string email = null, string sex = null, string department = null, string role = null, string authCompanies = null, string authFactories = null, string authPurchaseCenters = null, string authCostCenters = null, string authAreas = null, string authCategories = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>分页查询采购单列表
        /// 寻源单列表分页查询接口，包括询价单、竞价单、招标单等
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.buyoffer.queryList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.buyoffer.queryList&amp;v=1</summary>
        /// <param name="buyerUserId">采购商的userId：若无，则当主账号查询；否则，按照子账号查询</param>
        /// <param name="subject">采购单的标题，支持模糊查询</param>
        /// <param name="statuses">采购单状态，可以一次查询多个，值为：等待审核：pending，审核不通过：tbd，接受报名中：sent，报价截止：end，撤销：cancel</param>
        /// <param name="bizTypes">业务类型；招投标：bidding，询报价：buyoffer，竞价：auction，招应募：recruitment</param>
        /// <param name="startGmtCreate">查询采购单的创建时间大于等于该时间</param>
        /// <param name="endGmtCreate">查询采购单的创建时间小于等于该时间</param>
        /// <param name="needPurchaseItem">是否需要采购单item信息，默认为false</param>
        /// <param name="needSuplierRequirment">是否需要供应商要求信息，默认为false</param>
        /// <param name="needDetail">是否需要detail信息，默认为false</param>
        /// <param name="needAttachment">是否需要附件，默认为false</param>
        /// <param name="needBuyerContact">是否需要买家联系方式，默认为false</param>
        /// <param name="needTradeRequirement">是否需要交易条件，默认为false</param>
        /// <param name="needRemarkInfo">是否需要备注信息，默认为false</param>
        /// <param name="pageStart">当前页数，不传则默认为第一页，每次限定查询10行。</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// ISV.DATA_NOT_EXIST	- 数据不存在
        /// ISP.SYSTEM_ERROR	- 系统出错(请联系开发人员排查)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        CnAlibabaOpenCaigouApiBuyofferQueryListComAlibabaCaigouApiBuyOfferModelBuyOffer CaigouApiBuyofferQueryList(long? buyerUserId = null, string subject = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.Collections.Generic.IEnumerable<string> bizTypes = null, System.DateTimeOffset? startGmtCreate = null, System.DateTimeOffset? endGmtCreate = null, bool? needPurchaseItem = null, bool? needSuplierRequirment = null, bool? needDetail = null, bool? needAttachment = null, bool? needBuyerContact = null, bool? needTradeRequirement = null, bool? needRemarkInfo = null, int? pageStart = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>分页查询采购单列表
        /// 寻源单列表分页查询接口，包括询价单、竞价单、招标单等
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.buyoffer.queryList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.buyoffer.queryList&amp;v=1</summary>
        /// <param name="buyerUserId">采购商的userId：若无，则当主账号查询；否则，按照子账号查询</param>
        /// <param name="subject">采购单的标题，支持模糊查询</param>
        /// <param name="statuses">采购单状态，可以一次查询多个，值为：等待审核：pending，审核不通过：tbd，接受报名中：sent，报价截止：end，撤销：cancel</param>
        /// <param name="bizTypes">业务类型；招投标：bidding，询报价：buyoffer，竞价：auction，招应募：recruitment</param>
        /// <param name="startGmtCreate">查询采购单的创建时间大于等于该时间</param>
        /// <param name="endGmtCreate">查询采购单的创建时间小于等于该时间</param>
        /// <param name="needPurchaseItem">是否需要采购单item信息，默认为false</param>
        /// <param name="needSuplierRequirment">是否需要供应商要求信息，默认为false</param>
        /// <param name="needDetail">是否需要detail信息，默认为false</param>
        /// <param name="needAttachment">是否需要附件，默认为false</param>
        /// <param name="needBuyerContact">是否需要买家联系方式，默认为false</param>
        /// <param name="needTradeRequirement">是否需要交易条件，默认为false</param>
        /// <param name="needRemarkInfo">是否需要备注信息，默认为false</param>
        /// <param name="pageStart">当前页数，不传则默认为第一页，每次限定查询10行。</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// ISV.DATA_NOT_EXIST	- 数据不存在
        /// ISP.SYSTEM_ERROR	- 系统出错(请联系开发人员排查)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CnAlibabaOpenCaigouApiBuyofferQueryListComAlibabaCaigouApiBuyOfferModelBuyOffer> CaigouApiBuyofferQueryListAsync(long? buyerUserId = null, string subject = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.Collections.Generic.IEnumerable<string> bizTypes = null, System.DateTimeOffset? startGmtCreate = null, System.DateTimeOffset? endGmtCreate = null, bool? needPurchaseItem = null, bool? needSuplierRequirment = null, bool? needDetail = null, bool? needAttachment = null, bool? needBuyerContact = null, bool? needTradeRequirement = null, bool? needRemarkInfo = null, int? pageStart = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>查询子账号详情
        /// 根据子账号登录名查询子账号userId
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.open.caigou.api.account.querySubAcccounts-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.open.caigou.api.account.querySubAcccounts&amp;v=1</summary>
        /// <param name="loginId">子账号登录名</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaOpenCaigouApiAccountQuerySubAcccountsResult AlibabaOpenCaigouApiAccountQuerySubAcccounts(string loginId = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询子账号详情
        /// 根据子账号登录名查询子账号userId
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.open.caigou.api.account.querySubAcccounts-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.open.caigou.api.account.querySubAcccounts&amp;v=1</summary>
        /// <param name="loginId">子账号登录名</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaOpenCaigouApiAccountQuerySubAcccountsResult> AlibabaOpenCaigouApiAccountQuerySubAcccountsAsync(string loginId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>采购商获取报价详情
        /// 通过报价单ID获取报价详情接口
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.quotation.buyerGetQuotationDetail-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.quotation.buyerGetQuotationDetail&amp;v=1</summary>
        /// <param name="quotationId">报价单ID</param>
        /// <returns>报价详情返回 ErrorCode 的错误信息
        /// ISV.DATA_NOT_EXIST	- 数据不存在(重新输入正确的参数)
        /// ISV.NO_PERMISSION	- 无权限(确认此报价单是否当前用户的报价单)
        /// ISP.SYSTEM_ERROR	- 系统出错(请联系开发人员排查)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        ComAlibabaCaigouApiQuotationModelQuotation CaigouApiQuotationBuyerGetQuotationDetail(long quotationId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>采购商获取报价详情
        /// 通过报价单ID获取报价详情接口
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.quotation.buyerGetQuotationDetail-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.quotation.buyerGetQuotationDetail&amp;v=1</summary>
        /// <param name="quotationId">报价单ID</param>
        /// <returns>报价详情返回 ErrorCode 的错误信息
        /// ISV.DATA_NOT_EXIST	- 数据不存在(重新输入正确的参数)
        /// ISV.NO_PERMISSION	- 无权限(确认此报价单是否当前用户的报价单)
        /// ISP.SYSTEM_ERROR	- 系统出错(请联系开发人员排查)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComAlibabaCaigouApiQuotationModelQuotation> CaigouApiQuotationBuyerGetQuotationDetailAsync(long quotationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>内部商城ERP预算校验
        /// 内部商城ERP预算校验
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.mall.budgetVerification-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.mall.budgetVerification&amp;v=1</summary>
        /// <param name="buyerMemberId">买家buyermemberId</param>
        /// <param name="goodsList">商品列表</param>
        /// <param name="appKey">第三方appkey</param>
        /// <param name="appSecret">第三方appSecret</param>
        /// <param name="sign">加密值</param>
        /// <param name="loginId">登录账号</param>
        /// <returns>返回信息返回 ErrorCode 的错误信息
        /// 	-</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        BaiyaoMallBudgetVerificationCheckMallBudgetInvokerResult AlibabaCaigouMallBudgetVerification(string buyerMemberId, System.Collections.Generic.IEnumerable<AlibabaCaigouMallPurchaseOrderGoodsModel> goodsList, string appKey, string appSecret, string sign, string loginId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>内部商城ERP预算校验
        /// 内部商城ERP预算校验
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.mall.budgetVerification-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.mall.budgetVerification&amp;v=1</summary>
        /// <param name="buyerMemberId">买家buyermemberId</param>
        /// <param name="goodsList">商品列表</param>
        /// <param name="appKey">第三方appkey</param>
        /// <param name="appSecret">第三方appSecret</param>
        /// <param name="sign">加密值</param>
        /// <param name="loginId">登录账号</param>
        /// <returns>返回信息返回 ErrorCode 的错误信息
        /// 	-</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaiyaoMallBudgetVerificationCheckMallBudgetInvokerResult> AlibabaCaigouMallBudgetVerificationAsync(string buyerMemberId, System.Collections.Generic.IEnumerable<AlibabaCaigouMallPurchaseOrderGoodsModel> goodsList, string appKey, string appSecret, string sign, string loginId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>采购订单确认收货
        /// 采购订单确认收货
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.procurement.order.confirmGoods-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.procurement.order.confirmGoods&amp;v=1</summary>
        /// <param name="confirmCode">本次确认收货唯一编号</param>
        /// <param name="confirmGoodsInfos">本次确认收货详情</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCaigouProcurementOrderConfirmGoodsResult AlibabaCaigouProcurementOrderConfirmGoods(string confirmCode, System.Collections.Generic.IEnumerable<AlibabaProcurementConfirmGoodsInfo> confirmGoodsInfos);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>采购订单确认收货
        /// 采购订单确认收货
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.procurement.order.confirmGoods-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.procurement.order.confirmGoods&amp;v=1</summary>
        /// <param name="confirmCode">本次确认收货唯一编号</param>
        /// <param name="confirmGoodsInfos">本次确认收货详情</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCaigouProcurementOrderConfirmGoodsResult> AlibabaCaigouProcurementOrderConfirmGoodsAsync(string confirmCode, System.Collections.Generic.IEnumerable<AlibabaProcurementConfirmGoodsInfo> confirmGoodsInfos, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>根据采购单维度审核采购单
        /// 根据采购单维度审核采购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.purchaseOrder.updateStatusByPurchase-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.purchaseOrder.updateStatusByPurchase&amp;v=1</summary>
        /// <param name="purchaseOrderId">采购单ID</param>
        /// <param name="isApproved">是否通过</param>
        /// <param name="approvedMemo">审批理由</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCaigouPurchaseOrderUpdateStatusByPurchaseResult AlibabaCaigouPurchaseOrderUpdateStatusByPurchase(long purchaseOrderId, bool isApproved, string approvedMemo = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据采购单维度审核采购单
        /// 根据采购单维度审核采购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.purchaseOrder.updateStatusByPurchase-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.purchaseOrder.updateStatusByPurchase&amp;v=1</summary>
        /// <param name="purchaseOrderId">采购单ID</param>
        /// <param name="isApproved">是否通过</param>
        /// <param name="approvedMemo">审批理由</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCaigouPurchaseOrderUpdateStatusByPurchaseResult> AlibabaCaigouPurchaseOrderUpdateStatusByPurchaseAsync(long purchaseOrderId, bool isApproved, string approvedMemo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取子账号清单
        /// 获取主账号下所有的子账号绑定信息
        /// 注意：调用此接口前，需要主帐号登陆过旺旺（至少一次），并且已经领用了子帐号，领用页面：http://mai.taobao.com/subaccount/index.htm
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.account.listSubAcccounts-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.account.listSubAcccounts&amp;v=1</summary>
        /// <returns>返回列表</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response27 CaigouApiAccountListSubAcccounts();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取子账号清单
        /// 获取主账号下所有的子账号绑定信息
        /// 注意：调用此接口前，需要主帐号登陆过旺旺（至少一次），并且已经领用了子帐号，领用页面：http://mai.taobao.com/subaccount/index.htm
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.account.listSubAcccounts-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.account.listSubAcccounts&amp;v=1</summary>
        /// <returns>返回列表</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response27> CaigouApiAccountListSubAcccountsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>关闭询价单
        /// 关闭询价单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.buyoffer.closeBuyOffer-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.buyoffer.closeBuyOffer&amp;v=1</summary>
        /// <param name="buyOfferId">询价单id，为创建询价单api的返回值</param>
        /// <param name="closeReason">关闭询价单原因【不要超过20个字符】</param>
        /// <param name="closeDesc">关闭询价单的详细描述【不要超过40个字符】</param>
        /// <returns>是否执行成功</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response28 CaigouApiBuyofferCloseBuyOffer(long buyOfferId, string closeReason, string closeDesc = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>关闭询价单
        /// 关闭询价单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.buyoffer.closeBuyOffer-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.buyoffer.closeBuyOffer&amp;v=1</summary>
        /// <param name="buyOfferId">询价单id，为创建询价单api的返回值</param>
        /// <param name="closeReason">关闭询价单原因【不要超过20个字符】</param>
        /// <param name="closeDesc">关闭询价单的详细描述【不要超过40个字符】</param>
        /// <returns>是否执行成功</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response28> CaigouApiBuyofferCloseBuyOfferAsync(long buyOfferId, string closeReason, string closeDesc = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>采购执行买家取消付款
        /// 采购执行买家取消付款
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.procurement.BuyerPayService.cancelPayNote-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.procurement.BuyerPayService.cancelPayNote&amp;v=1</summary>
        /// <param name="payId">付款单id</param>
        /// <returns>取消结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaProcurementApiIntegrationResultResultData ComAlibabaProcurementBuyerPayServiceCancelPayNote(long payId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>采购执行买家取消付款
        /// 采购执行买家取消付款
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.procurement.BuyerPayService.cancelPayNote-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.procurement.BuyerPayService.cancelPayNote&amp;v=1</summary>
        /// <param name="payId">付款单id</param>
        /// <returns>取消结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaProcurementApiIntegrationResultResultData> ComAlibabaProcurementBuyerPayServiceCancelPayNoteAsync(long payId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>内部商城同步创建交易订单
        /// 内部商城同步创建交易订单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.mall.createTradeOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.mall.createTradeOrder&amp;v=1</summary>
        /// <param name="openTradeOrderParam">内部商城下单参数</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCaigouMallCreateTradeOrderResult AlibabaCaigouMallCreateTradeOrder(AlibabaCaigouMallOpenTradeOrderParam openTradeOrderParam);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>内部商城同步创建交易订单
        /// 内部商城同步创建交易订单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.mall.createTradeOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.mall.createTradeOrder&amp;v=1</summary>
        /// <param name="openTradeOrderParam">内部商城下单参数</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCaigouMallCreateTradeOrderResult> AlibabaCaigouMallCreateTradeOrderAsync(AlibabaCaigouMallOpenTradeOrderParam openTradeOrderParam, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>查询所有的erp类目
        /// 查询所有的erp类目
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.category.queryAllErpCategory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.category.queryAllErpCategory&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response29 AlibabaCaigouCategoryQueryAllErpCategory();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询所有的erp类目
        /// 查询所有的erp类目
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.category.queryAllErpCategory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.category.queryAllErpCategory&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response29> AlibabaCaigouCategoryQueryAllErpCategoryAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>供应商信息导入
        /// 供应商信息导入.(供应商memberID、公司名、固话、邮箱、手机至少填写一项)
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.supplier.import-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.supplier.import&amp;v=1</summary>
        /// <param name="list">参数类型是json类型的list字符串.包含字段:
        /// &amp;quot;buyerMemberId&amp;quot; 采购商memberId
        /// &amp;quot;supplierCompanyName&amp;quot; 供应商公司名
        /// &amp;quot;supplierEmail&amp;quot; 供应商电子邮箱
        /// &amp;quot;supplierMemberId&amp;quot; 供应商memberId
        /// &amp;quot;supplierMobile&amp;quot; 供应商手机
        /// &amp;quot;supplierPhone&amp;quot; 供应商电话
        /// &amp;quot;externalId&amp;quot; (必填)
        /// 
        /// 其中供应商memberID、公司名、固话、邮箱、手机至少填写一项</param>
        /// <returns>返回导入失败的数据.全部成功返回的list长度为0.
        /// 外部系统对应当前supplierMember的唯一id. 比如:采购商A.导入一条供应商B的数据.externalId表示供应商B在采购商A所属的外部系统中定义的唯一Id.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response30 CaigouApiSupplierImport(System.Collections.Generic.IEnumerable<string> list);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>供应商信息导入
        /// 供应商信息导入.(供应商memberID、公司名、固话、邮箱、手机至少填写一项)
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.supplier.import-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.supplier.import&amp;v=1</summary>
        /// <param name="list">参数类型是json类型的list字符串.包含字段:
        /// &amp;quot;buyerMemberId&amp;quot; 采购商memberId
        /// &amp;quot;supplierCompanyName&amp;quot; 供应商公司名
        /// &amp;quot;supplierEmail&amp;quot; 供应商电子邮箱
        /// &amp;quot;supplierMemberId&amp;quot; 供应商memberId
        /// &amp;quot;supplierMobile&amp;quot; 供应商手机
        /// &amp;quot;supplierPhone&amp;quot; 供应商电话
        /// &amp;quot;externalId&amp;quot; (必填)
        /// 
        /// 其中供应商memberID、公司名、固话、邮箱、手机至少填写一项</param>
        /// <returns>返回导入失败的数据.全部成功返回的list长度为0.
        /// 外部系统对应当前supplierMember的唯一id. 比如:采购商A.导入一条供应商B的数据.externalId表示供应商B在采购商A所属的外部系统中定义的唯一Id.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response30> CaigouApiSupplierImportAsync(System.Collections.Generic.IEnumerable<string> list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>根据prId查询询价单列表
        /// 根据prId查询询价单列表（限制：返回条数100，否则舍弃）
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.buyOffer.queryBuyOfferByPrId-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.buyOffer.queryBuyOfferByPrId&amp;v=1</summary>
        /// <param name="prId">外部系统prId</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// ISV.DATA_NOT_EXIST	- 数据不存在
        /// ISP.SYSTEM_ERROR	- 系统出错(请联系开发人员排查)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response31 CaigouApiBuyOfferQueryBuyOfferByPrId(string prId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据prId查询询价单列表
        /// 根据prId查询询价单列表（限制：返回条数100，否则舍弃）
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.buyOffer.queryBuyOfferByPrId-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.buyOffer.queryBuyOfferByPrId&amp;v=1</summary>
        /// <param name="prId">外部系统prId</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// ISV.DATA_NOT_EXIST	- 数据不存在
        /// ISP.SYSTEM_ERROR	- 系统出错(请联系开发人员排查)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response31> CaigouApiBuyOfferQueryBuyOfferByPrIdAsync(string prId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>根据id删除产品
        /// 根据id删除产品
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.product.deleteProductById-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.product.deleteProductById&amp;v=1</summary>
        /// <param name="productId">产品在1688所属id</param>
        /// <returns>删除结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response32 CaigouApiProductDeleteProductById(long productId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据id删除产品
        /// 根据id删除产品
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.product.deleteProductById-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.product.deleteProductById&amp;v=1</summary>
        /// <param name="productId">产品在1688所属id</param>
        /// <returns>删除结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response32> CaigouApiProductDeleteProductByIdAsync(long productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>更新产品信息
        /// 更新产品信息，根据产品编号更新产品，操作人员编号需要绑定后才能操作
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.product.modifyProduct-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.product.modifyProduct&amp;v=1</summary>
        /// <param name="productId">产品在1688的id</param>
        /// <param name="productCode">产品编号</param>
        /// <param name="title">产品名</param>
        /// <param name="unit">单位</param>
        /// <param name="remark">补充信息</param>
        /// <param name="productAttributes">产品属性列表</param>
        /// <param name="instruction">产品说明，副标题</param>
        /// <param name="picUrlList">产品图片，最多10张，需要调用图片上传接口</param>
        /// <param name="attachmentList">产品附件，最多3个附件，需调用附件上传接口</param>
        /// <param name="referencePrice">产品参考价(单位是分)</param>
        /// <param name="userCategoryId">用户在1688的自定义类目id，必须是叶子类目id</param>
        /// <returns>操作结果返回 ErrorCode 的错误信息
        /// ISV.INVALID_PARAM	- 参数不合法
        /// ISV.SYSTEM_ERROR	- 系统出错
        /// ISV.DATA_NOT_EXIST	- 您要修改的数据不存在(请检查productId是否是1688的主键，再检查该产品是否已被删除)
        /// ISV.NO_PERMISSION	- 无权限修改(请检查该产品归属人是否是您的账号)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response28 CaigouApiProductModifyProduct(long productId, string productCode = null, string title = null, string unit = null, string remark = null, System.Collections.Generic.IEnumerable<string> productAttributes = null, string instruction = null, System.Collections.Generic.IEnumerable<string> picUrlList = null, System.Collections.Generic.IEnumerable<string> attachmentList = null, long? referencePrice = null, long? userCategoryId = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新产品信息
        /// 更新产品信息，根据产品编号更新产品，操作人员编号需要绑定后才能操作
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.product.modifyProduct-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.product.modifyProduct&amp;v=1</summary>
        /// <param name="productId">产品在1688的id</param>
        /// <param name="productCode">产品编号</param>
        /// <param name="title">产品名</param>
        /// <param name="unit">单位</param>
        /// <param name="remark">补充信息</param>
        /// <param name="productAttributes">产品属性列表</param>
        /// <param name="instruction">产品说明，副标题</param>
        /// <param name="picUrlList">产品图片，最多10张，需要调用图片上传接口</param>
        /// <param name="attachmentList">产品附件，最多3个附件，需调用附件上传接口</param>
        /// <param name="referencePrice">产品参考价(单位是分)</param>
        /// <param name="userCategoryId">用户在1688的自定义类目id，必须是叶子类目id</param>
        /// <returns>操作结果返回 ErrorCode 的错误信息
        /// ISV.INVALID_PARAM	- 参数不合法
        /// ISV.SYSTEM_ERROR	- 系统出错
        /// ISV.DATA_NOT_EXIST	- 您要修改的数据不存在(请检查productId是否是1688的主键，再检查该产品是否已被删除)
        /// ISV.NO_PERMISSION	- 无权限修改(请检查该产品归属人是否是您的账号)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response28> CaigouApiProductModifyProductAsync(long productId, string productCode = null, string title = null, string unit = null, string remark = null, System.Collections.Generic.IEnumerable<string> productAttributes = null, string instruction = null, System.Collections.Generic.IEnumerable<string> picUrlList = null, System.Collections.Generic.IEnumerable<string> attachmentList = null, long? referencePrice = null, long? userCategoryId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>根据请购单ID获取请购单详情
        /// 根据请购单ID获取请购单详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.requisition.getDetail-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.requisition.getDetail&amp;v=1</summary>
        /// <param name="requisitionId">请购单ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCaigouRequisitionGetDetailResult AlibabaCaigouRequisitionGetDetail(long requisitionId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据请购单ID获取请购单详情
        /// 根据请购单ID获取请购单详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.requisition.getDetail-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.requisition.getDetail&amp;v=1</summary>
        /// <param name="requisitionId">请购单ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCaigouRequisitionGetDetailResult> AlibabaCaigouRequisitionGetDetailAsync(long requisitionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>采购商获取报价详情列表
        /// 通过询价单ID获取下面报价单详情列表。该列表中的报价单为审核通过的且是采购商未删除的报价单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.quotation.buyerGetQuotationListByBuyOfferId-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.quotation.buyerGetQuotationListByBuyOfferId&amp;v=1</summary>
        /// <param name="buyofferId">询价单id</param>
        /// <returns>报价返回 ErrorCode 的错误信息
        /// ISV.INVALID_PARAM	- 参数错误(isv端确认参数是否传输正确)
        /// ISP.SYSTEM_ERROR	- 系统错误(isv联系isp进行问题排查)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response33 CaigouApiQuotationBuyerGetQuotationListByBuyOfferId(long buyofferId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>采购商获取报价详情列表
        /// 通过询价单ID获取下面报价单详情列表。该列表中的报价单为审核通过的且是采购商未删除的报价单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.quotation.buyerGetQuotationListByBuyOfferId-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.quotation.buyerGetQuotationListByBuyOfferId&amp;v=1</summary>
        /// <param name="buyofferId">询价单id</param>
        /// <returns>报价返回 ErrorCode 的错误信息
        /// ISV.INVALID_PARAM	- 参数错误(isv端确认参数是否传输正确)
        /// ISP.SYSTEM_ERROR	- 系统错误(isv联系isp进行问题排查)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response33> CaigouApiQuotationBuyerGetQuotationListByBuyOfferIdAsync(long buyofferId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>发布询价单
        /// 发布询价单(系统对接)
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.buyoffer.postBuyoffer-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.buyoffer.postBuyoffer&amp;v=1</summary>
        /// <param name="subject">询价单标题【不能超过80个字符】</param>
        /// <param name="items">询价单清单。每个item项包括：subject(采购单条目的标题,String类型,不能为空，最大字符长度300), brandName(品牌,String类型,最大字符长度128), unit(单位,String类型,不能为空，最大字符长度10),purchaseAmount(采购数量,Long类型，不能为空)，productCode(对应的产品的code,String类型，最大字符长度64)，prItemId（pr的item项目的行号，string类型，最大长度为64），desc（询价项目的描述，String类型，最大字符长度2000），attachmentIdList（附件id列表，附件的id来源于上传附件接口）</param>
        /// <param name="contact">联系人【不能超过20个字符】</param>
        /// <param name="phone">手机【不能超过40个字符】</param>
        /// <param name="gmtQuotationExpire">报价截止日期</param>
        /// <param name="subUserId">买家子账号id.这个id同创建子账号接口的返回值。如果不创建子账号，可以不传值！</param>
        /// <param name="description">询价单描述【不能超过10000个字符】</param>
        /// <param name="receiveAddressProvince">收货地省(国标)【6个字符】</param>
        /// <param name="receiveAddressCity">收货地市(国标)【6个字符】</param>
        /// <param name="receiveAddressCounty">收货地区(国标)【6个字符】</param>
        /// <param name="expectedSupplierAreas">供应商要求：供应商所在地要求(国标)</param>
        /// <param name="invoiceRequirement">供应商要求：需要的发票类型.ordinary(普通发票),vat(增值税发票),none(无需发票)</param>
        /// <param name="supportAlipayGuaranteeTrade">供应商要求：是否支持支付宝担保交易</param>
        /// <param name="certificateIds">供应商证书要求。具体值如下：1(营业执照), 2(税务登记证), 3(组织机构代码证), 12(国际和国内的产品认证证书), 37(环境管理体系认证证书), 38(企业质量管理体系认证证书), 4(外商投资企业批准证书(外资企业必须)), 103(其他), 400(税务登记证副本（加盖增值税一般纳税人印章）), 5(食品生产许可证 ), 6(酒类生产许可证), 7(化妆品生产许可证), 8(药品生产许可证), 25(安全生产许可证 ), 26(医疗器械生产企业许可证), 27(制造计量器具许可证), 28(特种设备制造许可证（包括压力容器）), 29(建筑业企业资质证书), 30(排放污染物许可证 ), 31(烟草专卖许可证), 32(药品经营许可证), 33(危险化学品经营许可证), 34(烟花爆竹零售经营许可), 35(食品经营许可证), 36(餐饮服务许可证), 39(其他), 101(道路运输经营许可证), 102(印刷经营许可证), 201(食品流通许可证), 202(食品卫生许可证), 203(酒类流通备案登记表), 204(酒类商品批发许可证), 205(酒类商品零售许可证), 206(酒类产销许可证), 207(进口货物报关单), 208(商品出入境检验检疫合格证明), 209(出入境检验检疫卫生证书), 9(产品质量监督检查证书), 10(品牌授权书(如驰名商标、行业知名品牌)), 11(区域代理授权书), 16(纺织品生态标签发明专利、外观设计专利、实用新型外观设计类证书), 17(商标注册证), 19(其他), 20(荣誉证书，如消费者协会荣誉证书、行业协会荣誉证书、重合同守信用证书), 21(银行资信类证书、银行评级证明), 22(开户许可证), 23(公司证明、人事证明、纳税证明)</param>
        /// <param name="otherCertificateNames">供应商要求：其他证书名称【不能超过165个字符】</param>
        /// <param name="regCapital">供应商要求：注册资金。单位万元</param>
        /// <param name="prId">外部系统的采购需求的id （prId）【不要大于64个英文或数字字符】</param>
        /// <param name="attachmentIdList">附件id的列表。附件id来源于上传附件的接口。</param>
        /// <param name="visibleAfterEndQuote">未到截止日期不可查看报价</param>
        /// <param name="includeTax">需要包含税价</param>
        /// <param name="quoteHasPostFee">报价需要包含运费价</param>
        /// <param name="allowPartOffer">允许对询价单商品部分报价</param>
        /// <param name="open">公开询价单</param>
        /// <param name="openToPortal">公开到portal</param>
        /// <param name="processTemplateCode">交易方式</param>
        /// <param name="transToolType">支付方式</param>
        /// <param name="supplierAreas">经营地址</param>
        /// <param name="needSignAgreement">是否需要签署保密协议</param>
        /// <param name="subBizType">采购类型：
        /// singlepurchase:单次采购
        /// priceprotocol:长期采购</param>
        /// <param name="sourceMethodType">询价方式：
        /// open：对1688公开征集供应商
        /// allmysupplier：对所有合格供应商公开询价
        /// selectedmysupplier：只允许我邀请的供应商报价</param>
        /// <param name="supplierMemberIds">邀请供应商</param>
        /// <param name="gmtProtocolStart">价格有效期开始</param>
        /// <param name="gmtProtocolEnd">价格有效期结束</param>
        /// <param name="receiveStreetAddress">收货街道地址</param>
        /// <param name="onlineShoppingDesc">网购文件描述说明</param>
        /// <param name="onlineShoppingAttachList">网购文件附件附件id的列表id来源于上传附件的接口。</param>
        /// <param name="gmtReceiveBeginDate">期望收货开始时间</param>
        /// <param name="gmtReceive">期望收货结束日期</param>
        /// <param name="supplierLoginIds">供应商loginIds</param>
        /// <param name="purchaseNoteType">采购单类型</param>
        /// <param name="deliveryPeriod">交货期</param>
        /// <param name="balanceDateType">账期类型，是否指定结算日</param>
        /// <param name="balanceDateValue">结算日期或结算周期</param>
        /// <param name="allmysupplier">是否邀请所有合格供应商</param>
        /// <param name="selectedmysupplier">是否指定供应商</param>
        /// <param name="openContact2All">是否公开联系方式</param>
        /// <param name="needAudit4OpenContact">联系方式是否需要授权</param>
        /// <param name="openContactBeforeQuote">报价前是否公开联系方式</param>
        /// <param name="invoiceSubType">专票子类型 self 自行开票 agent 税务代开</param>
        /// <param name="supplierCanModifyQuantity">供应商报价可改数量</param>
        /// <param name="supplierCantModifyProtocalDate">供应商不可改价格有效期</param>
        /// <returns>发布成功的询价单id。如果发布失败则为空，具体的看错误码返回 ErrorCode 的错误信息
        /// ISV.EXCEED_BUYOFFER_LIMIT_AMOUNT	- 超过每天发布询价单数目
        /// ISV.INVALID_PARAM	- 非法参数
        /// ISV.OPERATION_PRIVILEGE_ILLEGAL	- 没有发布询价单的权限
        /// ISV.USER_IN_BLACK_LIST	- 该会员被举报，加入了黑名单
        /// ISP.SYSTEM_ERROR	- 系统错误(请联系采购平台)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response34 CaigouApiBuyofferPostBuyoffer(string subject, System.Collections.Generic.IEnumerable<string> items, string contact, string phone, System.DateTimeOffset gmtQuotationExpire, long? subUserId = null, string description = null, string receiveAddressProvince = null, string receiveAddressCity = null, string receiveAddressCounty = null, System.Collections.Generic.IEnumerable<string> expectedSupplierAreas = null, string invoiceRequirement = null, bool? supportAlipayGuaranteeTrade = null, System.Collections.Generic.IEnumerable<string> certificateIds = null, System.Collections.Generic.IEnumerable<string> otherCertificateNames = null, long? regCapital = null, string prId = null, System.Collections.Generic.IEnumerable<string> attachmentIdList = null, bool? visibleAfterEndQuote = null, bool? includeTax = null, bool? quoteHasPostFee = null, bool? allowPartOffer = null, bool? open = null, bool? openToPortal = null, string processTemplateCode = null, string transToolType = null, System.Collections.Generic.IEnumerable<string> supplierAreas = null, string needSignAgreement = null, string subBizType = null, string sourceMethodType = null, System.Collections.Generic.IEnumerable<string> supplierMemberIds = null, System.DateTimeOffset? gmtProtocolStart = null, System.DateTimeOffset? gmtProtocolEnd = null, string receiveStreetAddress = null, string onlineShoppingDesc = null, System.Collections.Generic.IEnumerable<string> onlineShoppingAttachList = null, System.DateTimeOffset? gmtReceiveBeginDate = null, System.DateTimeOffset? gmtReceive = null, System.Collections.Generic.IEnumerable<string> supplierLoginIds = null, string purchaseNoteType = null, int? deliveryPeriod = null, string balanceDateType = null, string balanceDateValue = null, bool? allmysupplier = null, bool? selectedmysupplier = null, bool? openContact2All = null, bool? needAudit4OpenContact = null, bool? openContactBeforeQuote = null, string invoiceSubType = null, bool? supplierCanModifyQuantity = null, bool? supplierCantModifyProtocalDate = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>发布询价单
        /// 发布询价单(系统对接)
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.buyoffer.postBuyoffer-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.buyoffer.postBuyoffer&amp;v=1</summary>
        /// <param name="subject">询价单标题【不能超过80个字符】</param>
        /// <param name="items">询价单清单。每个item项包括：subject(采购单条目的标题,String类型,不能为空，最大字符长度300), brandName(品牌,String类型,最大字符长度128), unit(单位,String类型,不能为空，最大字符长度10),purchaseAmount(采购数量,Long类型，不能为空)，productCode(对应的产品的code,String类型，最大字符长度64)，prItemId（pr的item项目的行号，string类型，最大长度为64），desc（询价项目的描述，String类型，最大字符长度2000），attachmentIdList（附件id列表，附件的id来源于上传附件接口）</param>
        /// <param name="contact">联系人【不能超过20个字符】</param>
        /// <param name="phone">手机【不能超过40个字符】</param>
        /// <param name="gmtQuotationExpire">报价截止日期</param>
        /// <param name="subUserId">买家子账号id.这个id同创建子账号接口的返回值。如果不创建子账号，可以不传值！</param>
        /// <param name="description">询价单描述【不能超过10000个字符】</param>
        /// <param name="receiveAddressProvince">收货地省(国标)【6个字符】</param>
        /// <param name="receiveAddressCity">收货地市(国标)【6个字符】</param>
        /// <param name="receiveAddressCounty">收货地区(国标)【6个字符】</param>
        /// <param name="expectedSupplierAreas">供应商要求：供应商所在地要求(国标)</param>
        /// <param name="invoiceRequirement">供应商要求：需要的发票类型.ordinary(普通发票),vat(增值税发票),none(无需发票)</param>
        /// <param name="supportAlipayGuaranteeTrade">供应商要求：是否支持支付宝担保交易</param>
        /// <param name="certificateIds">供应商证书要求。具体值如下：1(营业执照), 2(税务登记证), 3(组织机构代码证), 12(国际和国内的产品认证证书), 37(环境管理体系认证证书), 38(企业质量管理体系认证证书), 4(外商投资企业批准证书(外资企业必须)), 103(其他), 400(税务登记证副本（加盖增值税一般纳税人印章）), 5(食品生产许可证 ), 6(酒类生产许可证), 7(化妆品生产许可证), 8(药品生产许可证), 25(安全生产许可证 ), 26(医疗器械生产企业许可证), 27(制造计量器具许可证), 28(特种设备制造许可证（包括压力容器）), 29(建筑业企业资质证书), 30(排放污染物许可证 ), 31(烟草专卖许可证), 32(药品经营许可证), 33(危险化学品经营许可证), 34(烟花爆竹零售经营许可), 35(食品经营许可证), 36(餐饮服务许可证), 39(其他), 101(道路运输经营许可证), 102(印刷经营许可证), 201(食品流通许可证), 202(食品卫生许可证), 203(酒类流通备案登记表), 204(酒类商品批发许可证), 205(酒类商品零售许可证), 206(酒类产销许可证), 207(进口货物报关单), 208(商品出入境检验检疫合格证明), 209(出入境检验检疫卫生证书), 9(产品质量监督检查证书), 10(品牌授权书(如驰名商标、行业知名品牌)), 11(区域代理授权书), 16(纺织品生态标签发明专利、外观设计专利、实用新型外观设计类证书), 17(商标注册证), 19(其他), 20(荣誉证书，如消费者协会荣誉证书、行业协会荣誉证书、重合同守信用证书), 21(银行资信类证书、银行评级证明), 22(开户许可证), 23(公司证明、人事证明、纳税证明)</param>
        /// <param name="otherCertificateNames">供应商要求：其他证书名称【不能超过165个字符】</param>
        /// <param name="regCapital">供应商要求：注册资金。单位万元</param>
        /// <param name="prId">外部系统的采购需求的id （prId）【不要大于64个英文或数字字符】</param>
        /// <param name="attachmentIdList">附件id的列表。附件id来源于上传附件的接口。</param>
        /// <param name="visibleAfterEndQuote">未到截止日期不可查看报价</param>
        /// <param name="includeTax">需要包含税价</param>
        /// <param name="quoteHasPostFee">报价需要包含运费价</param>
        /// <param name="allowPartOffer">允许对询价单商品部分报价</param>
        /// <param name="open">公开询价单</param>
        /// <param name="openToPortal">公开到portal</param>
        /// <param name="processTemplateCode">交易方式</param>
        /// <param name="transToolType">支付方式</param>
        /// <param name="supplierAreas">经营地址</param>
        /// <param name="needSignAgreement">是否需要签署保密协议</param>
        /// <param name="subBizType">采购类型：
        /// singlepurchase:单次采购
        /// priceprotocol:长期采购</param>
        /// <param name="sourceMethodType">询价方式：
        /// open：对1688公开征集供应商
        /// allmysupplier：对所有合格供应商公开询价
        /// selectedmysupplier：只允许我邀请的供应商报价</param>
        /// <param name="supplierMemberIds">邀请供应商</param>
        /// <param name="gmtProtocolStart">价格有效期开始</param>
        /// <param name="gmtProtocolEnd">价格有效期结束</param>
        /// <param name="receiveStreetAddress">收货街道地址</param>
        /// <param name="onlineShoppingDesc">网购文件描述说明</param>
        /// <param name="onlineShoppingAttachList">网购文件附件附件id的列表id来源于上传附件的接口。</param>
        /// <param name="gmtReceiveBeginDate">期望收货开始时间</param>
        /// <param name="gmtReceive">期望收货结束日期</param>
        /// <param name="supplierLoginIds">供应商loginIds</param>
        /// <param name="purchaseNoteType">采购单类型</param>
        /// <param name="deliveryPeriod">交货期</param>
        /// <param name="balanceDateType">账期类型，是否指定结算日</param>
        /// <param name="balanceDateValue">结算日期或结算周期</param>
        /// <param name="allmysupplier">是否邀请所有合格供应商</param>
        /// <param name="selectedmysupplier">是否指定供应商</param>
        /// <param name="openContact2All">是否公开联系方式</param>
        /// <param name="needAudit4OpenContact">联系方式是否需要授权</param>
        /// <param name="openContactBeforeQuote">报价前是否公开联系方式</param>
        /// <param name="invoiceSubType">专票子类型 self 自行开票 agent 税务代开</param>
        /// <param name="supplierCanModifyQuantity">供应商报价可改数量</param>
        /// <param name="supplierCantModifyProtocalDate">供应商不可改价格有效期</param>
        /// <returns>发布成功的询价单id。如果发布失败则为空，具体的看错误码返回 ErrorCode 的错误信息
        /// ISV.EXCEED_BUYOFFER_LIMIT_AMOUNT	- 超过每天发布询价单数目
        /// ISV.INVALID_PARAM	- 非法参数
        /// ISV.OPERATION_PRIVILEGE_ILLEGAL	- 没有发布询价单的权限
        /// ISV.USER_IN_BLACK_LIST	- 该会员被举报，加入了黑名单
        /// ISP.SYSTEM_ERROR	- 系统错误(请联系采购平台)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response34> CaigouApiBuyofferPostBuyofferAsync(string subject, System.Collections.Generic.IEnumerable<string> items, string contact, string phone, System.DateTimeOffset gmtQuotationExpire, long? subUserId = null, string description = null, string receiveAddressProvince = null, string receiveAddressCity = null, string receiveAddressCounty = null, System.Collections.Generic.IEnumerable<string> expectedSupplierAreas = null, string invoiceRequirement = null, bool? supportAlipayGuaranteeTrade = null, System.Collections.Generic.IEnumerable<string> certificateIds = null, System.Collections.Generic.IEnumerable<string> otherCertificateNames = null, long? regCapital = null, string prId = null, System.Collections.Generic.IEnumerable<string> attachmentIdList = null, bool? visibleAfterEndQuote = null, bool? includeTax = null, bool? quoteHasPostFee = null, bool? allowPartOffer = null, bool? open = null, bool? openToPortal = null, string processTemplateCode = null, string transToolType = null, System.Collections.Generic.IEnumerable<string> supplierAreas = null, string needSignAgreement = null, string subBizType = null, string sourceMethodType = null, System.Collections.Generic.IEnumerable<string> supplierMemberIds = null, System.DateTimeOffset? gmtProtocolStart = null, System.DateTimeOffset? gmtProtocolEnd = null, string receiveStreetAddress = null, string onlineShoppingDesc = null, System.Collections.Generic.IEnumerable<string> onlineShoppingAttachList = null, System.DateTimeOffset? gmtReceiveBeginDate = null, System.DateTimeOffset? gmtReceive = null, System.Collections.Generic.IEnumerable<string> supplierLoginIds = null, string purchaseNoteType = null, int? deliveryPeriod = null, string balanceDateType = null, string balanceDateValue = null, bool? allmysupplier = null, bool? selectedmysupplier = null, bool? openContact2All = null, bool? needAudit4OpenContact = null, bool? openContactBeforeQuote = null, string invoiceSubType = null, bool? supplierCanModifyQuantity = null, bool? supplierCantModifyProtocalDate = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>上传图片
        /// 上传图片
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.image.upload-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.image.upload&amp;v=1</summary>
        /// <param name="name">图片名称，最长30个字符,如果超长则截取前30个字符.</param>
        /// <param name="fileBytes">图片的二进制数据，向服务端提交文件即可 (fileBytes这个参数不能签名)。使用 enctype=&amp;quot;multipart/form-data&amp;quot; 的POST文件上传方式提交数据，最大只支持5M的文件图片</param>
        /// <param name="description">图片描述，最长2000个字符,如果超长则截取前2000个字符</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// PARAM_MISS	- 参数丢失(确认参数传送按照要求)
        /// NOT_SUPPORT_SOURCE	- 上传来源不支持(联系管理员)
        /// FILE_NOT_SUPPORT	- 文件格式不支持(该文件不支持上传)
        /// SYS_ERROR	- 系统错误(联系管理员)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        CaigouApiImageUploadResult CaigouApiImageUpload(string name, byte[] fileBytes, string description = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>上传图片
        /// 上传图片
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.image.upload-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.image.upload&amp;v=1</summary>
        /// <param name="name">图片名称，最长30个字符,如果超长则截取前30个字符.</param>
        /// <param name="fileBytes">图片的二进制数据，向服务端提交文件即可 (fileBytes这个参数不能签名)。使用 enctype=&amp;quot;multipart/form-data&amp;quot; 的POST文件上传方式提交数据，最大只支持5M的文件图片</param>
        /// <param name="description">图片描述，最长2000个字符,如果超长则截取前2000个字符</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// PARAM_MISS	- 参数丢失(确认参数传送按照要求)
        /// NOT_SUPPORT_SOURCE	- 上传来源不支持(联系管理员)
        /// FILE_NOT_SUPPORT	- 文件格式不支持(该文件不支持上传)
        /// SYS_ERROR	- 系统错误(联系管理员)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaigouApiImageUploadResult> CaigouApiImageUploadAsync(string name, byte[] fileBytes, string description = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>创建商城请购单
        /// 创建商城请购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.caigou.biz.api.cooper.service.OpenRequisitionService.createMallRequisition-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.caigou.biz.api.cooper.service.OpenRequisitionService.createMallRequisition&amp;v=1</summary>
        /// <param name="openCreateRequisitionParam">参考文档</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        ComAlibabaCaigouBizApiCooperServiceOpenRequisitionServiceCreateMallRequisitionResult ComAlibabaCaigouBizApiCooperServiceOpenRequisitionServiceCreateMallRequisition(AlibabaCaigouBizApiCooperParamOpenCreateRequisitionParam openCreateRequisitionParam = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建商城请购单
        /// 创建商城请购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.caigou.biz.api.cooper.service.OpenRequisitionService.createMallRequisition-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.caigou.biz.api.cooper.service.OpenRequisitionService.createMallRequisition&amp;v=1</summary>
        /// <param name="openCreateRequisitionParam">参考文档</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComAlibabaCaigouBizApiCooperServiceOpenRequisitionServiceCreateMallRequisitionResult> ComAlibabaCaigouBizApiCooperServiceOpenRequisitionServiceCreateMallRequisitionAsync(AlibabaCaigouBizApiCooperParamOpenCreateRequisitionParam openCreateRequisitionParam = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>内部商城根据商品ID获取商品详情
        /// 内部商城根据商品ID获取商品详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.mall.getMallGoods-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.mall.getMallGoods&amp;v=1</summary>
        /// <param name="goodsId">商品ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCaigouMallGetMallGoodsResult AlibabaCaigouMallGetMallGoods(long goodsId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>内部商城根据商品ID获取商品详情
        /// 内部商城根据商品ID获取商品详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.mall.getMallGoods-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.mall.getMallGoods&amp;v=1</summary>
        /// <param name="goodsId">商品ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCaigouMallGetMallGoodsResult> AlibabaCaigouMallGetMallGoodsAsync(long goodsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>查询唯一物料工厂
        /// 查询唯一物料工厂
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.getProductFactory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.getProductFactory&amp;v=1</summary>
        /// <param name="systemDomainCode">系统域编码</param>
        /// <param name="productCode">物料编码</param>
        /// <param name="factoryCode">工厂编码</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        CnAlibabaOpenAlibabaCaigouProductGetProductFactoryAlibabaCaigouProductResultData AlibabaCaigouProductGetProductFactory(string systemDomainCode, string productCode, string factoryCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询唯一物料工厂
        /// 查询唯一物料工厂
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.getProductFactory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.getProductFactory&amp;v=1</summary>
        /// <param name="systemDomainCode">系统域编码</param>
        /// <param name="productCode">物料编码</param>
        /// <param name="factoryCode">工厂编码</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CnAlibabaOpenAlibabaCaigouProductGetProductFactoryAlibabaCaigouProductResultData> AlibabaCaigouProductGetProductFactoryAsync(string systemDomainCode, string productCode, string factoryCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>创建请购单
        /// 创建请购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.caigou.biz.api.cooper.service.OpenRequisitionService-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.caigou.biz.api.cooper.service.OpenRequisitionService&amp;v=1</summary>
        /// <param name="openCreateRequisitionParam">创建请购单参数模型</param>
        /// <returns>返回模型返回 ErrorCode 的错误信息
        /// 参数错误	- invalidParam(根据对接文档检查参数)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCaigouBizApiCommonModelResultData ComAlibabaCaigouBizApiCooperServiceOpenRequisitionService(CnAlibabaOpenComAlibabaCaigouBizApiCooperServiceOpenRequisitionServiceAlibabaCaigouBizApiCooperParamOpenCreateRequisitionParam openCreateRequisitionParam = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建请购单
        /// 创建请购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.caigou.biz.api.cooper.service.OpenRequisitionService-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.caigou.biz.api.cooper.service.OpenRequisitionService&amp;v=1</summary>
        /// <param name="openCreateRequisitionParam">创建请购单参数模型</param>
        /// <returns>返回模型返回 ErrorCode 的错误信息
        /// 参数错误	- invalidParam(根据对接文档检查参数)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCaigouBizApiCommonModelResultData> ComAlibabaCaigouBizApiCooperServiceOpenRequisitionServiceAsync(CnAlibabaOpenComAlibabaCaigouBizApiCooperServiceOpenRequisitionServiceAlibabaCaigouBizApiCooperParamOpenCreateRequisitionParam openCreateRequisitionParam = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>查询所有自定义类目
        /// 查询所有d 自定义类目
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.category.queryAll-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.category.queryAll&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response29 CaigouApiCategoryQueryAll();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询所有自定义类目
        /// 查询所有d 自定义类目
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.category.queryAll-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.category.queryAll&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response29> CaigouApiCategoryQueryAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>采购-买家查询结算单
        /// 采购-买家查询结算单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.procurement.BuyerSettlementService.querySettlementNote-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.procurement.BuyerSettlementService.querySettlementNote&amp;v=1</summary>
        /// <param name="settlementNoteId">结算单ID</param>
        /// <param name="needEntryExtendsData">是否需要扩展数据</param>
        /// <returns>Result返回 ErrorCode 的错误信息
        /// invalid_param	- 无效参数(检查参数)
        /// no_permission	- 无权限(检查是否有权限操作该单)
        /// system_error	- 系统错误(联系服务提供方)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        CnAlibabaOpenComAlibabaProcurementBuyerSettlementServiceQuerySettlementNoteAlibabaProcurementApiIntegrationResultResultData ComAlibabaProcurementBuyerSettlementServiceQuerySettlementNote(long settlementNoteId, bool? needEntryExtendsData = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>采购-买家查询结算单
        /// 采购-买家查询结算单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.procurement.BuyerSettlementService.querySettlementNote-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.procurement.BuyerSettlementService.querySettlementNote&amp;v=1</summary>
        /// <param name="settlementNoteId">结算单ID</param>
        /// <param name="needEntryExtendsData">是否需要扩展数据</param>
        /// <returns>Result返回 ErrorCode 的错误信息
        /// invalid_param	- 无效参数(检查参数)
        /// no_permission	- 无权限(检查是否有权限操作该单)
        /// system_error	- 系统错误(联系服务提供方)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CnAlibabaOpenComAlibabaProcurementBuyerSettlementServiceQuerySettlementNoteAlibabaProcurementApiIntegrationResultResultData> ComAlibabaProcurementBuyerSettlementServiceQuerySettlementNoteAsync(long settlementNoteId, bool? needEntryExtendsData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取采购单详情
        /// 根据ID获取采购单详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.getPurcharseOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.getPurcharseOrder&amp;v=1</summary>
        /// <param name="purchaseOrderId">采购单ID</param>
        /// <returns>返回值</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCaigousharedApiCommonModelResultData AlibabaCaigouGetPurcharseOrder(long purchaseOrderId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取采购单详情
        /// 根据ID获取采购单详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.getPurcharseOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.getPurcharseOrder&amp;v=1</summary>
        /// <param name="purchaseOrderId">采购单ID</param>
        /// <returns>返回值</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCaigousharedApiCommonModelResultData> AlibabaCaigouGetPurcharseOrderAsync(long purchaseOrderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>查询式获取失败的消息列表
        /// 查询式获取发送的消息列表，获取的消息不会自动确认，需要调用方手动调用确认api来确认消费状态。需注意，确认后，会影响分页返回的数据
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:push.query.messageList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=push.query.messageList&amp;v=1</summary>
        /// <param name="createStartTime">消息创建时间查找开始范围</param>
        /// <param name="createEndTime">消息创建时间查找结束范围</param>
        /// <param name="page">当前数据页，默认为1</param>
        /// <param name="pageSize">每次分页取的数据量，范围20-200，默认20</param>
        /// <returns>分页数据</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response35 PushQueryMessageList(System.DateTimeOffset? createStartTime = null, System.DateTimeOffset? createEndTime = null, int? page = null, int? pageSize = null, string type = null, string userInfo = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询式获取失败的消息列表
        /// 查询式获取发送的消息列表，获取的消息不会自动确认，需要调用方手动调用确认api来确认消费状态。需注意，确认后，会影响分页返回的数据
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:push.query.messageList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=push.query.messageList&amp;v=1</summary>
        /// <param name="createStartTime">消息创建时间查找开始范围</param>
        /// <param name="createEndTime">消息创建时间查找结束范围</param>
        /// <param name="page">当前数据页，默认为1</param>
        /// <param name="pageSize">每次分页取的数据量，范围20-200，默认20</param>
        /// <returns>分页数据</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response35> PushQueryMessageListAsync(System.DateTimeOffset? createStartTime = null, System.DateTimeOffset? createEndTime = null, int? page = null, int? pageSize = null, string type = null, string userInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>根据id获取类目信息
        /// 根据id获取类目信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.category.getById-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.category.getById&amp;v=1</summary>
        /// <param name="categoryId">类目在1688上的id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        CaigouDomainCategoryTopCategory CaigouApiCategoryGetById(long categoryId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据id获取类目信息
        /// 根据id获取类目信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.category.getById-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.category.getById&amp;v=1</summary>
        /// <param name="categoryId">类目在1688上的id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaigouDomainCategoryTopCategory> CaigouApiCategoryGetByIdAsync(long categoryId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>批量添加或修改物料工厂(没有则新增，存在则修改)
        /// 批量添加或修改物料工厂(没有则新增，存在则修改)
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.batchAddOrUpdateProductFactory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.batchAddOrUpdateProductFactory&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        CnAlibabaOpenAlibabaCaigouProductBatchAddOrUpdateProductFactoryAlibabaCaigouProductResultData AlibabaCaigouProductBatchAddOrUpdateProductFactory(System.Collections.Generic.IEnumerable<AlibabaCaigouProductAddUpdateProductFactoryParam> addUpdateProductFactoryParams);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>批量添加或修改物料工厂(没有则新增，存在则修改)
        /// 批量添加或修改物料工厂(没有则新增，存在则修改)
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.batchAddOrUpdateProductFactory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.batchAddOrUpdateProductFactory&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CnAlibabaOpenAlibabaCaigouProductBatchAddOrUpdateProductFactoryAlibabaCaigouProductResultData> AlibabaCaigouProductBatchAddOrUpdateProductFactoryAsync(System.Collections.Generic.IEnumerable<AlibabaCaigouProductAddUpdateProductFactoryParam> addUpdateProductFactoryParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>采购执行买家付款
        /// 采购执行买家付款
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.procurement.BuyerPayService.createPayNote-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.procurement.BuyerPayService.createPayNote&amp;v=1</summary>
        /// <param name="param">param</param>
        /// <returns>result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        CnAlibabaOpenComAlibabaProcurementBuyerPayServiceCreatePayNoteAlibabaProcurementApiIntegrationResultResultData ComAlibabaProcurementBuyerPayServiceCreatePayNote(AlibabaProcurementApiSettlementIntegrationParamCreatePayParam param);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>采购执行买家付款
        /// 采购执行买家付款
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.procurement.BuyerPayService.createPayNote-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.procurement.BuyerPayService.createPayNote&amp;v=1</summary>
        /// <param name="param">param</param>
        /// <returns>result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CnAlibabaOpenComAlibabaProcurementBuyerPayServiceCreatePayNoteAlibabaProcurementApiIntegrationResultResultData> ComAlibabaProcurementBuyerPayServiceCreatePayNoteAsync(AlibabaProcurementApiSettlementIntegrationParamCreatePayParam param, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>提交电票接口
        /// 提交电票接口
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.procurement.BuyerETicketService.submitETicket-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.procurement.BuyerETicketService.submitETicket&amp;v=1</summary>
        /// <param name="arg0">入参</param>
        /// <returns>结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaProcurementApiIntegrationResultResultData ComAlibabaProcurementBuyerETicketServiceSubmitETicket(AlibabaProcurementApiSettlementIntegrationParamETicketSubmitIntegrationParam arg0);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>提交电票接口
        /// 提交电票接口
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.procurement.BuyerETicketService.submitETicket-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.procurement.BuyerETicketService.submitETicket&amp;v=1</summary>
        /// <param name="arg0">入参</param>
        /// <returns>结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaProcurementApiIntegrationResultResultData> ComAlibabaProcurementBuyerETicketServiceSubmitETicketAsync(AlibabaProcurementApiSettlementIntegrationParamETicketSubmitIntegrationParam arg0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>采购商上架内部商城商品
        /// 采购商上架内部商城商品
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.buyerPublishMallGoods-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.buyerPublishMallGoods&amp;v=1</summary>
        /// <param name="goodsId">商品id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCaigouBuyerPublishMallGoodsResult AlibabaCaigouBuyerPublishMallGoods(long goodsId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>采购商上架内部商城商品
        /// 采购商上架内部商城商品
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.buyerPublishMallGoods-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.buyerPublishMallGoods&amp;v=1</summary>
        /// <param name="goodsId">商品id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCaigouBuyerPublishMallGoodsResult> AlibabaCaigouBuyerPublishMallGoodsAsync(long goodsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>新增自定义类目
        /// 新增自定义类目，采购使用
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.category.addUserCategory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.category.addUserCategory&amp;v=1</summary>
        /// <param name="categoryList">Json串，包含字段：categoryName：类目名称，categoryId：类目在外部业务的主键编码，parentId：父节点在外部系统的业务编码。</param>
        /// <returns>返回结果为Map，key为外部系统的类目id，value为1688平台的类目id</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response36 CaigouApiCategoryAddUserCategory(System.Collections.Generic.IEnumerable<string> categoryList);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>新增自定义类目
        /// 新增自定义类目，采购使用
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.category.addUserCategory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.category.addUserCategory&amp;v=1</summary>
        /// <param name="categoryList">Json串，包含字段：categoryName：类目名称，categoryId：类目在外部业务的主键编码，parentId：父节点在外部系统的业务编码。</param>
        /// <returns>返回结果为Map，key为外部系统的类目id，value为1688平台的类目id</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response36> CaigouApiCategoryAddUserCategoryAsync(System.Collections.Generic.IEnumerable<string> categoryList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>删除自定义类目
        /// 删除自定义类目，只能删除没有叶子节点的类目，如果有叶子节点，要先把叶子节点删除，再删除该类目
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.category.deleteUserCategory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.category.deleteUserCategory&amp;v=1</summary>
        /// <param name="categoryIds">需要删除的类目在1688平台的id列表</param>
        /// <returns>操作结果返回 ErrorCode 的错误信息
        /// CATEGORY_FAILED_HAS_CHILDREN	- 所删类目中，存在有叶子类目的类目(先删除叶子类目，再删除父类目)
        /// SYSTEM_ERROR	- 系统异常(联系开发同学)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response28 CaigouApiCategoryDeleteUserCategory(System.Collections.Generic.IEnumerable<string> categoryIds);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除自定义类目
        /// 删除自定义类目，只能删除没有叶子节点的类目，如果有叶子节点，要先把叶子节点删除，再删除该类目
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.category.deleteUserCategory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.category.deleteUserCategory&amp;v=1</summary>
        /// <param name="categoryIds">需要删除的类目在1688平台的id列表</param>
        /// <returns>操作结果返回 ErrorCode 的错误信息
        /// CATEGORY_FAILED_HAS_CHILDREN	- 所删类目中，存在有叶子类目的类目(先删除叶子类目，再删除父类目)
        /// SYSTEM_ERROR	- 系统异常(联系开发同学)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response28> CaigouApiCategoryDeleteUserCategoryAsync(System.Collections.Generic.IEnumerable<string> categoryIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>通过产品id获取产品
        /// 通过产品id获取产品详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.product.queryProductById-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.product.queryProductById&amp;v=1</summary>
        /// <param name="productId">产品在1688所属id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        CaigouDomainProductProductCoop CaigouApiProductQueryProductById(long productId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>通过产品id获取产品
        /// 通过产品id获取产品详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.product.queryProductById-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.product.queryProductById&amp;v=1</summary>
        /// <param name="productId">产品在1688所属id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaigouDomainProductProductCoop> CaigouApiProductQueryProductByIdAsync(long productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>查询退货单接口
        /// 查询退货单接口
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.procurement.BuyerReturnGoodsService.queryReturnGoodsNote-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.procurement.BuyerReturnGoodsService.queryReturnGoodsNote&amp;v=1</summary>
        /// <param name="id">退货单ID</param>
        /// <returns>返回结果模型</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        CnAlibabaOpenComAlibabaProcurementBuyerReturnGoodsServiceQueryReturnGoodsNoteAlibabaProcurementApiIntegrationResultResultData ComAlibabaProcurementBuyerReturnGoodsServiceQueryReturnGoodsNote(long id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询退货单接口
        /// 查询退货单接口
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.procurement.BuyerReturnGoodsService.queryReturnGoodsNote-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.procurement.BuyerReturnGoodsService.queryReturnGoodsNote&amp;v=1</summary>
        /// <param name="id">退货单ID</param>
        /// <returns>返回结果模型</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CnAlibabaOpenComAlibabaProcurementBuyerReturnGoodsServiceQueryReturnGoodsNoteAlibabaProcurementApiIntegrationResultResultData> ComAlibabaProcurementBuyerReturnGoodsServiceQueryReturnGoodsNoteAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>采购商上架商品确认价格协议
        /// 对于上架商品，如果这个时候供应商通过推品工具或者直接上传价格表，需要采购商进行价格协议的确认
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.approvalPrice-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.approvalPrice&amp;v=1</summary>
        /// <param name="goodsId">商品ID</param>
        /// <param name="isPass">是否通过</param>
        /// <param name="remark">意见</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCaigouApprovalPriceResult AlibabaCaigouApprovalPrice(long goodsId, bool isPass, string remark = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>采购商上架商品确认价格协议
        /// 对于上架商品，如果这个时候供应商通过推品工具或者直接上传价格表，需要采购商进行价格协议的确认
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.approvalPrice-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.approvalPrice&amp;v=1</summary>
        /// <param name="goodsId">商品ID</param>
        /// <param name="isPass">是否通过</param>
        /// <param name="remark">意见</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCaigouApprovalPriceResult> AlibabaCaigouApprovalPriceAsync(long goodsId, bool isPass, string remark = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>供应商信息获取
        /// 根据供应商memberId获取供应商信息.每次返回一条关于该账号的数据信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.supplier.getSupplier-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.supplier.getSupplier&amp;v=1</summary>
        /// <param name="memberId">供应商memberId</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Supplier CaigouApiSupplierGetSupplier(string memberId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>供应商信息获取
        /// 根据供应商memberId获取供应商信息.每次返回一条关于该账号的数据信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.supplier.getSupplier-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.supplier.getSupplier&amp;v=1</summary>
        /// <param name="memberId">供应商memberId</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Supplier> CaigouApiSupplierGetSupplierAsync(string memberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>修改自定义类目
        /// 修改自定义类目
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.category.modifyUserCategory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.category.modifyUserCategory&amp;v=1</summary>
        /// <param name="categoryList">Json串，包含字段：categoryName：类目名称，categoryId：必填，类目在1688的主键编码，parentId：父类目在1688的业务编码。</param>
        /// <returns>修改结果返回 ErrorCode 的错误信息
        /// CATEGORY_FAILED	- 同步自定义类目失败(请重新尝试，确保所传类目存在)
        /// SYSTEM_ERROR	- 系统异常(联系开发同学)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response28 CaigouApiCategoryModifyUserCategory(System.Collections.Generic.IEnumerable<string> categoryList);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>修改自定义类目
        /// 修改自定义类目
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.category.modifyUserCategory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.category.modifyUserCategory&amp;v=1</summary>
        /// <param name="categoryList">Json串，包含字段：categoryName：类目名称，categoryId：必填，类目在1688的主键编码，parentId：父类目在1688的业务编码。</param>
        /// <returns>修改结果返回 ErrorCode 的错误信息
        /// CATEGORY_FAILED	- 同步自定义类目失败(请重新尝试，确保所传类目存在)
        /// SYSTEM_ERROR	- 系统异常(联系开发同学)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response28> CaigouApiCategoryModifyUserCategoryAsync(System.Collections.Generic.IEnumerable<string> categoryList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>采购商驳回内部商城商品
        /// 采购商驳回内部商城商品
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.buyerRejectUnPublishGoods-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.buyerRejectUnPublishGoods&amp;v=1</summary>
        /// <param name="goodsId">商品Id</param>
        /// <param name="memo">驳回信息</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCaigouBuyerRejectUnPublishGoodsResult AlibabaCaigouBuyerRejectUnPublishGoods(long goodsId, string memo = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>采购商驳回内部商城商品
        /// 采购商驳回内部商城商品
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.buyerRejectUnPublishGoods-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.buyerRejectUnPublishGoods&amp;v=1</summary>
        /// <param name="goodsId">商品Id</param>
        /// <param name="memo">驳回信息</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCaigouBuyerRejectUnPublishGoodsResult> AlibabaCaigouBuyerRejectUnPublishGoodsAsync(long goodsId, string memo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>批量冻结物料工厂
        /// 批量冻结物料工厂
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.batchFreezeProductFactory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.batchFreezeProductFactory&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        CnAlibabaOpenAlibabaCaigouProductBatchFreezeProductFactoryAlibabaCaigouProductResultData AlibabaCaigouProductBatchFreezeProductFactory(System.Collections.Generic.IEnumerable<AlibabaCaigouProductFreezeProductFactoryParam> freezeProductFactoryParams);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>批量冻结物料工厂
        /// 批量冻结物料工厂
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.batchFreezeProductFactory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.batchFreezeProductFactory&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CnAlibabaOpenAlibabaCaigouProductBatchFreezeProductFactoryAlibabaCaigouProductResultData> AlibabaCaigouProductBatchFreezeProductFactoryAsync(System.Collections.Generic.IEnumerable<AlibabaCaigouProductFreezeProductFactoryParam> freezeProductFactoryParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>冻结物料工厂
        /// 冻结物料工厂
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.freezeProductFactory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.freezeProductFactory&amp;v=1</summary>
        /// <param name="systemDomainCode">系统域编码</param>
        /// <param name="productCode">物料编码</param>
        /// <param name="factoryCode">工厂编码</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        CnAlibabaOpenAlibabaCaigouProductFreezeProductFactoryAlibabaCaigouProductResultData AlibabaCaigouProductFreezeProductFactory(string systemDomainCode, string productCode, string factoryCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>冻结物料工厂
        /// 冻结物料工厂
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.freezeProductFactory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.freezeProductFactory&amp;v=1</summary>
        /// <param name="systemDomainCode">系统域编码</param>
        /// <param name="productCode">物料编码</param>
        /// <param name="factoryCode">工厂编码</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CnAlibabaOpenAlibabaCaigouProductFreezeProductFactoryAlibabaCaigouProductResultData> AlibabaCaigouProductFreezeProductFactoryAsync(string systemDomainCode, string productCode, string factoryCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>根据订单维度审核采购单
        /// 根据订单维度审核采购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.purchaseOrder.updateStatusByOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.purchaseOrder.updateStatusByOrder&amp;v=1</summary>
        /// <param name="orderId">订单ID</param>
        /// <param name="noPassEntryIds">审核未通过的子订单ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCaigouPurchaseOrderUpdateStatusByOrderResult AlibabaCaigouPurchaseOrderUpdateStatusByOrder(long orderId, System.Collections.Generic.IEnumerable<string> noPassEntryIds = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据订单维度审核采购单
        /// 根据订单维度审核采购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.purchaseOrder.updateStatusByOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.purchaseOrder.updateStatusByOrder&amp;v=1</summary>
        /// <param name="orderId">订单ID</param>
        /// <param name="noPassEntryIds">审核未通过的子订单ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCaigouPurchaseOrderUpdateStatusByOrderResult> AlibabaCaigouPurchaseOrderUpdateStatusByOrderAsync(long orderId, System.Collections.Generic.IEnumerable<string> noPassEntryIds = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>请购单行分派
        /// 请购单行分派
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.requisition.assignRequisition-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.requisition.assignRequisition&amp;v=1</summary>
        /// <param name="paramList">分派参数</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCaigouRequisitionAssignRequisitionResult AlibabaCaigouRequisitionAssignRequisition(System.Collections.Generic.IEnumerable<AlibabaCaigouRequisitionOpenAssignRequisitionParam> paramList);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>请购单行分派
        /// 请购单行分派
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.requisition.assignRequisition-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.requisition.assignRequisition&amp;v=1</summary>
        /// <param name="paramList">分派参数</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCaigouRequisitionAssignRequisitionResult> AlibabaCaigouRequisitionAssignRequisitionAsync(System.Collections.Generic.IEnumerable<AlibabaCaigouRequisitionOpenAssignRequisitionParam> paramList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>通过询价单id获取询价单（规范输出参数）
        /// 通过询价单id获取询价单（规范输出参数），含有succes,resultCode,message
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.open.caigou.api.buyOffer.getBuyOfferById-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.open.caigou.api.buyOffer.getBuyOfferById&amp;v=1</summary>
        /// <param name="buyOfferId">询价单ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaOpenComAlibabaCaigouApiBuyOfferModelBuyOfferForWH AlibabaOpenCaigouApiBuyOfferGetBuyOfferById(long buyOfferId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>通过询价单id获取询价单（规范输出参数）
        /// 通过询价单id获取询价单（规范输出参数），含有succes,resultCode,message
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.open.caigou.api.buyOffer.getBuyOfferById-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.open.caigou.api.buyOffer.getBuyOfferById&amp;v=1</summary>
        /// <param name="buyOfferId">询价单ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaOpenComAlibabaCaigouApiBuyOfferModelBuyOfferForWH> AlibabaOpenCaigouApiBuyOfferGetBuyOfferByIdAsync(long buyOfferId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>上传附件
        /// 上传附件
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.attachment.upload-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.attachment.upload&amp;v=1</summary>
        /// <param name="name">文件名。最大字符为64个英文和汉子字符或者21个汉字。超过部分会被强制截断.</param>
        /// <param name="fileBytes">附件的二进制数据，向服务端提交文件即可 (fileBytes这个参数不能签名)。使用 enctype=&amp;quot;multipart/form-data&amp;quot; 的POST文件上传方式提交数据</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// PARAM_MISS	- 参数丢失(确认参数传送按照要求)
        /// NOT_SUPPORT_SOURCE	- 上传来源不支持(联系管理员)
        /// FILE_NOT_SUPPORT	- 文件格式不支持(该文件不支持上传)
        /// SYS_ERROR	- 系统错误(联系管理员)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        CaigouApiAttachmentUploadResult CaigouApiAttachmentUpload(string name = null, byte[] fileBytes = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>上传附件
        /// 上传附件
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.attachment.upload-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.attachment.upload&amp;v=1</summary>
        /// <param name="name">文件名。最大字符为64个英文和汉子字符或者21个汉字。超过部分会被强制截断.</param>
        /// <param name="fileBytes">附件的二进制数据，向服务端提交文件即可 (fileBytes这个参数不能签名)。使用 enctype=&amp;quot;multipart/form-data&amp;quot; 的POST文件上传方式提交数据</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// PARAM_MISS	- 参数丢失(确认参数传送按照要求)
        /// NOT_SUPPORT_SOURCE	- 上传来源不支持(联系管理员)
        /// FILE_NOT_SUPPORT	- 文件格式不支持(该文件不支持上传)
        /// SYS_ERROR	- 系统错误(联系管理员)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaigouApiAttachmentUploadResult> CaigouApiAttachmentUploadAsync(string name = null, byte[] fileBytes = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>请购单审核
        /// 请购单审核，根据传入的请购单单项进行审核
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.requisition.approvalRequisition-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.requisition.approvalRequisition&amp;v=1</summary>
        /// <param name="paramList">审批参数</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCaigouRequisitionApprovalRequisitionResult AlibabaCaigouRequisitionApprovalRequisition(System.Collections.Generic.IEnumerable<AlibabaCaigouRequisitionOpenApprovalRequisitionParam> paramList);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>请购单审核
        /// 请购单审核，根据传入的请购单单项进行审核
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.requisition.approvalRequisition-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.requisition.approvalRequisition&amp;v=1</summary>
        /// <param name="paramList">审批参数</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCaigouRequisitionApprovalRequisitionResult> AlibabaCaigouRequisitionApprovalRequisitionAsync(System.Collections.Generic.IEnumerable<AlibabaCaigouRequisitionOpenApprovalRequisitionParam> paramList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>发布产品信息
        /// 发布产品信息，多次发布同一个产品不会产生重复数据，操作人员编号需要绑定后才能操作
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.product.addProduct-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.product.addProduct&amp;v=1</summary>
        /// <param name="productCode">产品编号，物料编码，代表产品在外部系统的主键</param>
        /// <param name="title">产品名</param>
        /// <param name="unit">单位</param>
        /// <param name="remark">补充说明，可以为富文本。最多4000个字符</param>
        /// <param name="instruction">产品说明，副标题，最多200个字符</param>
        /// <param name="productAttributes">产品属性列表</param>
        /// <param name="picUrlList">产品图片，最多10张，先调用上传图片接口，获取到图片相对url</param>
        /// <param name="attachmentList">产品附件，最多3个附件，先调用上传附件接口获取到附件id</param>
        /// <param name="referencePrice">产品参考价(单位是分)</param>
        /// <param name="userCategoryId">用户在1688的自定义类目id</param>
        /// <param name="userId">操作员在1688上的子帐号ID，如果接入商有子账号，则可以通过子账号来发布产品；不传则系统会自动取主账号的userId作为默认值</param>
        /// <returns>产品在1688采购平台的主键id，如果发布失败则为空，具体的看错误码返回 ErrorCode 的错误信息
        /// ISV.INVALID_PARAM	- 参数不合法
        /// ISV.SYSTEM_ERROR	- 系统出错
        /// ISV.DUPLICATE_INSERT	- 重复插入</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response34 CaigouApiProductAddProduct(string productCode, string title, string unit, string remark = null, string instruction = null, System.Collections.Generic.IEnumerable<string> productAttributes = null, System.Collections.Generic.IEnumerable<string> picUrlList = null, System.Collections.Generic.IEnumerable<string> attachmentList = null, long? referencePrice = null, long? userCategoryId = null, long? userId = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>发布产品信息
        /// 发布产品信息，多次发布同一个产品不会产生重复数据，操作人员编号需要绑定后才能操作
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.product.addProduct-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.product.addProduct&amp;v=1</summary>
        /// <param name="productCode">产品编号，物料编码，代表产品在外部系统的主键</param>
        /// <param name="title">产品名</param>
        /// <param name="unit">单位</param>
        /// <param name="remark">补充说明，可以为富文本。最多4000个字符</param>
        /// <param name="instruction">产品说明，副标题，最多200个字符</param>
        /// <param name="productAttributes">产品属性列表</param>
        /// <param name="picUrlList">产品图片，最多10张，先调用上传图片接口，获取到图片相对url</param>
        /// <param name="attachmentList">产品附件，最多3个附件，先调用上传附件接口获取到附件id</param>
        /// <param name="referencePrice">产品参考价(单位是分)</param>
        /// <param name="userCategoryId">用户在1688的自定义类目id</param>
        /// <param name="userId">操作员在1688上的子帐号ID，如果接入商有子账号，则可以通过子账号来发布产品；不传则系统会自动取主账号的userId作为默认值</param>
        /// <returns>产品在1688采购平台的主键id，如果发布失败则为空，具体的看错误码返回 ErrorCode 的错误信息
        /// ISV.INVALID_PARAM	- 参数不合法
        /// ISV.SYSTEM_ERROR	- 系统出错
        /// ISV.DUPLICATE_INSERT	- 重复插入</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response34> CaigouApiProductAddProductAsync(string productCode, string title, string unit, string remark = null, string instruction = null, System.Collections.Generic.IEnumerable<string> productAttributes = null, System.Collections.Generic.IEnumerable<string> picUrlList = null, System.Collections.Generic.IEnumerable<string> attachmentList = null, long? referencePrice = null, long? userCategoryId = null, long? userId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>失败消息批量确认
        /// 手动调用确认api，确认消息已经被消费成功。仅当使用查询式获取失败消息的api时，才需要使用
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:push.message.confirm-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=push.message.confirm&amp;v=1</summary>
        /// <param name="msgIdList">待确认的消息id列表</param>
        /// <returns>操作是否成功</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response2 PushMessageConfirm(System.Collections.Generic.IEnumerable<string> msgIdList = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>失败消息批量确认
        /// 手动调用确认api，确认消息已经被消费成功。仅当使用查询式获取失败消息的api时，才需要使用
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:push.message.confirm-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=push.message.confirm&amp;v=1</summary>
        /// <param name="msgIdList">待确认的消息id列表</param>
        /// <returns>操作是否成功</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response2> PushMessageConfirmAsync(System.Collections.Generic.IEnumerable<string> msgIdList = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>批量修改零售通商品的虚仓库存
        /// 传递商家账号、仓库信息、前端OfferID，可以更新零售通该商家（虚仓）的商品库存信息，直接覆盖现有库存
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.lst.item.setStock-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.lst.item.setStock&amp;v=1</summary>
        /// <param name="stockList">库存参数列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaLstItemSetStockResult AlibabaLstItemSetStock(System.Collections.Generic.IEnumerable<AlibabaLstItemStockInfo> stockList);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>批量修改零售通商品的虚仓库存
        /// 传递商家账号、仓库信息、前端OfferID，可以更新零售通该商家（虚仓）的商品库存信息，直接覆盖现有库存
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.lst.item.setStock-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.lst.item.setStock&amp;v=1</summary>
        /// <param name="stockList">库存参数列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaLstItemSetStockResult> AlibabaLstItemSetStockAsync(System.Collections.Generic.IEnumerable<AlibabaLstItemStockInfo> stockList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>零售通关闭交易
        /// 零售通订单关闭交易
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.trade.lst.closeTrade-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.trade.lst.closeTrade&amp;v=1</summary>
        /// <param name="orderId">订单Id</param>
        /// <param name="closeOperateType">操作者角色</param>
        /// <param name="cancelReason">关闭订单原因</param>
        /// <param name="remark">备注</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeLstCloseTradeResult AlibabaTradeLstCloseTrade(long orderId, string closeOperateType, string cancelReason = null, string remark = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>零售通关闭交易
        /// 零售通订单关闭交易
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.trade.lst.closeTrade-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.trade.lst.closeTrade&amp;v=1</summary>
        /// <param name="orderId">订单Id</param>
        /// <param name="closeOperateType">操作者角色</param>
        /// <param name="cancelReason">关闭订单原因</param>
        /// <param name="remark">备注</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeLstCloseTradeResult> AlibabaTradeLstCloseTradeAsync(long orderId, string closeOperateType, string cancelReason = null, string remark = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>品牌商捡入
        /// 品牌商捡入
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.list.brandPickedEnterLeads-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.list.brandPickedEnterLeads&amp;v=1</summary>
        /// <param name="leadsBizId">零售店业务主键</param>
        /// <param name="operatorNo">品牌商拍档编码</param>
        /// <param name="spUserId">品牌商的userid</param>
        /// <param name="leadsType">品牌商的零售店的业务类型</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaLstOpenResult AlibabaListBrandPickedEnterLeads(long leadsBizId, string operatorNo, long spUserId, string leadsType);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>品牌商捡入
        /// 品牌商捡入
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.list.brandPickedEnterLeads-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.list.brandPickedEnterLeads&amp;v=1</summary>
        /// <param name="leadsBizId">零售店业务主键</param>
        /// <param name="operatorNo">品牌商拍档编码</param>
        /// <param name="spUserId">品牌商的userid</param>
        /// <param name="leadsType">品牌商的零售店的业务类型</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaLstOpenResult> AlibabaListBrandPickedEnterLeadsAsync(long leadsBizId, string operatorNo, long spUserId, string leadsType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>业务员权限关闭
        /// 业务员权限关闭
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.lst.cancelSalesman-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.lst.cancelSalesman&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaLstOpenResult AlibabaLstCancelSalesman(string loginId, string lsSpBrandName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>业务员权限关闭
        /// 业务员权限关闭
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.lst.cancelSalesman-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.lst.cancelSalesman&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaLstOpenResult> AlibabaLstCancelSalesmanAsync(string loginId, string lsSpBrandName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>跨境场景相似款搜索
        /// 按照已有商品进行线上相似款搜索，erp需要有跨境货源推荐的权限
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.cross.similar.product.search-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.cross.similar.product.search&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <param name="endUserId">erp内部的用户身份id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCrossSimilarProductSearchResult AlibabaCrossSimilarProductSearch(string orgId, string endUserId = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>跨境场景相似款搜索
        /// 按照已有商品进行线上相似款搜索，erp需要有跨境货源推荐的权限
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.cross.similar.product.search-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.cross.similar.product.search&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <param name="endUserId">erp内部的用户身份id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCrossSimilarProductSearchResult> AlibabaCrossSimilarProductSearchAsync(string orgId, string endUserId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>跨境清仓好货商品列表
        /// 跨境清仓好货商品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.crossboard.cleargoodspage-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.crossboard.cleargoodspage&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        void AlibabaCrossboardCleargoodspage();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>跨境清仓好货商品列表
        /// 跨境清仓好货商品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.crossboard.cleargoodspage-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.crossboard.cleargoodspage&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlibabaCrossboardCleargoodspageAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>支付宝间连-1688产品推荐开放商品商城首页组件
        /// 支付宝间连ISV获取1688产品推荐开放页面-商城首页
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alipay.main.page-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alipay.main.page&amp;v=1</summary>
        /// <param name="endOrgId">ERP终端机构ID</param>
        /// <param name="endUserId">ERP终端用户ID</param>
        /// <param name="umidToken">设备码，通过阿里指定js获取</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        void AlipayMainPage(string endOrgId, string endUserId, string umidToken = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>支付宝间连-1688产品推荐开放商品商城首页组件
        /// 支付宝间连ISV获取1688产品推荐开放页面-商城首页
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alipay.main.page-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alipay.main.page&amp;v=1</summary>
        /// <param name="endOrgId">ERP终端机构ID</param>
        /// <param name="endUserId">ERP终端用户ID</param>
        /// <param name="umidToken">设备码，通过阿里指定js获取</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlipayMainPageAsync(string endOrgId, string endUserId, string umidToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>通联商城
        /// 通联支付的商城api
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.allinpay.main.page-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.allinpay.main.page&amp;v=1</summary>
        /// <param name="endOrgId">ERP终端机构ID</param>
        /// <param name="endUserId">ERP终端用户ID</param>
        /// <param name="umidToken">设备码，通过阿里指定js获取</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        void AlibabaAllinpayMainPage(string endOrgId, string endUserId, string umidToken = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>通联商城
        /// 通联支付的商城api
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.allinpay.main.page-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.allinpay.main.page&amp;v=1</summary>
        /// <param name="endOrgId">ERP终端机构ID</param>
        /// <param name="endUserId">ERP终端用户ID</param>
        /// <param name="umidToken">设备码，通过阿里指定js获取</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlibabaAllinpayMainPageAsync(string endOrgId, string endUserId, string umidToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>终端用户感兴趣类目
        /// ERP终端用户感兴趣的类目，类目目前接受1688类目传入或自定义类目传入。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:enduser.interesting.category.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=enduser.interesting.category.put&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <param name="endUserId">erp内部的用户身份id</param>
        /// <param name="categoryIds">感兴趣的1688类目id,逗号分隔。任意123级类目均可填写</param>
        /// <param name="categoryNames">感兴趣的1688类目名称,逗号分隔。任意123级类目均可填写</param>
        /// <param name="udfCategoryNames">感兴趣的自定义类目名称,逗号分隔</param>
        /// <returns>返回值</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Result EnduserInterestingCategoryPut(string orgId, string endUserId, string categoryIds = null, string categoryNames = null, string udfCategoryNames = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>终端用户感兴趣类目
        /// ERP终端用户感兴趣的类目，类目目前接受1688类目传入或自定义类目传入。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:enduser.interesting.category.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=enduser.interesting.category.put&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <param name="endUserId">erp内部的用户身份id</param>
        /// <param name="categoryIds">感兴趣的1688类目id,逗号分隔。任意123级类目均可填写</param>
        /// <param name="categoryNames">感兴趣的1688类目名称,逗号分隔。任意123级类目均可填写</param>
        /// <param name="udfCategoryNames">感兴趣的自定义类目名称,逗号分隔</param>
        /// <returns>返回值</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Result> EnduserInterestingCategoryPutAsync(string orgId, string endUserId, string categoryIds = null, string categoryNames = null, string udfCategoryNames = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>ERP用户状态数据同步
        /// 同步ERP终端用户数据，即生成一份终端用户数据的镜像。对于多次调用，修改已存在的记录。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:enduser.info.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=enduser.info.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="orgName">机构名称</param>
        /// <param name="orgLocation">机构地址</param>
        /// <param name="orgIndustry">机构所属行业</param>
        /// <param name="orgMobile">机构联系方式</param>
        /// <param name="endUserId">终端用户ID</param>
        /// <param name="endUserName">终端用户名称</param>
        /// <param name="endUserMobile">终端用户手机</param>
        /// <param name="createTimeStamp">用户创建时间戳</param>
        /// <param name="modifyTimeStamp">用户修改时间戳</param>
        /// <param name="orgEmail">机构email联系方式</param>
        /// <param name="orgBindingAliLoginId">机构绑定阿里巴巴登录账号</param>
        /// <param name="endUserBindingAliLoginId">终端用户绑定阿里巴巴登录账号</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        EnduserInfoPutResult EnduserInfoPut(string orgid, string orgName, string orgLocation, string orgIndustry, string orgMobile, string endUserId, string endUserName, string endUserMobile, long createTimeStamp, long modifyTimeStamp, string orgEmail = null, string orgBindingAliLoginId = null, string endUserBindingAliLoginId = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>ERP用户状态数据同步
        /// 同步ERP终端用户数据，即生成一份终端用户数据的镜像。对于多次调用，修改已存在的记录。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:enduser.info.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=enduser.info.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="orgName">机构名称</param>
        /// <param name="orgLocation">机构地址</param>
        /// <param name="orgIndustry">机构所属行业</param>
        /// <param name="orgMobile">机构联系方式</param>
        /// <param name="endUserId">终端用户ID</param>
        /// <param name="endUserName">终端用户名称</param>
        /// <param name="endUserMobile">终端用户手机</param>
        /// <param name="createTimeStamp">用户创建时间戳</param>
        /// <param name="modifyTimeStamp">用户修改时间戳</param>
        /// <param name="orgEmail">机构email联系方式</param>
        /// <param name="orgBindingAliLoginId">机构绑定阿里巴巴登录账号</param>
        /// <param name="endUserBindingAliLoginId">终端用户绑定阿里巴巴登录账号</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EnduserInfoPutResult> EnduserInfoPutAsync(string orgid, string orgName, string orgLocation, string orgIndustry, string orgMobile, string endUserId, string endUserName, string endUserMobile, long createTimeStamp, long modifyTimeStamp, string orgEmail = null, string orgBindingAliLoginId = null, string endUserBindingAliLoginId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>支付宝间连-1688产品推荐开放商品扩展区组件
        /// 支付宝间连ISV获取1688产品推荐开放页面-商品区块部分
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alipay.inner.page-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alipay.inner.page&amp;v=1</summary>
        /// <param name="endOrgId">ERP终端机构ID</param>
        /// <param name="endUserId">ERP终端用户ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        void AlipayInnerPage(string endOrgId, string endUserId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>支付宝间连-1688产品推荐开放商品扩展区组件
        /// 支付宝间连ISV获取1688产品推荐开放页面-商品区块部分
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alipay.inner.page-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alipay.inner.page&amp;v=1</summary>
        /// <param name="endOrgId">ERP终端机构ID</param>
        /// <param name="endUserId">ERP终端用户ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlipayInnerPageAsync(string endOrgId, string endUserId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>跨境场景企业维度新品搜索
        /// 按照企业维度给出新品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.cross.company.product.new.search-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.cross.company.product.new.search&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCrossCompanyProductNewSearchResult AlibabaCrossCompanyProductNewSearch(string orgId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>跨境场景企业维度新品搜索
        /// 按照企业维度给出新品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.cross.company.product.new.search-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.cross.company.product.new.search&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCrossCompanyProductNewSearchResult> AlibabaCrossCompanyProductNewSearchAsync(string orgId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>采购单记录采集同步
        /// ERP终端用户采购单记录采集同步
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:purchaseorder.record.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=purchaseorder.record.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="endUserId">终端用户ID</param>
        /// <param name="orderNo">订单号</param>
        /// <param name="orderLineNo">订单行号</param>
        /// <param name="orderLinePrice">订单行价格</param>
        /// <param name="orderTotalPrice">订单总价</param>
        /// <param name="productId">产品ID</param>
        /// <param name="productName">产品名称</param>
        /// <param name="productPrice">产品价格</param>
        /// <param name="productPriceWithTax">产品含税价格</param>
        /// <param name="productNum">产品个数</param>
        /// <param name="productModel">产品型号</param>
        /// <param name="createTimeStamp">创建时间戳</param>
        /// <param name="modifyTimeStamp">修改时间戳</param>
        /// <param name="productUnit">产品单位</param>
        /// <param name="productBrand">产品品牌</param>
        /// <param name="productSpec">产品规格</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        ComAlibabaLinkplusCollectResult PurchaseorderRecordPut(string orgid, string endUserId, string orderNo, string orderLineNo, double orderLinePrice, double orderTotalPrice, string productId, string productName, double productPrice, double productPriceWithTax, long productNum, string productModel, long createTimeStamp, long modifyTimeStamp, string productUnit = null, string productBrand = null, string productSpec = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>采购单记录采集同步
        /// ERP终端用户采购单记录采集同步
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:purchaseorder.record.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=purchaseorder.record.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="endUserId">终端用户ID</param>
        /// <param name="orderNo">订单号</param>
        /// <param name="orderLineNo">订单行号</param>
        /// <param name="orderLinePrice">订单行价格</param>
        /// <param name="orderTotalPrice">订单总价</param>
        /// <param name="productId">产品ID</param>
        /// <param name="productName">产品名称</param>
        /// <param name="productPrice">产品价格</param>
        /// <param name="productPriceWithTax">产品含税价格</param>
        /// <param name="productNum">产品个数</param>
        /// <param name="productModel">产品型号</param>
        /// <param name="createTimeStamp">创建时间戳</param>
        /// <param name="modifyTimeStamp">修改时间戳</param>
        /// <param name="productUnit">产品单位</param>
        /// <param name="productBrand">产品品牌</param>
        /// <param name="productSpec">产品规格</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComAlibabaLinkplusCollectResult> PurchaseorderRecordPutAsync(string orgid, string endUserId, string orderNo, string orderLineNo, double orderLinePrice, double orderTotalPrice, string productId, string productName, double productPrice, double productPriceWithTax, long productNum, string productModel, long createTimeStamp, long modifyTimeStamp, string productUnit = null, string productBrand = null, string productSpec = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>终端用户感兴趣商品
        /// ERP终端用户感兴趣的类目，类目目前接受1688类目传入，或自定义类目传入。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:enduser.interesting.category-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=enduser.interesting.category&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <param name="endUserId">erp内部的用户身份id</param>
        /// <param name="categoryIds">感兴趣的1688类目id,逗号分隔。任意123级类目均可填写</param>
        /// <param name="categoryNames">感兴趣的1688类目名称,逗号分隔。任意123级类目均可填写</param>
        /// <param name="udfCategoryNames">感兴趣的自定义类目名称,逗号分隔</param>
        /// <returns>返回值</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Result EnduserInterestingCategory(string orgId, string endUserId, string categoryIds = null, string categoryNames = null, string udfCategoryNames = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>终端用户感兴趣商品
        /// ERP终端用户感兴趣的类目，类目目前接受1688类目传入，或自定义类目传入。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:enduser.interesting.category-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=enduser.interesting.category&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <param name="endUserId">erp内部的用户身份id</param>
        /// <param name="categoryIds">感兴趣的1688类目id,逗号分隔。任意123级类目均可填写</param>
        /// <param name="categoryNames">感兴趣的1688类目名称,逗号分隔。任意123级类目均可填写</param>
        /// <param name="udfCategoryNames">感兴趣的自定义类目名称,逗号分隔</param>
        /// <returns>返回值</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Result> EnduserInterestingCategoryAsync(string orgId, string endUserId, string categoryIds = null, string categoryNames = null, string udfCategoryNames = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>通联支付1688产品推荐开放页面
        /// 通联支付1688产品推荐开放页面
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:allinpay.product.recommend.page-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=allinpay.product.recommend.page&amp;v=1</summary>
        /// <param name="endOrgId">ERP终端机构ID</param>
        /// <param name="endUserId">ERP终端用户ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        void AllinpayProductRecommendPage(string endOrgId, string endUserId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>通联支付1688产品推荐开放页面
        /// 通联支付1688产品推荐开放页面
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:allinpay.product.recommend.page-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=allinpay.product.recommend.page&amp;v=1</summary>
        /// <param name="endOrgId">ERP终端机构ID</param>
        /// <param name="endUserId">ERP终端用户ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AllinpayProductRecommendPageAsync(string endOrgId, string endUserId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>销售单操作记录同步
        /// 销售单操作记录同步
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:sellorder.record.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=sellorder.record.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="endUserId">终端用户ID</param>
        /// <param name="orderNo">订单号</param>
        /// <param name="orderLineNo">订单行号</param>
        /// <param name="orderLinePrice">订单行价格</param>
        /// <param name="orderTotalPrice">订单总价</param>
        /// <param name="productId">产品ID</param>
        /// <param name="productName">产品名称</param>
        /// <param name="productPrice">产品价格</param>
        /// <param name="productPriceWithTax">产品含税价格</param>
        /// <param name="productModel">产品型号</param>
        /// <param name="productNum">产品个数</param>
        /// <param name="createTimeStamp">创建时间戳</param>
        /// <param name="modifyTimeStamp">修改时间戳</param>
        /// <param name="productUnit">产品单位</param>
        /// <param name="productBrand">产品品牌</param>
        /// <param name="productSpec">产品规格</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        ComAlibabaLinkplusCollectResult SellorderRecordPut(string orgid, string endUserId, string orderNo, string orderLineNo, double orderLinePrice, double orderTotalPrice, string productId, string productName, double productPrice, double productPriceWithTax, string productModel, long productNum, long createTimeStamp, long modifyTimeStamp, string productUnit = null, string productBrand = null, string productSpec = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>销售单操作记录同步
        /// 销售单操作记录同步
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:sellorder.record.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=sellorder.record.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="endUserId">终端用户ID</param>
        /// <param name="orderNo">订单号</param>
        /// <param name="orderLineNo">订单行号</param>
        /// <param name="orderLinePrice">订单行价格</param>
        /// <param name="orderTotalPrice">订单总价</param>
        /// <param name="productId">产品ID</param>
        /// <param name="productName">产品名称</param>
        /// <param name="productPrice">产品价格</param>
        /// <param name="productPriceWithTax">产品含税价格</param>
        /// <param name="productModel">产品型号</param>
        /// <param name="productNum">产品个数</param>
        /// <param name="createTimeStamp">创建时间戳</param>
        /// <param name="modifyTimeStamp">修改时间戳</param>
        /// <param name="productUnit">产品单位</param>
        /// <param name="productBrand">产品品牌</param>
        /// <param name="productSpec">产品规格</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComAlibabaLinkplusCollectResult> SellorderRecordPutAsync(string orgid, string endUserId, string orderNo, string orderLineNo, double orderLinePrice, double orderTotalPrice, string productId, string productName, double productPrice, double productPriceWithTax, string productModel, long productNum, long createTimeStamp, long modifyTimeStamp, string productUnit = null, string productBrand = null, string productSpec = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>机构授权信息推送同步
        /// 终端机构授权ERP把自己的数据同步给网站时，需要把机构授权信息同步给网站
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:org.auth.info.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=org.auth.info.put&amp;v=1</summary>
        /// <param name="orgid">机构id</param>
        /// <param name="orgIsAuth">是否授权</param>
        /// <param name="modifyTimeStamp">授权修改时间</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        ComAlibabaLinkplusCollectResult OrgAuthInfoPut(string orgid, bool orgIsAuth, long modifyTimeStamp);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>机构授权信息推送同步
        /// 终端机构授权ERP把自己的数据同步给网站时，需要把机构授权信息同步给网站
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:org.auth.info.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=org.auth.info.put&amp;v=1</summary>
        /// <param name="orgid">机构id</param>
        /// <param name="orgIsAuth">是否授权</param>
        /// <param name="modifyTimeStamp">授权修改时间</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComAlibabaLinkplusCollectResult> OrgAuthInfoPutAsync(string orgid, bool orgIsAuth, long modifyTimeStamp, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>跨境场景企业维度热销品搜索
        /// 按照企业维度给出热销品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.cross.company.product.hot.search-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.cross.company.product.hot.search&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCrossCompanyProductHotSearchResult AlibabaCrossCompanyProductHotSearch(string orgId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>跨境场景企业维度热销品搜索
        /// 按照企业维度给出热销品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.cross.company.product.hot.search-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.cross.company.product.hot.search&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCrossCompanyProductHotSearchResult> AlibabaCrossCompanyProductHotSearchAsync(string orgId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>感兴趣关键词采集同步
        /// 当终端用户发起感兴趣的商品，比如搜索，点击时，ERP发起终端用户感兴趣商品名称或者关键字信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:interesting.keyword.record.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=interesting.keyword.record.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="endUserId">终端用户UserId</param>
        /// <param name="keywords">关键词</param>
        /// <param name="operateTimeStamp">发起时间</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        ComAlibabaLinkplusCollectResult InterestingKeywordRecordPut(string orgid, string endUserId, string keywords, long operateTimeStamp);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>感兴趣关键词采集同步
        /// 当终端用户发起感兴趣的商品，比如搜索，点击时，ERP发起终端用户感兴趣商品名称或者关键字信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:interesting.keyword.record.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=interesting.keyword.record.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="endUserId">终端用户UserId</param>
        /// <param name="keywords">关键词</param>
        /// <param name="operateTimeStamp">发起时间</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComAlibabaLinkplusCollectResult> InterestingKeywordRecordPutAsync(string orgid, string endUserId, string keywords, long operateTimeStamp, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>工业品市场产品精准匹配开放页面接口
        /// 工业品市场产品精准匹配开放页面接口
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:industrialmarket.product.match.page-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=industrialmarket.product.match.page&amp;v=1</summary>
        /// <param name="batchId">业务批次ID</param>
        /// <param name="endOrgId">ERP终端机构ID</param>
        /// <param name="endUserId">ERP终端用户ID</param>
        /// <param name="erpWarehouse">仓库信息</param>
        /// <param name="erpPrePurchaseOrder">预采购订单列表</param>
        /// <param name="umidToken">设备码，通过阿里指定js获取</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        void IndustrialmarketProductMatchPage(string batchId, string endOrgId, string endUserId, ErpWarehouse erpWarehouse, System.Collections.Generic.IEnumerable<ErpPrePurchaseOrder> erpPrePurchaseOrder, string umidToken = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>工业品市场产品精准匹配开放页面接口
        /// 工业品市场产品精准匹配开放页面接口
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:industrialmarket.product.match.page-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=industrialmarket.product.match.page&amp;v=1</summary>
        /// <param name="batchId">业务批次ID</param>
        /// <param name="endOrgId">ERP终端机构ID</param>
        /// <param name="endUserId">ERP终端用户ID</param>
        /// <param name="erpWarehouse">仓库信息</param>
        /// <param name="erpPrePurchaseOrder">预采购订单列表</param>
        /// <param name="umidToken">设备码，通过阿里指定js获取</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task IndustrialmarketProductMatchPageAsync(string batchId, string endOrgId, string endUserId, ErpWarehouse erpWarehouse, System.Collections.Generic.IEnumerable<ErpPrePurchaseOrder> erpPrePurchaseOrder, string umidToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>跨境场景企业维度折扣品搜索
        /// 按照企业维度给出折扣品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.cross.company.product.discount.search-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.cross.company.product.discount.search&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCrossCompanyProductDiscountSearchResult AlibabaCrossCompanyProductDiscountSearch(string orgId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>跨境场景企业维度折扣品搜索
        /// 按照企业维度给出折扣品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.cross.company.product.discount.search-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.cross.company.product.discount.search&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCrossCompanyProductDiscountSearchResult> AlibabaCrossCompanyProductDiscountSearchAsync(string orgId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>ERP用户登录记录采集同步
        /// erp终端用户登录数据采集同步
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:enduser.login.record.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=enduser.login.record.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="endUserId">终端用户ID</param>
        /// <param name="realUrl">当前URL</param>
        /// <param name="loginTimeStamp">登录时间</param>
        /// <param name="ip">登录IP地址</param>
        /// <param name="countryName">国家名称</param>
        /// <param name="provinceName">省名称</param>
        /// <param name="cityName">城市名称</param>
        /// <param name="scr">分辨率</param>
        /// <param name="agent">浏览器</param>
        /// <param name="agentName">客户端信息串</param>
        /// <param name="platform">操作系统</param>
        /// <returns>返回结果值</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        ComAlibabaLinkplusCollectResult EnduserLoginRecordPut(string orgid, string endUserId, string realUrl, long loginTimeStamp, string ip = null, string countryName = null, string provinceName = null, string cityName = null, string scr = null, string agent = null, string agentName = null, string platform = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>ERP用户登录记录采集同步
        /// erp终端用户登录数据采集同步
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:enduser.login.record.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=enduser.login.record.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="endUserId">终端用户ID</param>
        /// <param name="realUrl">当前URL</param>
        /// <param name="loginTimeStamp">登录时间</param>
        /// <param name="ip">登录IP地址</param>
        /// <param name="countryName">国家名称</param>
        /// <param name="provinceName">省名称</param>
        /// <param name="cityName">城市名称</param>
        /// <param name="scr">分辨率</param>
        /// <param name="agent">浏览器</param>
        /// <param name="agentName">客户端信息串</param>
        /// <param name="platform">操作系统</param>
        /// <returns>返回结果值</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComAlibabaLinkplusCollectResult> EnduserLoginRecordPutAsync(string orgid, string endUserId, string realUrl, long loginTimeStamp, string ip = null, string countryName = null, string provinceName = null, string cityName = null, string scr = null, string agent = null, string agentName = null, string platform = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>跨境场景企业维度货源推荐页面转发
        /// 按照企业维度给出推荐的货源列表，erp需要有跨境货源推荐的权限，并且事先要上传企业数据
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.cross.company.product.recommend-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.cross.company.product.recommend&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id，如果是超级买家则使用超买内部系统用的企业身份id，如果没有就自定义一个标志性的名字</param>
        /// <param name="endUserId">erp内部的个人身份id，如果是超级买家则使用超买内部系统用的个人身份id，如果没有就自定义一个标志性的名字</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCrossCompanyProductRecommendResult AlibabaCrossCompanyProductRecommend(string orgId, string endUserId = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>跨境场景企业维度货源推荐页面转发
        /// 按照企业维度给出推荐的货源列表，erp需要有跨境货源推荐的权限，并且事先要上传企业数据
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.cross.company.product.recommend-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.cross.company.product.recommend&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id，如果是超级买家则使用超买内部系统用的企业身份id，如果没有就自定义一个标志性的名字</param>
        /// <param name="endUserId">erp内部的个人身份id，如果是超级买家则使用超买内部系统用的个人身份id，如果没有就自定义一个标志性的名字</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCrossCompanyProductRecommendResult> AlibabaCrossCompanyProductRecommendAsync(string orgId, string endUserId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>物流信息同步
        /// ERP物流信息同步
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:logistics.record.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=logistics.record.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="endUserId">终端用户Id</param>
        /// <param name="fromAddress">发货地</param>
        /// <param name="toAddress">收货地</param>
        /// <param name="logisticsCorp">物流公司</param>
        /// <param name="logisticsOrderId">物流单号</param>
        /// <param name="orderIds">订单</param>
        /// <param name="operateTimeStamp">操作时间</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        ComAlibabaLinkplusCollectResult LogisticsRecordPut(string orgid, string endUserId, string fromAddress, string toAddress, string logisticsCorp, string logisticsOrderId, string orderIds, long operateTimeStamp);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>物流信息同步
        /// ERP物流信息同步
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:logistics.record.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=logistics.record.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="endUserId">终端用户Id</param>
        /// <param name="fromAddress">发货地</param>
        /// <param name="toAddress">收货地</param>
        /// <param name="logisticsCorp">物流公司</param>
        /// <param name="logisticsOrderId">物流单号</param>
        /// <param name="orderIds">订单</param>
        /// <param name="operateTimeStamp">操作时间</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComAlibabaLinkplusCollectResult> LogisticsRecordPutAsync(string orgid, string endUserId, string fromAddress, string toAddress, string logisticsCorp, string logisticsOrderId, string orderIds, long operateTimeStamp, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>模型草稿删除
        /// 模型草稿删除
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.delete&amp;v=1</summary>
        /// <param name="code">模型code</param>
        /// <param name="userId">被操作的用户Id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        void I3dDraftmodelDelete(string code, long userId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>模型草稿删除
        /// 模型草稿删除
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.delete&amp;v=1</summary>
        /// <param name="code">模型code</param>
        /// <param name="userId">被操作的用户Id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task I3dDraftmodelDeleteAsync(string code, long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>3D模型草稿获取
        /// 模型草稿获取，上传的模型，均以草稿方式存在。只有用户确认后，转为正式模型文件。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.get&amp;v=1</summary>
        /// <param name="code">模型code</param>
        /// <param name="userId">被操作的用户Id</param>
        /// <returns>3D互动模型数据</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Interactive3dApiModelI3dDraftModel I3dDraftmodelGet(string code, long userId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>3D模型草稿获取
        /// 模型草稿获取，上传的模型，均以草稿方式存在。只有用户确认后，转为正式模型文件。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.get&amp;v=1</summary>
        /// <param name="code">模型code</param>
        /// <param name="userId">被操作的用户Id</param>
        /// <returns>3D互动模型数据</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Interactive3dApiModelI3dDraftModel> I3dDraftmodelGetAsync(string code, long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>3D模型草稿上传
        /// 3D模型草稿上传
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.upload-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.upload&amp;v=1</summary>
        /// <param name="modelFile">模型流数据流，zip文件格式流</param>
        /// <param name="desc">模型描述</param>
        /// <param name="userId">操作的用户ID</param>
        /// <returns>上传模型数据</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Interactive3dApiModelI3dDraftModel I3dDraftmodelUpload(byte[] modelFile, string desc, long userId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>3D模型草稿上传
        /// 3D模型草稿上传
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.upload-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.upload&amp;v=1</summary>
        /// <param name="modelFile">模型流数据流，zip文件格式流</param>
        /// <param name="desc">模型描述</param>
        /// <param name="userId">操作的用户ID</param>
        /// <returns>上传模型数据</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Interactive3dApiModelI3dDraftModel> I3dDraftmodelUploadAsync(byte[] modelFile, string desc, long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>3D模型草稿列表获取
        /// 3D模型草稿列表获取，3D模型上传后以草稿方式存在，只有用户确认后可变为正式模型。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.list&amp;v=1</summary>
        /// <param name="userId">被操作的用户Id</param>
        /// <param name="pageSize">每页大小</param>
        /// <param name="pageStart">当前页</param>
        /// <param name="status">模型状态列表</param>
        /// <param name="desc">模型描述信息</param>
        /// <returns>3D模型草稿翻页数据</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Interactive3dPage I3dDraftmodelList(long userId, int pageSize, int pageStart, System.Collections.Generic.IEnumerable<string> status = null, string desc = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>3D模型草稿列表获取
        /// 3D模型草稿列表获取，3D模型上传后以草稿方式存在，只有用户确认后可变为正式模型。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.list&amp;v=1</summary>
        /// <param name="userId">被操作的用户Id</param>
        /// <param name="pageSize">每页大小</param>
        /// <param name="pageStart">当前页</param>
        /// <param name="status">模型状态列表</param>
        /// <param name="desc">模型描述信息</param>
        /// <returns>3D模型草稿翻页数据</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Interactive3dPage> I3dDraftmodelListAsync(long userId, int pageSize, int pageStart, System.Collections.Generic.IEnumerable<string> status = null, string desc = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>3D模型草稿重传覆盖
        /// 3D模型草稿重传覆盖，覆盖原来的模型草稿
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.reupload-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.reupload&amp;v=1</summary>
        /// <param name="modelFile">模型文件流</param>
        /// <param name="code">重传的模型code</param>
        /// <param name="desc">模型描述</param>
        /// <param name="userId">被操作的用户ID</param>
        /// <returns>3D模型草稿数据</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Interactive3dApiModelI3dDraftModel I3dDraftmodelReupload(byte[] modelFile, string code, string desc, long userId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>3D模型草稿重传覆盖
        /// 3D模型草稿重传覆盖，覆盖原来的模型草稿
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.reupload-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.reupload&amp;v=1</summary>
        /// <param name="modelFile">模型文件流</param>
        /// <param name="code">重传的模型code</param>
        /// <param name="desc">模型描述</param>
        /// <param name="userId">被操作的用户ID</param>
        /// <returns>3D模型草稿数据</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Interactive3dApiModelI3dDraftModel> I3dDraftmodelReuploadAsync(byte[] modelFile, string code, string desc, long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>3D互动模型信息获取
        /// 3D互动模型信息获取
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.model.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.model.get&amp;v=1</summary>
        /// <param name="code">模型code</param>
        /// <returns>test</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response7 I3dModelGet(string code);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>3D互动模型信息获取
        /// 3D互动模型信息获取
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.model.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.model.get&amp;v=1</summary>
        /// <param name="code">模型code</param>
        /// <returns>test</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response7> I3dModelGetAsync(string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>3D模型草稿资源文件url前缀获取
        /// 3D模型草稿资源文件url前缀获取，模型定义文件中的url目前设置为相对路径地址，需要获取资源前缀后，拼接url访问。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.resource.url.prefix.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.resource.url.prefix.get&amp;v=1</summary>
        /// <param name="code">模型code</param>
        /// <param name="userId">被操作的用户ID</param>
        /// <returns>模型草稿资源文件url前缀</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Response7 I3dDraftmodelResourceUrlPrefixGet(string code, long userId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>3D模型草稿资源文件url前缀获取
        /// 3D模型草稿资源文件url前缀获取，模型定义文件中的url目前设置为相对路径地址，需要获取资源前缀后，拼接url访问。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.resource.url.prefix.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.resource.url.prefix.get&amp;v=1</summary>
        /// <param name="code">模型code</param>
        /// <param name="userId">被操作的用户ID</param>
        /// <returns>模型草稿资源文件url前缀</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response7> I3dDraftmodelResourceUrlPrefixGetAsync(string code, long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>模型草稿确认
        /// 模型草稿确认，确认后转为正式模型
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.confirm-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.confirm&amp;v=1</summary>
        /// <param name="code">模型code</param>
        /// <param name="userId">被操作的用户id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        void I3dDraftmodelConfirm(string code, string userId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>模型草稿确认
        /// 模型草稿确认，确认后转为正式模型
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.confirm-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.confirm&amp;v=1</summary>
        /// <param name="code">模型code</param>
        /// <param name="userId">被操作的用户id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task I3dDraftmodelConfirmAsync(string code, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>创建订单前预览数据接口
        /// 订单创建只允许购买同一个供应商的商品。本接口返回创建订单相关的优惠等信息。1、校验商品数据是否允许订购。2、校验代销关系3、校验库存、起批量、是否满足混批条件。Order creation only allows purchasing items from the same supplier. This interface returns information such as the order-related discount offers. 1. Verify if the product is allowed to be ordered. 2. Verify the consignment relationship. 3. Check the inventory, minimum order quantity, whether to meet the mixed batch conditions.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.createOrder.previewWithOBUid-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.createOrder.previewWithOBUid&amp;v=1</summary>
        /// <param name="obUid">代购用户唯一Id</param>
        /// <param name="addressParam">收货地址信息</param>
        /// <param name="cargoParamList">商品信息</param>
        /// <param name="invoiceParam">发票信息</param>
        /// <param name="flow">general（创建大市场订单），saleproxy（创建分销订单）。saleproxy流程将校验分销关系</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_007	- 与供应商的代销关系不存在,不能使用saleproxy通道下单。(flow不能使用slproxy)
        /// 500_005	- 商品[offerId]的购买数量不满足起批量限制。(商品的购买数量小于起批量)
        /// 500_006	- 商品[offerId]的购买数量或者价格不满足混批限制。(商品的购买数量或者总金额均不满足混批条件)
        /// 500_004	- 商品[offerId_specId]库存不足，请核实库存后订购。(商品的某个规格库存不足)
        /// 500_002	- 商品[offerId]不属于同一卖家或者没有指定specId。(存在多个卖家的商品或者商品没有指定specId)
        /// 500_003	- 商品[offerId ]不属于同一卖家或者规格[specId] 不属于商品[offerId](存在多个卖家的商品或者商品不存在specId的规格)
        /// 500_001	- 商品[offerId]不支持在线交易，无法下单。(商品不支持在线交易，目前不能购买)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCreateOrderPreviewWithOBUidResult AlibabaCreateOrderPreviewWithOBUid(string obUid, AlibabaTradeFastAddress addressParam, System.Collections.Generic.IEnumerable<AlibabaTradeFastCargo> cargoParamList, AlibabaTradeFastInvoice invoiceParam = null, string flow = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建订单前预览数据接口
        /// 订单创建只允许购买同一个供应商的商品。本接口返回创建订单相关的优惠等信息。1、校验商品数据是否允许订购。2、校验代销关系3、校验库存、起批量、是否满足混批条件。Order creation only allows purchasing items from the same supplier. This interface returns information such as the order-related discount offers. 1. Verify if the product is allowed to be ordered. 2. Verify the consignment relationship. 3. Check the inventory, minimum order quantity, whether to meet the mixed batch conditions.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.createOrder.previewWithOBUid-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.createOrder.previewWithOBUid&amp;v=1</summary>
        /// <param name="obUid">代购用户唯一Id</param>
        /// <param name="addressParam">收货地址信息</param>
        /// <param name="cargoParamList">商品信息</param>
        /// <param name="invoiceParam">发票信息</param>
        /// <param name="flow">general（创建大市场订单），saleproxy（创建分销订单）。saleproxy流程将校验分销关系</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_007	- 与供应商的代销关系不存在,不能使用saleproxy通道下单。(flow不能使用slproxy)
        /// 500_005	- 商品[offerId]的购买数量不满足起批量限制。(商品的购买数量小于起批量)
        /// 500_006	- 商品[offerId]的购买数量或者价格不满足混批限制。(商品的购买数量或者总金额均不满足混批条件)
        /// 500_004	- 商品[offerId_specId]库存不足，请核实库存后订购。(商品的某个规格库存不足)
        /// 500_002	- 商品[offerId]不属于同一卖家或者没有指定specId。(存在多个卖家的商品或者商品没有指定specId)
        /// 500_003	- 商品[offerId ]不属于同一卖家或者规格[specId] 不属于商品[offerId](存在多个卖家的商品或者商品不存在specId的规格)
        /// 500_001	- 商品[offerId]不支持在线交易，无法下单。(商品不支持在线交易，目前不能购买)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCreateOrderPreviewWithOBUidResult> AlibabaCreateOrderPreviewWithOBUidAsync(string obUid, AlibabaTradeFastAddress addressParam, System.Collections.Generic.IEnumerable<AlibabaTradeFastCargo> cargoParamList, AlibabaTradeFastInvoice invoiceParam = null, string flow = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>跨境订单创建
        /// 跨境专用订单创建。创建订单最多允许100个SKU，且必须为同一个供应商的商品。超过50个SKU或者一些特殊情况会一次创建多个个订单并返回多个订单号。
        /// 支持大市场及分销两个场景。根据当前授权用户,区分主子账号下单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.createCrossOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.createCrossOrder&amp;v=1</summary>
        /// <param name="flow">流程</param>
        /// <param name="addressParam">收货地址信息</param>
        /// <param name="cargoParamList">商品信息</param>
        /// <param name="message">买家留言</param>
        /// <param name="invoiceParam">发票信息</param>
        /// <param name="tradeType">由于不同的商品支持的交易方式不同，没有一种交易方式是全局通用的，所以当前下单可使用的交易方式必须通过下单预览接口的tradeModeNameList获取。交易方式类型说明：fxassure（交易4.0通用担保交易），alipay（大市场通用的支付宝担保交易（目前在做切流，后续会下掉）），period（普通账期交易）, assure（大买家企业采购询报价下单时需要使用的担保交易流程）, creditBuy（诚E赊），bank（银行转账），631staged（631分阶段付款），37staged（37分阶段）；此字段不传则系统默认会选取一个可用的交易方式下单，默认使用的方式是支付宝担宝交易。</param>
        /// <param name="shopPromotionId">店铺优惠ID，通过“创建订单前预览数据接口”获得。为空默认使用默认优惠</param>
        /// <param name="anonymousBuyer">是否匿名下单</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// not support tradeType:【XXXX】	- 不支持的交易类型(当前交易可支持的交易类型，需要通过预览接口的tradeModeNameList字段获取)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradeCreateCrossOrderResult AlibabaTradeCreateCrossOrder(string flow, AlibabaTradeFastAddress addressParam, System.Collections.Generic.IEnumerable<AlibabaTradeFastCargo> cargoParamList, string message = null, AlibabaTradeFastInvoice invoiceParam = null, string tradeType = null, string shopPromotionId = null, bool? anonymousBuyer = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>跨境订单创建
        /// 跨境专用订单创建。创建订单最多允许100个SKU，且必须为同一个供应商的商品。超过50个SKU或者一些特殊情况会一次创建多个个订单并返回多个订单号。
        /// 支持大市场及分销两个场景。根据当前授权用户,区分主子账号下单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.createCrossOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.createCrossOrder&amp;v=1</summary>
        /// <param name="flow">流程</param>
        /// <param name="addressParam">收货地址信息</param>
        /// <param name="cargoParamList">商品信息</param>
        /// <param name="message">买家留言</param>
        /// <param name="invoiceParam">发票信息</param>
        /// <param name="tradeType">由于不同的商品支持的交易方式不同，没有一种交易方式是全局通用的，所以当前下单可使用的交易方式必须通过下单预览接口的tradeModeNameList获取。交易方式类型说明：fxassure（交易4.0通用担保交易），alipay（大市场通用的支付宝担保交易（目前在做切流，后续会下掉）），period（普通账期交易）, assure（大买家企业采购询报价下单时需要使用的担保交易流程）, creditBuy（诚E赊），bank（银行转账），631staged（631分阶段付款），37staged（37分阶段）；此字段不传则系统默认会选取一个可用的交易方式下单，默认使用的方式是支付宝担宝交易。</param>
        /// <param name="shopPromotionId">店铺优惠ID，通过“创建订单前预览数据接口”获得。为空默认使用默认优惠</param>
        /// <param name="anonymousBuyer">是否匿名下单</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// not support tradeType:【XXXX】	- 不支持的交易类型(当前交易可支持的交易类型，需要通过预览接口的tradeModeNameList字段获取)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradeCreateCrossOrderResult> AlibabaTradeCreateCrossOrderAsync(string flow, AlibabaTradeFastAddress addressParam, System.Collections.Generic.IEnumerable<AlibabaTradeFastCargo> cargoParamList, string message = null, AlibabaTradeFastInvoice invoiceParam = null, string tradeType = null, string shopPromotionId = null, bool? anonymousBuyer = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>查询订单可以支持的支付渠道
        /// 查询未支付订单可以使用的支付方式或者支付渠道
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.payWay.query-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.payWay.query&amp;v=1</summary>
        /// <param name="orderId">订单号</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_2	- 没有权限获取该订单可支付方式。(检查授权用户，授权账号为买家，且必须为买家主账号。)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaTradePayWayQueryResult AlibabaTradePayWayQuery(string orderId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询订单可以支持的支付渠道
        /// 查询未支付订单可以使用的支付方式或者支付渠道
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.payWay.query-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.payWay.query&amp;v=1</summary>
        /// <param name="orderId">订单号</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_2	- 没有权限获取该订单可支付方式。(检查授权用户，授权账号为买家，且必须为买家主账号。)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaTradePayWayQueryResult> AlibabaTradePayWayQueryAsync(string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>批量获取订单的支付链接
        /// 通过ERP付款时，可以通过本API获取批量支付的收银台的链接。
        /// 单个订单返回1688收银台地址，多个订单返回支付宝收银台地址。
        /// ERP可以引导用户跳转到收银台链接完成支付动作，支付前会校验用户在1688的登陆状态。
        /// 
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.alipay.url.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.alipay.url.get&amp;v=1</summary>
        /// <param name="orderIdList">订单Id列表,最多批量30个订单，订单过多会导致超时，建议一次10个订单</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// Batch pay : not surport MANUAL-TRADE!	- Batch pay : not surport MANUAL-TRADE!(未补充买家收件信息的邀约订单不能合并付款，是否邀约订单可以通过订单详情里面的baseInfo.sellerOrder字段判断)
        /// 操作库存失败:PRODUCT_TRADE_STAT_ERROR	- inventoryErrorIds:[16397675**722128**](存在付款减库存订单且扣减库存失败。)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaAlipayUrlGetResult AlibabaAlipayUrlGet(System.Collections.Generic.IEnumerable<long> orderIdList);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>批量获取订单的支付链接
        /// 通过ERP付款时，可以通过本API获取批量支付的收银台的链接。
        /// 单个订单返回1688收银台地址，多个订单返回支付宝收银台地址。
        /// ERP可以引导用户跳转到收银台链接完成支付动作，支付前会校验用户在1688的登陆状态。
        /// 
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.alipay.url.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.alipay.url.get&amp;v=1</summary>
        /// <param name="orderIdList">订单Id列表,最多批量30个订单，订单过多会导致超时，建议一次10个订单</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// Batch pay : not surport MANUAL-TRADE!	- Batch pay : not surport MANUAL-TRADE!(未补充买家收件信息的邀约订单不能合并付款，是否邀约订单可以通过订单详情里面的baseInfo.sellerOrder字段判断)
        /// 操作库存失败:PRODUCT_TRADE_STAT_ERROR	- inventoryErrorIds:[16397675**722128**](存在付款减库存订单且扣减库存失败。)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaAlipayUrlGetResult> AlibabaAlipayUrlGetAsync(System.Collections.Generic.IEnumerable<long> orderIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取使用跨境宝支付的支付链接
        /// 获取使用跨境宝支付的支付链接
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.crossBorderPay.url.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.crossBorderPay.url.get&amp;v=1</summary>
        /// <param name="orderIdList">订单Id列表,最多批量30个订单，订单过多会导致超时，建议一次10个订单</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400_4	- 无可使用支付渠道[跨境宝]付款的订单(订单列表里面没有可以使用跨境宝支付的订单)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCrossBorderPayUrlGetResult AlibabaCrossBorderPayUrlGet(System.Collections.Generic.IEnumerable<long> orderIdList);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取使用跨境宝支付的支付链接
        /// 获取使用跨境宝支付的支付链接
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.crossBorderPay.url.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.crossBorderPay.url.get&amp;v=1</summary>
        /// <param name="orderIdList">订单Id列表,最多批量30个订单，订单过多会导致超时，建议一次10个订单</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400_4	- 无可使用支付渠道[跨境宝]付款的订单(订单列表里面没有可以使用跨境宝支付的订单)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCrossBorderPayUrlGetResult> AlibabaCrossBorderPayUrlGetAsync(System.Collections.Generic.IEnumerable<long> orderIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>获取使用诚e赊支付的支付链接
        /// 获取使用诚e赊支付的支付链接
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.creditPay.url.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.creditPay.url.get&amp;v=1</summary>
        /// <param name="orderIdList">订单Id列表,最多批量30个订单，订单过多会导致超时，建议一次10个订单</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AlibabaCreditPayUrlGetResult AlibabaCreditPayUrlGet(System.Collections.Generic.IEnumerable<long> orderIdList);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取使用诚e赊支付的支付链接
        /// 获取使用诚e赊支付的支付链接
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.creditPay.url.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.creditPay.url.get&amp;v=1</summary>
        /// <param name="orderIdList">订单Id列表,最多批量30个订单，订单过多会导致超时，建议一次10个订单</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlibabaCreditPayUrlGetResult> AlibabaCreditPayUrlGetAsync(System.Collections.Generic.IEnumerable<long> orderIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.3.0 (NJsonSchema v10.0.27.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class AlibabaStandardApiClient : IAlibabaStandardApiClient
    {
        private string _baseUrl = "https://gw.open.1688.com/";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public AlibabaStandardApiClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>查询标准化产品单元信息列表
        /// 一个类目下不同的规格属性代表一个SPU, 该API根据1688的类目获取标准化产品单元信息。注意：并不是所有的类目都拥有标准化产品单元信息。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.category.searchSPUInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.category.searchSPUInfo&amp;v=1</summary>
        /// <param name="categoryId">类目Id</param>
        /// <param name="index">当前页，无默认值</param>
        /// <param name="size">每页多少记录，无默认值</param>
        /// <param name="isNeedKeyAttr">是否需要关键属性</param>
        /// <param name="isOnlyKeyAttr">是否只需要关键属性</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400_1	- 查询时每页数量不能超过20。(每页最大的记录数是20)
        /// 5002	- 已授权用户必须传递aliId(API需要授权，请检查accessToken)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCategorySearchSPUInfoResult AlibabaCategorySearchSPUInfo(long categoryId, int index, int size, bool? isNeedKeyAttr = null, bool? isOnlyKeyAttr = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCategorySearchSPUInfoAsync(categoryId, index, size, isNeedKeyAttr, isOnlyKeyAttr, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询标准化产品单元信息列表
        /// 一个类目下不同的规格属性代表一个SPU, 该API根据1688的类目获取标准化产品单元信息。注意：并不是所有的类目都拥有标准化产品单元信息。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.category.searchSPUInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.category.searchSPUInfo&amp;v=1</summary>
        /// <param name="categoryId">类目Id</param>
        /// <param name="index">当前页，无默认值</param>
        /// <param name="size">每页多少记录，无默认值</param>
        /// <param name="isNeedKeyAttr">是否需要关键属性</param>
        /// <param name="isOnlyKeyAttr">是否只需要关键属性</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400_1	- 查询时每页数量不能超过20。(每页最大的记录数是20)
        /// 5002	- 已授权用户必须传递aliId(API需要授权，请检查accessToken)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCategorySearchSPUInfoResult> AlibabaCategorySearchSPUInfoAsync(long categoryId, int index, int size, bool? isNeedKeyAttr = null, bool? isOnlyKeyAttr = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.category.searchSPUInfo/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (categoryId == null)
                        throw new System.ArgumentNullException("categoryId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(categoryId, System.Globalization.CultureInfo.InvariantCulture)), "categoryId");
                    }
                    if (index == null)
                        throw new System.ArgumentNullException("index");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(index, System.Globalization.CultureInfo.InvariantCulture)), "index");
                    }
                    if (size == null)
                        throw new System.ArgumentNullException("size");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture)), "size");
                    }
                    if (isNeedKeyAttr != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(isNeedKeyAttr, System.Globalization.CultureInfo.InvariantCulture)), "isNeedKeyAttr");
                    }
                    if (isOnlyKeyAttr != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(isOnlyKeyAttr, System.Globalization.CultureInfo.InvariantCulture)), "isOnlyKeyAttr");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCategorySearchSPUInfoResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCategorySearchSPUInfoResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取类目属性层级级联信息
        /// 根据类目ID和层级属性表达式获取级联属性信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:category.level.attr.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=category.level.attr.get&amp;v=1</summary>
        /// <param name="catId">叶子类目ID</param>
        /// <param name="pathValues">属性值路径</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 200	- 成功(成功)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public CategoryLevelAttrGetResult CategoryLevelAttrGet(long catId, string pathValues)
        {
            return System.Threading.Tasks.Task.Run(async () => await CategoryLevelAttrGetAsync(catId, pathValues, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取类目属性层级级联信息
        /// 根据类目ID和层级属性表达式获取级联属性信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:category.level.attr.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=category.level.attr.get&amp;v=1</summary>
        /// <param name="catId">叶子类目ID</param>
        /// <param name="pathValues">属性值路径</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 200	- 成功(成功)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CategoryLevelAttrGetResult> CategoryLevelAttrGetAsync(long catId, string pathValues, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/category.level.attr.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (catId == null)
                        throw new System.ArgumentNullException("catId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(catId, System.Globalization.CultureInfo.InvariantCulture)), "catId");
                    }
                    if (pathValues == null)
                        throw new System.ArgumentNullException("pathValues");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pathValues, System.Globalization.CultureInfo.InvariantCulture)), "pathValues");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CategoryLevelAttrGetResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CategoryLevelAttrGetResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取类目属性
        /// 根据类目ID获取类目属性
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.category.attribute.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.category.attribute.get&amp;v=1</summary>
        /// <param name="categoryID">类目ID</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_2	- 数据准备中，请稍后重试。(数据正在后台加载，稍后重试，间隔时间建议1～3s)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCategoryAttributeGetResult AlibabaCategoryAttributeGet(long categoryID, string webSite)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCategoryAttributeGetAsync(categoryID, webSite, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取类目属性
        /// 根据类目ID获取类目属性
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.category.attribute.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.category.attribute.get&amp;v=1</summary>
        /// <param name="categoryID">类目ID</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_2	- 数据准备中，请稍后重试。(数据正在后台加载，稍后重试，间隔时间建议1～3s)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCategoryAttributeGetResult> AlibabaCategoryAttributeGetAsync(long categoryID, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.category.attribute.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (categoryID == null)
                        throw new System.ArgumentNullException("categoryID");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(categoryID, System.Globalization.CultureInfo.InvariantCulture)), "categoryID");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCategoryAttributeGetResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCategoryAttributeGetResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取标准化产品单元信息(1688)
        /// 这是根据1688的类目属性值获取标准化产品单元信息。注意：并不是所有的类目都拥有标准化产品单元信息。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.category.getSPUInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.category.getSPUInfo&amp;v=1</summary>
        /// <param name="categoryId">类目ID</param>
        /// <param name="keyAttrs">类目的规格属性列表</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400_1	- 查询时类目关键属性必须输入(入参keyAttrs是必填项)
        /// 400_2	- 查询时类目关键属性键值(fid, value)必须输入(入参keyAttrs中的属性值是必填项)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCategoryGetSPUInfoResult AlibabaCategoryGetSPUInfo(long categoryId, System.Collections.Generic.IEnumerable<AlibabaCategoryFeatureAttribute2> keyAttrs)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCategoryGetSPUInfoAsync(categoryId, keyAttrs, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取标准化产品单元信息(1688)
        /// 这是根据1688的类目属性值获取标准化产品单元信息。注意：并不是所有的类目都拥有标准化产品单元信息。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.category.getSPUInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.category.getSPUInfo&amp;v=1</summary>
        /// <param name="categoryId">类目ID</param>
        /// <param name="keyAttrs">类目的规格属性列表</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400_1	- 查询时类目关键属性必须输入(入参keyAttrs是必填项)
        /// 400_2	- 查询时类目关键属性键值(fid, value)必须输入(入参keyAttrs中的属性值是必填项)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCategoryGetSPUInfoResult> AlibabaCategoryGetSPUInfoAsync(long categoryId, System.Collections.Generic.IEnumerable<AlibabaCategoryFeatureAttribute2> keyAttrs, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.category.getSPUInfo/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (categoryId == null)
                        throw new System.ArgumentNullException("categoryId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(categoryId, System.Globalization.CultureInfo.InvariantCulture)), "categoryId");
                    }
                    if (keyAttrs == null)
                        throw new System.ArgumentNullException("keyAttrs");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(keyAttrs, System.Globalization.CultureInfo.InvariantCulture)), "keyAttrs");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCategoryGetSPUInfoResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCategoryGetSPUInfoResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>根据关键字搜索类目
        /// 根据关键字搜索发布类目，发布类目都是叶子类目
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.category.searchByKeyword-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.category.searchByKeyword&amp;v=1</summary>
        /// <param name="keyword">叶子类目关键字</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 查询失败	- 查询失败：没有相应的类目信息(请检查关键字是否正确)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCategorySearchByKeywordResult AlibabaCategorySearchByKeyword(string keyword)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCategorySearchByKeywordAsync(keyword, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据关键字搜索类目
        /// 根据关键字搜索发布类目，发布类目都是叶子类目
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.category.searchByKeyword-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.category.searchByKeyword&amp;v=1</summary>
        /// <param name="keyword">叶子类目关键字</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 查询失败	- 查询失败：没有相应的类目信息(请检查关键字是否正确)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCategorySearchByKeywordResult> AlibabaCategorySearchByKeywordAsync(string keyword, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.category.searchByKeyword/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (keyword == null)
                        throw new System.ArgumentNullException("keyword");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(keyword, System.Globalization.CultureInfo.InvariantCulture)), "keyword");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCategorySearchByKeywordResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCategorySearchByKeywordResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>根据类目Id查询类目
        /// 类目查询。如果需要获取所有1688类目信息，需要从根类目开始遍历获取整个类目树。即：先传0获取所有一级类目ID，然后在通过获取到的一级类目ID遍历获取所二级类目，最后通过遍历二级类目ID获取三级类目。注意：1688类目仅三级，三级类目即发布商品所需的叶子类目。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.category.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.category.get&amp;v=1</summary>
        /// <param name="categoryID">类目id,必须大于等于0， 如果为0，则查询所有一级类目</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCategoryGetResult AlibabaCategoryGet(long categoryID)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCategoryGetAsync(categoryID, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据类目Id查询类目
        /// 类目查询。如果需要获取所有1688类目信息，需要从根类目开始遍历获取整个类目树。即：先传0获取所有一级类目ID，然后在通过获取到的一级类目ID遍历获取所二级类目，最后通过遍历二级类目ID获取三级类目。注意：1688类目仅三级，三级类目即发布商品所需的叶子类目。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.category.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.category.get&amp;v=1</summary>
        /// <param name="categoryID">类目id,必须大于等于0， 如果为0，则查询所有一级类目</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCategoryGetResult> AlibabaCategoryGetAsync(long categoryID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.category.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (categoryID == null)
                        throw new System.ArgumentNullException("categoryID");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(categoryID, System.Globalization.CultureInfo.InvariantCulture)), "categoryID");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCategoryGetResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCategoryGetResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>用户自定义类目创建（1688）
        /// 在1688中文中，创建用户的自定义类目。如果是一级类目，父类目Id传值0。如果是子类目，父类目传上一级类目的id。创建成功的话，会返回新的类目的id
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.userDefine.category.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.userDefine.category.add&amp;v=1</summary>
        /// <param name="groupName">要新增的类目的名称</param>
        /// <param name="parentID">上一级类目的id。如果要创建的是一级类目，此处值填0</param>
        /// <returns>新建的类目的id</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response AlibabaUserDefineCategoryAdd(string groupName, long parentID)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaUserDefineCategoryAddAsync(groupName, parentID, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>用户自定义类目创建（1688）
        /// 在1688中文中，创建用户的自定义类目。如果是一级类目，父类目Id传值0。如果是子类目，父类目传上一级类目的id。创建成功的话，会返回新的类目的id
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.userDefine.category.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.userDefine.category.add&amp;v=1</summary>
        /// <param name="groupName">要新增的类目的名称</param>
        /// <param name="parentID">上一级类目的id。如果要创建的是一级类目，此处值填0</param>
        /// <returns>新建的类目的id</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response> AlibabaUserDefineCategoryAddAsync(string groupName, long parentID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.userDefine.category.add/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (groupName == null)
                        throw new System.ArgumentNullException("groupName");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(groupName, System.Globalization.CultureInfo.InvariantCulture)), "groupName");
                    }
                    if (parentID == null)
                        throw new System.ArgumentNullException("parentID");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(parentID, System.Globalization.CultureInfo.InvariantCulture)), "parentID");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>删除商品
        /// 将某个商品删除到回收站中，可在网站手工清除或恢复。此API为国际站与1688通用。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.delete&amp;v=1</summary>
        /// <param name="productID">商品ID</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaProductDeleteResult AlibabaProductDelete(long productID, string webSite)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaProductDeleteAsync(productID, webSite, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除商品
        /// 将某个商品删除到回收站中，可在网站手工清除或恢复。此API为国际站与1688通用。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.delete&amp;v=1</summary>
        /// <param name="productID">商品ID</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaProductDeleteResult> AlibabaProductDeleteAsync(long productID, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.product.delete/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (productID == null)
                        throw new System.ArgumentNullException("productID");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productID, System.Globalization.CultureInfo.InvariantCulture)), "productID");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaProductDeleteResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaProductDeleteResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>商品转为过期
        /// 商品转为过期
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.expire-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.expire&amp;v=1</summary>
        /// <param name="productIds">过期商品的ID列表</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 1003404	- 对不起,没有找到相关的记录!(商品ID错误)
        /// 1000600	- 操作失败。(商品已过期)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaProductExpireResult AlibabaProductExpire(System.Collections.Generic.IEnumerable<long> productIds, string webSite)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaProductExpireAsync(productIds, webSite, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>商品转为过期
        /// 商品转为过期
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.expire-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.expire&amp;v=1</summary>
        /// <param name="productIds">过期商品的ID列表</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 1003404	- 对不起,没有找到相关的记录!(商品ID错误)
        /// 1000600	- 操作失败。(商品已过期)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaProductExpireResult> AlibabaProductExpireAsync(System.Collections.Generic.IEnumerable<long> productIds, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.product.expire/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (productIds == null)
                        throw new System.ArgumentNullException("productIds");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productIds, System.Globalization.CultureInfo.InvariantCulture)), "productIds");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaProductExpireResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaProductExpireResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>重发商品
        /// 重发商品。请注意：每天重发商品次数上限为400，具体1688商品重发规则请查看https://114.1688.com/kb/search.htm?keywords=%D6%D8%B7%A2
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.repost-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.repost&amp;v=1</summary>
        /// <param name="productIds">重发商品ID列表</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 不应该出现的数据错误!	- 不应该出现的数据错误!(请确认商品是否符合重发规则，1688重发规则查看：https://114.1688.com/kb/search.htm?keywords=%D6%D8%B7%A2)
        /// 1004422	- 产品信息今天重发过!(商品已经重发过)
        /// 1004424	- 产品信息今天刚新发!(新发商品不允许重发)
        /// 1004421	- 当前重发数量超过限制(每天重发商品次数上限为400，具体1688商品重发规则请查看https://114.1688.com/kb/search.htm?keywords=%D6%D8%B7%A2)
        /// 1003404	- 对不起,没有找到相关的记录!(商品不存在，检查商品Id)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaProductRepostResult AlibabaProductRepost(System.Collections.Generic.IEnumerable<long> productIds, string webSite)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaProductRepostAsync(productIds, webSite, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>重发商品
        /// 重发商品。请注意：每天重发商品次数上限为400，具体1688商品重发规则请查看https://114.1688.com/kb/search.htm?keywords=%D6%D8%B7%A2
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.repost-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.repost&amp;v=1</summary>
        /// <param name="productIds">重发商品ID列表</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 不应该出现的数据错误!	- 不应该出现的数据错误!(请确认商品是否符合重发规则，1688重发规则查看：https://114.1688.com/kb/search.htm?keywords=%D6%D8%B7%A2)
        /// 1004422	- 产品信息今天重发过!(商品已经重发过)
        /// 1004424	- 产品信息今天刚新发!(新发商品不允许重发)
        /// 1004421	- 当前重发数量超过限制(每天重发商品次数上限为400，具体1688商品重发规则请查看https://114.1688.com/kb/search.htm?keywords=%D6%D8%B7%A2)
        /// 1003404	- 对不起,没有找到相关的记录!(商品不存在，检查商品Id)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaProductRepostResult> AlibabaProductRepostAsync(System.Collections.Generic.IEnumerable<long> productIds, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.product.repost/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (productIds == null)
                        throw new System.ArgumentNullException("productIds");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productIds, System.Globalization.CultureInfo.InvariantCulture)), "productIds");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaProductRepostResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaProductRepostResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>未上架商品重新上架
        /// 未上架商品重新上架。请注意：会员每天最多上架400条，非诚信通或者买家保障会员，食品美容行业如果有限制，则不能上架，橡塑现货条数限制，已上网最多200条。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.republish-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.republish&amp;v=1</summary>
        /// <param name="productIds">重发商品ID列表</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// DATA_ERROR	- 手动过期或自然过期的产品才能上架: 575343780XXX(商品已经是上架状态)
        /// DATA_ERROR	- 商业信息没有找到!:575717467XX(商品不存在)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaProductRepublishResult AlibabaProductRepublish(System.Collections.Generic.IEnumerable<long> productIds)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaProductRepublishAsync(productIds, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>未上架商品重新上架
        /// 未上架商品重新上架。请注意：会员每天最多上架400条，非诚信通或者买家保障会员，食品美容行业如果有限制，则不能上架，橡塑现货条数限制，已上网最多200条。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.republish-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.republish&amp;v=1</summary>
        /// <param name="productIds">重发商品ID列表</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// DATA_ERROR	- 手动过期或自然过期的产品才能上架: 575343780XXX(商品已经是上架状态)
        /// DATA_ERROR	- 商业信息没有找到!:575717467XX(商品不存在)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaProductRepublishResult> AlibabaProductRepublishAsync(System.Collections.Generic.IEnumerable<long> productIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.product.republish/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (productIds == null)
                        throw new System.ArgumentNullException("productIds");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productIds, System.Globalization.CultureInfo.InvariantCulture)), "productIds");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaProductRepublishResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaProductRepublishResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取授权用户的商品自定义分类列表
        /// 获取授权用户的1688商品自定义分类列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.userCategory.list.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.userCategory.list.get&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaUserCategoryListGetResult AlibabaUserCategoryListGet()
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaUserCategoryListGetAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取授权用户的商品自定义分类列表
        /// 获取授权用户的1688商品自定义分类列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.userCategory.list.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.userCategory.list.get&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaUserCategoryListGetResult> AlibabaUserCategoryListGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.userCategory.list.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaUserCategoryListGetResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaUserCategoryListGetResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>增量修改商品信息
        /// 增量修改商品信息。该API中的入参如果不传递，API将忽略该参数，不会对商品的该字段进行置空或者修改。
        /// free会员不能修改商品信息，只有开通旺铺后才可以修改
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.incrementModify-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.incrementModify&amp;v=1</summary>
        /// <param name="productID">商品ID</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <param name="subject">商品标题，如果不传递或者传递空字符串则不作任何处理</param>
        /// <param name="description">商品描述，如果不传递或者传递空字符串则不作任何处理.</param>
        /// <param name="image">商品图片，如果不传递或者传递空字符串则不作任何处理请注意，如果ISV需要修改image字段，那么subject和description必须至少传入其一</param>
        /// <param name="supportOnlineTrade">是否允许在线交易</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 404	- 无法找到productID[57576785537]对应的商品。(商品ID错误，检查商品ID)
        /// 401	- 您不是该商品[554079035899]的拥有者，无法修改商品信息。(只能修改自己的商品)
        /// 500001	- 商品修改失败，主图不可为空且总数不得超过五张。(主图不可为空且总数不得超过五张。)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaProductIncrementModifyResult AlibabaProductIncrementModify(long productID, string webSite, string subject = null, string description = null, AlibabaProductProductImageInfo image = null, bool? supportOnlineTrade = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaProductIncrementModifyAsync(productID, webSite, subject, description, image, supportOnlineTrade, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>增量修改商品信息
        /// 增量修改商品信息。该API中的入参如果不传递，API将忽略该参数，不会对商品的该字段进行置空或者修改。
        /// free会员不能修改商品信息，只有开通旺铺后才可以修改
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.incrementModify-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.incrementModify&amp;v=1</summary>
        /// <param name="productID">商品ID</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <param name="subject">商品标题，如果不传递或者传递空字符串则不作任何处理</param>
        /// <param name="description">商品描述，如果不传递或者传递空字符串则不作任何处理.</param>
        /// <param name="image">商品图片，如果不传递或者传递空字符串则不作任何处理请注意，如果ISV需要修改image字段，那么subject和description必须至少传入其一</param>
        /// <param name="supportOnlineTrade">是否允许在线交易</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 404	- 无法找到productID[57576785537]对应的商品。(商品ID错误，检查商品ID)
        /// 401	- 您不是该商品[554079035899]的拥有者，无法修改商品信息。(只能修改自己的商品)
        /// 500001	- 商品修改失败，主图不可为空且总数不得超过五张。(主图不可为空且总数不得超过五张。)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaProductIncrementModifyResult> AlibabaProductIncrementModifyAsync(long productID, string webSite, string subject = null, string description = null, AlibabaProductProductImageInfo image = null, bool? supportOnlineTrade = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.product.incrementModify/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (productID == null)
                        throw new System.ArgumentNullException("productID");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productID, System.Globalization.CultureInfo.InvariantCulture)), "productID");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    if (subject != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(subject, System.Globalization.CultureInfo.InvariantCulture)), "subject");
                    }
                    if (description != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture)), "description");
                    }
                    if (image != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(image, System.Globalization.CultureInfo.InvariantCulture)), "image");
                    }
                    if (supportOnlineTrade != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(supportOnlineTrade, System.Globalization.CultureInfo.InvariantCulture)), "supportOnlineTrade");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaProductIncrementModifyResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaProductIncrementModifyResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>设置是否启用自定义分类
        /// 设置是否启用自定义分类，启用后在旺铺中将按自定义分类展示商品。此API对国际站无效
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.group.setSwitch-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.group.setSwitch&amp;v=1</summary>
        /// <param name="switchValue">设置状态，true：已开启；false：未开启</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <returns>是否设置成功，true设置成功，false设置失败</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response2 AlibabaProductGroupSetSwitch(bool switchValue, string webSite)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaProductGroupSetSwitchAsync(switchValue, webSite, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>设置是否启用自定义分类
        /// 设置是否启用自定义分类，启用后在旺铺中将按自定义分类展示商品。此API对国际站无效
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.group.setSwitch-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.group.setSwitch&amp;v=1</summary>
        /// <param name="switchValue">设置状态，true：已开启；false：未开启</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <returns>是否设置成功，true设置成功，false设置失败</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response2> AlibabaProductGroupSetSwitchAsync(bool switchValue, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.product.group.setSwitch/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (switchValue == null)
                        throw new System.ArgumentNullException("switchValue");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(switchValue, System.Globalization.CultureInfo.InvariantCulture)), "switchValue");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response2);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取商品
        /// 由商品ID获取商品详细信息，请注意：只能查询自己所有的产品。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.get&amp;v=1</summary>
        /// <param name="productID">商品ID</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="scene">业务场景 零售通(lst) 1688市场(1688)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaProductGetResult AlibabaProductGet(long productID, string webSite = null, string scene = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaProductGetAsync(productID, webSite, scene, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取商品
        /// 由商品ID获取商品详细信息，请注意：只能查询自己所有的产品。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.get&amp;v=1</summary>
        /// <param name="productID">商品ID</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="scene">业务场景 零售通(lst) 1688市场(1688)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaProductGetResult> AlibabaProductGetAsync(long productID, string webSite = null, string scene = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.product.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (productID == null)
                        throw new System.ArgumentNullException("productID");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productID, System.Globalization.CultureInfo.InvariantCulture)), "productID");
                    }
                    if (webSite != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    if (scene != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(scene, System.Globalization.CultureInfo.InvariantCulture)), "scene");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaProductGetResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaProductGetResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>发布商品
        /// 发布一个新商品，此API为国际站与1688通用。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.add&amp;v=1</summary>
        /// <param name="productType">商品类型，在线批发商品(wholesale)或者询盘商品(sourcing)，1688网站缺省为wholesale</param>
        /// <param name="categoryID">类目ID，由相应类目API获取</param>
        /// <param name="subject">商品标题，最多128个字符。标题内容将被系统切分作为关键字，因此API将不再单独提供关键字字段。</param>
        /// <param name="language">语种，参见FAQ 语种枚举值，1688网站默认传入CHINESE</param>
        /// <param name="image">商品主图</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="attributes">商品属性和属性值。若webSite=1688，此字段必填</param>
        /// <param name="groupID">分组ID，确定商品所属分组。1688可传入多个分组ID，国际站同一个商品只能属于一个分组，因此默认只取第一个</param>
        /// <param name="description">商品详情描述，可包含图片中心的图片URL</param>
        /// <param name="periodOfValidity">信息有效期，按天计算，国际站可不填</param>
        /// <param name="bizType">业务类型。1：商品，2：加工，3：代理，4：合作，5：商务服务；不传入默认按照商品发布；国际站按默认商品。</param>
        /// <param name="pictureAuth">是否图片私密信息，国际站此字段无效</param>
        /// <param name="skuInfos">SKU信息，这里可传入多组信息</param>
        /// <param name="saleInfo">商品销售信息</param>
        /// <param name="shippingInfo">商品物流信息</param>
        /// <param name="internationalTradeInfo">商品国际贸易信息，1688无需处理此字段</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 系统错误	- 系统错误(attributes中必须包括类目的必传属性。包括必传的产品属性和规格属性，如果没有规格属性又要按照规格报价的话会出“系统错误”)
        /// 无错误Case1	- 发布Offer 之后没有具体的规格信息(attributes的规格属性的值value必须和SKUInfo里面的attribute规格属性值attributeValue一致，否则当按规格报价时会出现offer发布成功，但是没有规格的情况。)
        /// 系统错误	- 您在运费设置中选择的运费模板不存在！(运费模板不存在，请检查入参)
        /// 系统错误	- 自定义属性个数超过最大限制!(自定义属性最多可以添加3个)
        /// 系统错误	- XXX:是必填项！(attributes中必须包括类目的必填属性，请检查入参)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaProductAddResult AlibabaProductAdd(string productType, long categoryID, string subject, string language, ComAlibabaProductAlibabaProductAddAlibabaProductProductImageInfo image, string webSite, System.Collections.Generic.IEnumerable<AlibabaProductProductAttribute> attributes = null, System.Collections.Generic.IEnumerable<long> groupID = null, string description = null, int? periodOfValidity = null, int? bizType = null, bool? pictureAuth = null, System.Collections.Generic.IEnumerable<AlibabaProductProductSKUInfo2> skuInfos = null, AlibabaProductProductSaleInfo2 saleInfo = null, AlibabaProductProductShippingInfo2 shippingInfo = null, AlibabaProductProductInternationalTradeInfo internationalTradeInfo = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaProductAddAsync(productType, categoryID, subject, language, image, webSite, attributes, groupID, description, periodOfValidity, bizType, pictureAuth, skuInfos, saleInfo, shippingInfo, internationalTradeInfo, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>发布商品
        /// 发布一个新商品，此API为国际站与1688通用。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.add&amp;v=1</summary>
        /// <param name="productType">商品类型，在线批发商品(wholesale)或者询盘商品(sourcing)，1688网站缺省为wholesale</param>
        /// <param name="categoryID">类目ID，由相应类目API获取</param>
        /// <param name="subject">商品标题，最多128个字符。标题内容将被系统切分作为关键字，因此API将不再单独提供关键字字段。</param>
        /// <param name="language">语种，参见FAQ 语种枚举值，1688网站默认传入CHINESE</param>
        /// <param name="image">商品主图</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="attributes">商品属性和属性值。若webSite=1688，此字段必填</param>
        /// <param name="groupID">分组ID，确定商品所属分组。1688可传入多个分组ID，国际站同一个商品只能属于一个分组，因此默认只取第一个</param>
        /// <param name="description">商品详情描述，可包含图片中心的图片URL</param>
        /// <param name="periodOfValidity">信息有效期，按天计算，国际站可不填</param>
        /// <param name="bizType">业务类型。1：商品，2：加工，3：代理，4：合作，5：商务服务；不传入默认按照商品发布；国际站按默认商品。</param>
        /// <param name="pictureAuth">是否图片私密信息，国际站此字段无效</param>
        /// <param name="skuInfos">SKU信息，这里可传入多组信息</param>
        /// <param name="saleInfo">商品销售信息</param>
        /// <param name="shippingInfo">商品物流信息</param>
        /// <param name="internationalTradeInfo">商品国际贸易信息，1688无需处理此字段</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 系统错误	- 系统错误(attributes中必须包括类目的必传属性。包括必传的产品属性和规格属性，如果没有规格属性又要按照规格报价的话会出“系统错误”)
        /// 无错误Case1	- 发布Offer 之后没有具体的规格信息(attributes的规格属性的值value必须和SKUInfo里面的attribute规格属性值attributeValue一致，否则当按规格报价时会出现offer发布成功，但是没有规格的情况。)
        /// 系统错误	- 您在运费设置中选择的运费模板不存在！(运费模板不存在，请检查入参)
        /// 系统错误	- 自定义属性个数超过最大限制!(自定义属性最多可以添加3个)
        /// 系统错误	- XXX:是必填项！(attributes中必须包括类目的必填属性，请检查入参)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaProductAddResult> AlibabaProductAddAsync(string productType, long categoryID, string subject, string language, ComAlibabaProductAlibabaProductAddAlibabaProductProductImageInfo image, string webSite, System.Collections.Generic.IEnumerable<AlibabaProductProductAttribute> attributes = null, System.Collections.Generic.IEnumerable<long> groupID = null, string description = null, int? periodOfValidity = null, int? bizType = null, bool? pictureAuth = null, System.Collections.Generic.IEnumerable<AlibabaProductProductSKUInfo2> skuInfos = null, AlibabaProductProductSaleInfo2 saleInfo = null, AlibabaProductProductShippingInfo2 shippingInfo = null, AlibabaProductProductInternationalTradeInfo internationalTradeInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.product.add/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (productType == null)
                        throw new System.ArgumentNullException("productType");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productType, System.Globalization.CultureInfo.InvariantCulture)), "productType");
                    }
                    if (categoryID == null)
                        throw new System.ArgumentNullException("categoryID");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(categoryID, System.Globalization.CultureInfo.InvariantCulture)), "categoryID");
                    }
                    if (subject == null)
                        throw new System.ArgumentNullException("subject");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(subject, System.Globalization.CultureInfo.InvariantCulture)), "subject");
                    }
                    if (language == null)
                        throw new System.ArgumentNullException("language");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture)), "language");
                    }
                    if (image == null)
                        throw new System.ArgumentNullException("image");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(image, System.Globalization.CultureInfo.InvariantCulture)), "image");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    if (attributes != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(attributes, System.Globalization.CultureInfo.InvariantCulture)), "attributes");
                    }
                    if (groupID != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(groupID, System.Globalization.CultureInfo.InvariantCulture)), "groupID");
                    }
                    if (description != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture)), "description");
                    }
                    if (periodOfValidity != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(periodOfValidity, System.Globalization.CultureInfo.InvariantCulture)), "periodOfValidity");
                    }
                    if (bizType != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(bizType, System.Globalization.CultureInfo.InvariantCulture)), "bizType");
                    }
                    if (pictureAuth != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pictureAuth, System.Globalization.CultureInfo.InvariantCulture)), "pictureAuth");
                    }
                    if (skuInfos != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(skuInfos, System.Globalization.CultureInfo.InvariantCulture)), "skuInfos");
                    }
                    if (saleInfo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(saleInfo, System.Globalization.CultureInfo.InvariantCulture)), "saleInfo");
                    }
                    if (shippingInfo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(shippingInfo, System.Globalization.CultureInfo.InvariantCulture)), "shippingInfo");
                    }
                    if (internationalTradeInfo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(internationalTradeInfo, System.Globalization.CultureInfo.InvariantCulture)), "internationalTradeInfo");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaProductAddResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaProductAddResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取是否启用自定义分类
        /// 获取是否启用自定义分类，启用后在旺铺中将按自定义分类展示商品。此API对国际站无效
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.group.getSwitch-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.group.getSwitch&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <returns>true：已开启；false：未开启</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response3 AlibabaProductGroupGetSwitch(string webSite)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaProductGroupGetSwitchAsync(webSite, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取是否启用自定义分类
        /// 获取是否启用自定义分类，启用后在旺铺中将按自定义分类展示商品。此API对国际站无效
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.group.getSwitch-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.group.getSwitch&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <returns>true：已开启；false：未开启</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response3> AlibabaProductGroupGetSwitchAsync(string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.product.group.getSwitch/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response3>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response3);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>产品是否可以修改
        /// 产品是否可以修改
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.isModifiable-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.isModifiable&amp;v=1</summary>
        /// <param name="productIds">商品ID列表</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// OFFER_EDIT_ILLEGAL	- OFFER_EDIT_ILLEGAL(检查商品ID是否正确)
        /// OFFER_EDIT_STATUS_ERROR	- OFFER_EDIT_STATUS_ERROR(商品信息已被删除，不能修改)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaProductIsModifiableResult AlibabaProductIsModifiable(System.Collections.Generic.IEnumerable<long> productIds, string webSite)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaProductIsModifiableAsync(productIds, webSite, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>产品是否可以修改
        /// 产品是否可以修改
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.isModifiable-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.isModifiable&amp;v=1</summary>
        /// <param name="productIds">商品ID列表</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// OFFER_EDIT_ILLEGAL	- OFFER_EDIT_ILLEGAL(检查商品ID是否正确)
        /// OFFER_EDIT_STATUS_ERROR	- OFFER_EDIT_STATUS_ERROR(商品信息已被删除，不能修改)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaProductIsModifiableResult> AlibabaProductIsModifiableAsync(System.Collections.Generic.IEnumerable<long> productIds, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.product.isModifiable/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (productIds == null)
                        throw new System.ArgumentNullException("productIds");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productIds, System.Globalization.CultureInfo.InvariantCulture)), "productIds");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaProductIsModifiableResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaProductIsModifiableResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>卖家查询商品列表
        /// 卖家根据条件分页查询商品列表信息。目前无法查询简易商品。如需遍历所有商品是只能使用ID排序
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.list.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.list.get&amp;v=1</summary>
        /// <param name="pageNo">分页参数，起始为1</param>
        /// <param name="pageSize">分页参数，每页大小，目前最大值为20，超过20时以20为准</param>
        /// <param name="signs">业务标</param>
        /// <param name="statusList">商品状态，published:上架状态，expired：过期(包含手动过期与自动过期)，TBD：to be delete，deleted：删除，new：新发，modified：修改，member expired：会员撤销</param>
        /// <param name="categoryId">类目ID</param>
        /// <param name="startModifyTime">产品修改开始时间</param>
        /// <param name="endModifyTime">产品修改结束时间</param>
        /// <param name="subjectKey">关键词</param>
        /// <param name="cargoNumber">货号</param>
        /// <param name="productIds">产品ID列表</param>
        /// <param name="beginStar">星级范围起始值0-5，不能高于endStar</param>
        /// <param name="endStar">星级范围起始值0-5，不能低于beginStar</param>
        /// <param name="groupIds">查询自定义分组ID，目前只支持查询一个</param>
        /// <param name="startPublishTime">发布时间起始值</param>
        /// <param name="endPublishTime">发布时间结束值</param>
        /// <param name="startExpiredTime">过期时间起始值</param>
        /// <param name="endExpiredTime">过期时间结束值</param>
        /// <param name="priceStart">价格范围起始值</param>
        /// <param name="priceEnd">价格范围结束值</param>
        /// <param name="orderByCondition">排序条件：CREATE_DATE,POST_DATE,MODIFY_DATE,APPROVED_DATE,EXPIRE_DATE,STATUS,ID,GROUP_ID,PRICE,SALE_QUANTITY</param>
        /// <param name="orderByType">升序 ASC 还是降序 DESC</param>
        /// <param name="supportOnlineTrade">支持在线交易</param>
        /// <param name="privateOffer">私密商品</param>
        /// <param name="needDetail">是否需要详情</param>
        /// <param name="needFreight">是否需要运费</param>
        /// <param name="needUserCategoryInfo">是否需要自定义类目</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaProductListGetResult AlibabaProductListGet(int pageNo, int pageSize, System.Collections.Generic.IEnumerable<string> signs = null, System.Collections.Generic.IEnumerable<string> statusList = null, long? categoryId = null, System.DateTimeOffset? startModifyTime = null, System.DateTimeOffset? endModifyTime = null, string subjectKey = null, string cargoNumber = null, System.Collections.Generic.IEnumerable<long> productIds = null, int? beginStar = null, int? endStar = null, string groupIds = null, System.DateTimeOffset? startPublishTime = null, System.DateTimeOffset? endPublishTime = null, System.DateTimeOffset? startExpiredTime = null, System.DateTimeOffset? endExpiredTime = null, double? priceStart = null, double? priceEnd = null, string orderByCondition = null, string orderByType = null, bool? supportOnlineTrade = null, bool? privateOffer = null, bool? needDetail = null, bool? needFreight = null, bool? needUserCategoryInfo = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaProductListGetAsync(pageNo, pageSize, signs, statusList, categoryId, startModifyTime, endModifyTime, subjectKey, cargoNumber, productIds, beginStar, endStar, groupIds, startPublishTime, endPublishTime, startExpiredTime, endExpiredTime, priceStart, priceEnd, orderByCondition, orderByType, supportOnlineTrade, privateOffer, needDetail, needFreight, needUserCategoryInfo, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>卖家查询商品列表
        /// 卖家根据条件分页查询商品列表信息。目前无法查询简易商品。如需遍历所有商品是只能使用ID排序
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.list.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.list.get&amp;v=1</summary>
        /// <param name="pageNo">分页参数，起始为1</param>
        /// <param name="pageSize">分页参数，每页大小，目前最大值为20，超过20时以20为准</param>
        /// <param name="signs">业务标</param>
        /// <param name="statusList">商品状态，published:上架状态，expired：过期(包含手动过期与自动过期)，TBD：to be delete，deleted：删除，new：新发，modified：修改，member expired：会员撤销</param>
        /// <param name="categoryId">类目ID</param>
        /// <param name="startModifyTime">产品修改开始时间</param>
        /// <param name="endModifyTime">产品修改结束时间</param>
        /// <param name="subjectKey">关键词</param>
        /// <param name="cargoNumber">货号</param>
        /// <param name="productIds">产品ID列表</param>
        /// <param name="beginStar">星级范围起始值0-5，不能高于endStar</param>
        /// <param name="endStar">星级范围起始值0-5，不能低于beginStar</param>
        /// <param name="groupIds">查询自定义分组ID，目前只支持查询一个</param>
        /// <param name="startPublishTime">发布时间起始值</param>
        /// <param name="endPublishTime">发布时间结束值</param>
        /// <param name="startExpiredTime">过期时间起始值</param>
        /// <param name="endExpiredTime">过期时间结束值</param>
        /// <param name="priceStart">价格范围起始值</param>
        /// <param name="priceEnd">价格范围结束值</param>
        /// <param name="orderByCondition">排序条件：CREATE_DATE,POST_DATE,MODIFY_DATE,APPROVED_DATE,EXPIRE_DATE,STATUS,ID,GROUP_ID,PRICE,SALE_QUANTITY</param>
        /// <param name="orderByType">升序 ASC 还是降序 DESC</param>
        /// <param name="supportOnlineTrade">支持在线交易</param>
        /// <param name="privateOffer">私密商品</param>
        /// <param name="needDetail">是否需要详情</param>
        /// <param name="needFreight">是否需要运费</param>
        /// <param name="needUserCategoryInfo">是否需要自定义类目</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaProductListGetResult> AlibabaProductListGetAsync(int pageNo, int pageSize, System.Collections.Generic.IEnumerable<string> signs = null, System.Collections.Generic.IEnumerable<string> statusList = null, long? categoryId = null, System.DateTimeOffset? startModifyTime = null, System.DateTimeOffset? endModifyTime = null, string subjectKey = null, string cargoNumber = null, System.Collections.Generic.IEnumerable<long> productIds = null, int? beginStar = null, int? endStar = null, string groupIds = null, System.DateTimeOffset? startPublishTime = null, System.DateTimeOffset? endPublishTime = null, System.DateTimeOffset? startExpiredTime = null, System.DateTimeOffset? endExpiredTime = null, double? priceStart = null, double? priceEnd = null, string orderByCondition = null, string orderByType = null, bool? supportOnlineTrade = null, bool? privateOffer = null, bool? needDetail = null, bool? needFreight = null, bool? needUserCategoryInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.product.list.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (pageNo == null)
                        throw new System.ArgumentNullException("pageNo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageNo, System.Globalization.CultureInfo.InvariantCulture)), "pageNo");
                    }
                    if (pageSize == null)
                        throw new System.ArgumentNullException("pageSize");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    if (signs != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(signs, System.Globalization.CultureInfo.InvariantCulture)), "signs");
                    }
                    if (statusList != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(statusList, System.Globalization.CultureInfo.InvariantCulture)), "statusList");
                    }
                    if (categoryId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(categoryId, System.Globalization.CultureInfo.InvariantCulture)), "categoryId");
                    }
                    if (startModifyTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(startModifyTime, System.Globalization.CultureInfo.InvariantCulture)), "startModifyTime");
                    }
                    if (endModifyTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endModifyTime, System.Globalization.CultureInfo.InvariantCulture)), "endModifyTime");
                    }
                    if (subjectKey != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(subjectKey, System.Globalization.CultureInfo.InvariantCulture)), "subjectKey");
                    }
                    if (cargoNumber != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(cargoNumber, System.Globalization.CultureInfo.InvariantCulture)), "cargoNumber");
                    }
                    if (productIds != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productIds, System.Globalization.CultureInfo.InvariantCulture)), "productIds");
                    }
                    if (beginStar != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(beginStar, System.Globalization.CultureInfo.InvariantCulture)), "beginStar");
                    }
                    if (endStar != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endStar, System.Globalization.CultureInfo.InvariantCulture)), "endStar");
                    }
                    if (groupIds != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(groupIds, System.Globalization.CultureInfo.InvariantCulture)), "groupIds");
                    }
                    if (startPublishTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(startPublishTime, System.Globalization.CultureInfo.InvariantCulture)), "startPublishTime");
                    }
                    if (endPublishTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endPublishTime, System.Globalization.CultureInfo.InvariantCulture)), "endPublishTime");
                    }
                    if (startExpiredTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(startExpiredTime, System.Globalization.CultureInfo.InvariantCulture)), "startExpiredTime");
                    }
                    if (endExpiredTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endExpiredTime, System.Globalization.CultureInfo.InvariantCulture)), "endExpiredTime");
                    }
                    if (priceStart != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(priceStart, System.Globalization.CultureInfo.InvariantCulture)), "priceStart");
                    }
                    if (priceEnd != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(priceEnd, System.Globalization.CultureInfo.InvariantCulture)), "priceEnd");
                    }
                    if (orderByCondition != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderByCondition, System.Globalization.CultureInfo.InvariantCulture)), "orderByCondition");
                    }
                    if (orderByType != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderByType, System.Globalization.CultureInfo.InvariantCulture)), "orderByType");
                    }
                    if (supportOnlineTrade != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(supportOnlineTrade, System.Globalization.CultureInfo.InvariantCulture)), "supportOnlineTrade");
                    }
                    if (privateOffer != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(privateOffer, System.Globalization.CultureInfo.InvariantCulture)), "privateOffer");
                    }
                    if (needDetail != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(needDetail, System.Globalization.CultureInfo.InvariantCulture)), "needDetail");
                    }
                    if (needFreight != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(needFreight, System.Globalization.CultureInfo.InvariantCulture)), "needFreight");
                    }
                    if (needUserCategoryInfo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(needUserCategoryInfo, System.Globalization.CultureInfo.InvariantCulture)), "needUserCategoryInfo");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaProductListGetResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaProductListGetResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>根据商品ID列表获取商品(卖家)
        /// 根据商品ID列表获取卖家的商品。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.getByIdList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.getByIdList&amp;v=1</summary>
        /// <param name="productIdList">商品Id列表</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 商品不存在	- 574286066XXX:商品不存在(检查输入商品ID)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaProductGetByIdListResult AlibabaProductGetByIdList(System.Collections.Generic.IEnumerable<long> productIdList)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaProductGetByIdListAsync(productIdList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据商品ID列表获取商品(卖家)
        /// 根据商品ID列表获取卖家的商品。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.getByIdList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.getByIdList&amp;v=1</summary>
        /// <param name="productIdList">商品Id列表</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 商品不存在	- 574286066XXX:商品不存在(检查输入商品ID)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaProductGetByIdListResult> AlibabaProductGetByIdListAsync(System.Collections.Generic.IEnumerable<long> productIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.product.getByIdList/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (productIdList == null)
                        throw new System.ArgumentNullException("productIdList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productIdList, System.Globalization.CultureInfo.InvariantCulture)), "productIdList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaProductGetByIdListResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaProductGetByIdListResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>修改产品库存
        /// 修改产品库存该接口支持增量修改和全量修改，通过入参控制，默认为增量修改
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.modifyStock-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.modifyStock&amp;v=1</summary>
        /// <param name="productStockChange">产品库存变更信息</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <param name="increaceModify">是否增量更新</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_005	- 本次修改库存无变更，请确认后重新提交(检查入参后重新提交)
        /// 500_001	- 商品[offerId]为无规格商品，需要使用&amp;quot;productAmountChange&amp;quot;字段进行库存更新。(检查入参后重新提交)
        /// 500_002	- 商品规格[offerId_specId]不存在，请检查后重新提交。(检查入参后重新提交)
        /// 500_003	- 商品[offerId]为有规格商品，请使用字段\&amp;quot;skuStocks.stockChange\&amp;quot;进行库存更新。(检查入参后重新提交)
        /// 500_004	- 商品的库存更新数量不得为0(检查入参后重新提交)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaProductModifyStockResult AlibabaProductModifyStock(System.Collections.Generic.IEnumerable<AlibabaProductProductStock> productStockChange, string webSite, bool? increaceModify = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaProductModifyStockAsync(productStockChange, webSite, increaceModify, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>修改产品库存
        /// 修改产品库存该接口支持增量修改和全量修改，通过入参控制，默认为增量修改
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.modifyStock-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.modifyStock&amp;v=1</summary>
        /// <param name="productStockChange">产品库存变更信息</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <param name="increaceModify">是否增量更新</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_005	- 本次修改库存无变更，请确认后重新提交(检查入参后重新提交)
        /// 500_001	- 商品[offerId]为无规格商品，需要使用&amp;quot;productAmountChange&amp;quot;字段进行库存更新。(检查入参后重新提交)
        /// 500_002	- 商品规格[offerId_specId]不存在，请检查后重新提交。(检查入参后重新提交)
        /// 500_003	- 商品[offerId]为有规格商品，请使用字段\&amp;quot;skuStocks.stockChange\&amp;quot;进行库存更新。(检查入参后重新提交)
        /// 500_004	- 商品的库存更新数量不得为0(检查入参后重新提交)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaProductModifyStockResult> AlibabaProductModifyStockAsync(System.Collections.Generic.IEnumerable<AlibabaProductProductStock> productStockChange, string webSite, bool? increaceModify = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.product.modifyStock/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (productStockChange == null)
                        throw new System.ArgumentNullException("productStockChange");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productStockChange, System.Globalization.CultureInfo.InvariantCulture)), "productStockChange");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    if (increaceModify != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(increaceModify, System.Globalization.CultureInfo.InvariantCulture)), "increaceModify");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaProductModifyStockResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaProductModifyStockResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>修改商品
        /// 修改商品详细信息，此API的调用方式建议先用product.get方法，获取productInfo，再用里面的类目ID调用“获取类目属性”接口，结合类目里的属性将productInfo里相应字段修改后，再赋给本API，这样使用起来最方便，也能最大程度的保证准确性；每个商品(Offer)修改的次数每天不能超过30次；注意可能类目里会新增一些信息需要额外填写，或类目有调整时对应的参数也需要做对应的调整。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.edit-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.edit&amp;v=1</summary>
        /// <param name="productID">商品ID</param>
        /// <param name="productInfo">商品详细信息</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaProductEditResult AlibabaProductEdit(long productID, AlibabaProductProductInfo5 productInfo, string webSite)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaProductEditAsync(productID, productInfo, webSite, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>修改商品
        /// 修改商品详细信息，此API的调用方式建议先用product.get方法，获取productInfo，再用里面的类目ID调用“获取类目属性”接口，结合类目里的属性将productInfo里相应字段修改后，再赋给本API，这样使用起来最方便，也能最大程度的保证准确性；每个商品(Offer)修改的次数每天不能超过30次；注意可能类目里会新增一些信息需要额外填写，或类目有调整时对应的参数也需要做对应的调整。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.edit-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.edit&amp;v=1</summary>
        /// <param name="productID">商品ID</param>
        /// <param name="productInfo">商品详细信息</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaProductEditResult> AlibabaProductEditAsync(long productID, AlibabaProductProductInfo5 productInfo, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.product.edit/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (productID == null)
                        throw new System.ArgumentNullException("productID");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productID, System.Globalization.CultureInfo.InvariantCulture)), "productID");
                    }
                    if (productInfo == null)
                        throw new System.ArgumentNullException("productInfo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productInfo, System.Globalization.CultureInfo.InvariantCulture)), "productInfo");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaProductEditResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaProductEditResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>根据状态查询商品
        /// 根据状态查询商品（开放平台自建API）
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.getByStatus-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.getByStatus&amp;v=1</summary>
        /// <param name="pageNo">分页页码</param>
        /// <param name="pageSize">分页每页数量</param>
        /// <param name="statusList">&amp;quot;member expired&amp;quot;(会员撤销),
        /// &amp;quot;auto expired&amp;quot;(自然过期),
        /// &amp;quot;expired&amp;quot;(过期(包含手动过期与自动过期)),
        /// &amp;quot;member deleted&amp;quot;(会员删除),
        /// &amp;quot;published&amp;quot;(上网状态),
        /// &amp;quot;modified&amp;quot;(修改),
        /// &amp;quot;new&amp;quot;(新发),
        /// &amp;quot;deleted&amp;quot;(删除),
        /// &amp;quot;TBD&amp;quot;(to be delete),
        /// &amp;quot;approved&amp;quot;(审批通过),
        /// &amp;quot;auditing&amp;quot;(审核中),
        /// &amp;quot;untread&amp;quot;(审核不通过)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaProductGetByStatusResult AlibabaProductGetByStatus(int pageNo, int pageSize, System.Collections.Generic.IEnumerable<string> statusList)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaProductGetByStatusAsync(pageNo, pageSize, statusList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据状态查询商品
        /// 根据状态查询商品（开放平台自建API）
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.product.getByStatus-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.product.getByStatus&amp;v=1</summary>
        /// <param name="pageNo">分页页码</param>
        /// <param name="pageSize">分页每页数量</param>
        /// <param name="statusList">&amp;quot;member expired&amp;quot;(会员撤销),
        /// &amp;quot;auto expired&amp;quot;(自然过期),
        /// &amp;quot;expired&amp;quot;(过期(包含手动过期与自动过期)),
        /// &amp;quot;member deleted&amp;quot;(会员删除),
        /// &amp;quot;published&amp;quot;(上网状态),
        /// &amp;quot;modified&amp;quot;(修改),
        /// &amp;quot;new&amp;quot;(新发),
        /// &amp;quot;deleted&amp;quot;(删除),
        /// &amp;quot;TBD&amp;quot;(to be delete),
        /// &amp;quot;approved&amp;quot;(审批通过),
        /// &amp;quot;auditing&amp;quot;(审核中),
        /// &amp;quot;untread&amp;quot;(审核不通过)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaProductGetByStatusResult> AlibabaProductGetByStatusAsync(int pageNo, int pageSize, System.Collections.Generic.IEnumerable<string> statusList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.product.getByStatus/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (pageNo == null)
                        throw new System.ArgumentNullException("pageNo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageNo, System.Globalization.CultureInfo.InvariantCulture)), "pageNo");
                    }
                    if (pageSize == null)
                        throw new System.ArgumentNullException("pageSize");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    if (statusList == null)
                        throw new System.ArgumentNullException("statusList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(statusList, System.Globalization.CultureInfo.InvariantCulture)), "statusList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaProductGetByStatusResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaProductGetByStatusResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取相册列表
        /// 获取相册列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.album.getList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.album.getList&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="albumType">相册类型</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaPhotobankAlbumGetListResult AlibabaPhotobankAlbumGetList(string webSite, string albumType = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaPhotobankAlbumGetListAsync(webSite, albumType, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取相册列表
        /// 获取相册列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.album.getList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.album.getList&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="albumType">相册类型</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaPhotobankAlbumGetListResult> AlibabaPhotobankAlbumGetListAsync(string webSite, string albumType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.photobank.album.getList/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    if (albumType != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(albumType, System.Globalization.CultureInfo.InvariantCulture)), "albumType");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaPhotobankAlbumGetListResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaPhotobankAlbumGetListResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>修改相册
        /// 修改授权用户自身的相册
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.album.modify-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.album.modify&amp;v=1</summary>
        /// <param name="albumInfo">图片相册信息</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <param name="password">图片相册密码，可为空。如果不为空，则修改相册权限</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaPhotobankAlbumModifyResult AlibabaPhotobankAlbumModify(AlibabaPhotobankPhotoAlbumDomain2 albumInfo, string webSite, string password = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaPhotobankAlbumModifyAsync(albumInfo, webSite, password, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>修改相册
        /// 修改授权用户自身的相册
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.album.modify-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.album.modify&amp;v=1</summary>
        /// <param name="albumInfo">图片相册信息</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <param name="password">图片相册密码，可为空。如果不为空，则修改相册权限</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaPhotobankAlbumModifyResult> AlibabaPhotobankAlbumModifyAsync(AlibabaPhotobankPhotoAlbumDomain2 albumInfo, string webSite, string password = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.photobank.album.modify/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (albumInfo == null)
                        throw new System.ArgumentNullException("albumInfo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(albumInfo, System.Globalization.CultureInfo.InvariantCulture)), "albumInfo");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    if (password != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture)), "password");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaPhotobankAlbumModifyResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaPhotobankAlbumModifyResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>修改图片信息
        /// 修改图片信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.photo.modify-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.photo.modify&amp;v=1</summary>
        /// <param name="imageInfo">图片详情</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400_2	- 待修改的图片ID不能为空。(待修改的图片ID不能为空。)
        /// 400_3	- 待修改的图片名称和描述不能都为空。(待修改的图片名称和描述不能都为空。)
        /// 30	- 120003(图片不存在，检查图片ID是否正确)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaPhotobankPhotoModifyResult AlibabaPhotobankPhotoModify(AlibabaProductImageInfo imageInfo, string webSite)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaPhotobankPhotoModifyAsync(imageInfo, webSite, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>修改图片信息
        /// 修改图片信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.photo.modify-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.photo.modify&amp;v=1</summary>
        /// <param name="imageInfo">图片详情</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400_2	- 待修改的图片ID不能为空。(待修改的图片ID不能为空。)
        /// 400_3	- 待修改的图片名称和描述不能都为空。(待修改的图片名称和描述不能都为空。)
        /// 30	- 120003(图片不存在，检查图片ID是否正确)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaPhotobankPhotoModifyResult> AlibabaPhotobankPhotoModifyAsync(AlibabaProductImageInfo imageInfo, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.photobank.photo.modify/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (imageInfo == null)
                        throw new System.ArgumentNullException("imageInfo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(imageInfo, System.Globalization.CultureInfo.InvariantCulture)), "imageInfo");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaPhotobankPhotoModifyResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaPhotobankPhotoModifyResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>创建相册
        /// 创建相册
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.album.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.album.add&amp;v=1</summary>
        /// <param name="name">相册名称。最长30个中文字符</param>
        /// <param name="authority">相册访问权限。取值范围:0-不公开；1-公开；2-密码访问。只有开通旺铺的会员可以设置相册访问权限为“1-公开”和“2-密码访问”，未开通旺铺的会员相册访问权限限制为“0-不公开”，国际站无需处理此字段</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="description">相册描述。最长2000个中文字符，国际站无需处理此字段</param>
        /// <param name="password">相册访问密码。4-16位非中文字符。当authority为2-密码访问时必填，国际站无需处理此字段</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaPhotobankAlbumAddResult AlibabaPhotobankAlbumAdd(string name, int authority, string webSite, string description = null, string password = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaPhotobankAlbumAddAsync(name, authority, webSite, description, password, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建相册
        /// 创建相册
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.album.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.album.add&amp;v=1</summary>
        /// <param name="name">相册名称。最长30个中文字符</param>
        /// <param name="authority">相册访问权限。取值范围:0-不公开；1-公开；2-密码访问。只有开通旺铺的会员可以设置相册访问权限为“1-公开”和“2-密码访问”，未开通旺铺的会员相册访问权限限制为“0-不公开”，国际站无需处理此字段</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="description">相册描述。最长2000个中文字符，国际站无需处理此字段</param>
        /// <param name="password">相册访问密码。4-16位非中文字符。当authority为2-密码访问时必填，国际站无需处理此字段</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaPhotobankAlbumAddResult> AlibabaPhotobankAlbumAddAsync(string name, int authority, string webSite, string description = null, string password = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.photobank.album.add/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (name == null)
                        throw new System.ArgumentNullException("name");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)), "name");
                    }
                    if (authority == null)
                        throw new System.ArgumentNullException("authority");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(authority, System.Globalization.CultureInfo.InvariantCulture)), "authority");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    if (description != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture)), "description");
                    }
                    if (password != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture)), "password");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaPhotobankAlbumAddResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaPhotobankAlbumAddResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>查询相册空间详情
        /// 获取相册详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.album.getProfile-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.album.getProfile&amp;v=1</summary>
        /// <param name="webSite">1688或者alibaba</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 5002	- 已授权用户必须传递aliId(API需要授权，请填写有效的accessToken)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaPhotobankAlbumGetProfileResult AlibabaPhotobankAlbumGetProfile(string webSite)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaPhotobankAlbumGetProfileAsync(webSite, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询相册空间详情
        /// 获取相册详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.album.getProfile-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.album.getProfile&amp;v=1</summary>
        /// <param name="webSite">1688或者alibaba</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 5002	- 已授权用户必须传递aliId(API需要授权，请填写有效的accessToken)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaPhotobankAlbumGetProfileResult> AlibabaPhotobankAlbumGetProfileAsync(string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.photobank.album.getProfile/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaPhotobankAlbumGetProfileResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaPhotobankAlbumGetProfileResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>删除相册
        /// 删除相册
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.album.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.album.delete&amp;v=1</summary>
        /// <param name="albumID">相册ID</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaPhotobankAlbumDeleteResult AlibabaPhotobankAlbumDelete(long albumID, string webSite)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaPhotobankAlbumDeleteAsync(albumID, webSite, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除相册
        /// 删除相册
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.album.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.album.delete&amp;v=1</summary>
        /// <param name="albumID">相册ID</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaPhotobankAlbumDeleteResult> AlibabaPhotobankAlbumDeleteAsync(long albumID, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.photobank.album.delete/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (albumID == null)
                        throw new System.ArgumentNullException("albumID");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(albumID, System.Globalization.CultureInfo.InvariantCulture)), "albumID");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaPhotobankAlbumDeleteResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaPhotobankAlbumDeleteResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>删除图片
        /// 删除图片
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.photo.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.photo.delete&amp;v=1</summary>
        /// <param name="photoID">图片ID</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaPhotobankPhotoDeleteResult AlibabaPhotobankPhotoDelete(long photoID, string webSite)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaPhotobankPhotoDeleteAsync(photoID, webSite, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除图片
        /// 删除图片
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.photo.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.photo.delete&amp;v=1</summary>
        /// <param name="photoID">图片ID</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaPhotobankPhotoDeleteResult> AlibabaPhotobankPhotoDeleteAsync(long photoID, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.photobank.photo.delete/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (photoID == null)
                        throw new System.ArgumentNullException("photoID");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(photoID, System.Globalization.CultureInfo.InvariantCulture)), "photoID");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaPhotobankPhotoDeleteResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaPhotobankPhotoDeleteResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>上传图片
        /// 选择的图片单张大小不超过2MB，支持jpg,jpeg,gif,bmp,png。其中不支持png图片透明色，透明处理后可能为白色或黑色。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.photo.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.photo.add&amp;v=1</summary>
        /// <param name="name">图片名称。最长30个中文字符</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="albumID">相册ID，1688必须传此参数，国际站可不传</param>
        /// <param name="description">图片描述。最长2000个中文字符</param>
        /// <param name="drawTxt">是否打上默认水印，国际站无需处理此字段</param>
        /// <param name="imageBytes">图片的二进制数据，向服务端提交文件即可 (二进制文件数组 PHP 的话，用 base64_encode 转换 ，JAVA 是 通过 IOUtils.toByteArray 转换)</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 1	- 参数非法(调整入参)
        /// 2	- 禁止操作
        /// 10	- 相册数量超出限制
        /// 11	- 相册不存在
        /// 13	- 相册中图片已满
        /// 14	- 扩展空间已经满
        /// 15	- 加密相册密码错误
        /// 31	- 用户空间已满
        /// 32	- 图片格式不支持(图片单张大小不超过2MB，支持jpg,jpeg,gif,bmp,png。其中不支持png图片透明色，透明处理后可能为白色或黑色。)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaPhotobankPhotoAddResult AlibabaPhotobankPhotoAdd(string name, string webSite, long? albumID = null, string description = null, bool? drawTxt = null, byte[] imageBytes = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaPhotobankPhotoAddAsync(name, webSite, albumID, description, drawTxt, imageBytes, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>上传图片
        /// 选择的图片单张大小不超过2MB，支持jpg,jpeg,gif,bmp,png。其中不支持png图片透明色，透明处理后可能为白色或黑色。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.photo.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.photo.add&amp;v=1</summary>
        /// <param name="name">图片名称。最长30个中文字符</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="albumID">相册ID，1688必须传此参数，国际站可不传</param>
        /// <param name="description">图片描述。最长2000个中文字符</param>
        /// <param name="drawTxt">是否打上默认水印，国际站无需处理此字段</param>
        /// <param name="imageBytes">图片的二进制数据，向服务端提交文件即可 (二进制文件数组 PHP 的话，用 base64_encode 转换 ，JAVA 是 通过 IOUtils.toByteArray 转换)</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 1	- 参数非法(调整入参)
        /// 2	- 禁止操作
        /// 10	- 相册数量超出限制
        /// 11	- 相册不存在
        /// 13	- 相册中图片已满
        /// 14	- 扩展空间已经满
        /// 15	- 加密相册密码错误
        /// 31	- 用户空间已满
        /// 32	- 图片格式不支持(图片单张大小不超过2MB，支持jpg,jpeg,gif,bmp,png。其中不支持png图片透明色，透明处理后可能为白色或黑色。)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaPhotobankPhotoAddResult> AlibabaPhotobankPhotoAddAsync(string name, string webSite, long? albumID = null, string description = null, bool? drawTxt = null, byte[] imageBytes = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.photobank.photo.add/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (name == null)
                        throw new System.ArgumentNullException("name");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)), "name");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    if (albumID != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(albumID, System.Globalization.CultureInfo.InvariantCulture)), "albumID");
                    }
                    if (description != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture)), "description");
                    }
                    if (drawTxt != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(drawTxt, System.Globalization.CultureInfo.InvariantCulture)), "drawTxt");
                    }
                    if (imageBytes != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(imageBytes, System.Globalization.CultureInfo.InvariantCulture)), "imageBytes");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaPhotobankPhotoAddResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaPhotobankPhotoAddResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>批量删除图片
        /// 批量删除图片
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.photo.deleteBatch-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.photo.deleteBatch&amp;v=1</summary>
        /// <param name="imageIds">待操作图片ID列表，每次最多支持删除20张图片。</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaPhotobankPhotoDeleteBatchResult AlibabaPhotobankPhotoDeleteBatch(System.Collections.Generic.IEnumerable<long> imageIds, string webSite)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaPhotobankPhotoDeleteBatchAsync(imageIds, webSite, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>批量删除图片
        /// 批量删除图片
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.photo.deleteBatch-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.photo.deleteBatch&amp;v=1</summary>
        /// <param name="imageIds">待操作图片ID列表，每次最多支持删除20张图片。</param>
        /// <param name="webSite">1688或者alibaba</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaPhotobankPhotoDeleteBatchResult> AlibabaPhotobankPhotoDeleteBatchAsync(System.Collections.Generic.IEnumerable<long> imageIds, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.photobank.photo.deleteBatch/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (imageIds == null)
                        throw new System.ArgumentNullException("imageIds");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(imageIds, System.Globalization.CultureInfo.InvariantCulture)), "imageIds");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaPhotobankPhotoDeleteBatchResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaPhotobankPhotoDeleteBatchResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取图片列表
        /// 获取指定相册中图片列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.photo.getList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.photo.getList&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="albumID">相册ID</param>
        /// <param name="pageNo">页码。取值范围:大于零的整数;默认值为1，即返回第一页数据</param>
        /// <param name="pageSize">返回列表结果集每页条数。取值范围:大于零的整数;最大值：30</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaPhotobankPhotoGetListResult AlibabaPhotobankPhotoGetList(string webSite, long? albumID = null, int? pageNo = null, int? pageSize = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaPhotobankPhotoGetListAsync(webSite, albumID, pageNo, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取图片列表
        /// 获取指定相册中图片列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.product:alibaba.photobank.photo.getList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.product&amp;n=alibaba.photobank.photo.getList&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="albumID">相册ID</param>
        /// <param name="pageNo">页码。取值范围:大于零的整数;默认值为1，即返回第一页数据</param>
        /// <param name="pageSize">返回列表结果集每页条数。取值范围:大于零的整数;最大值：30</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaPhotobankPhotoGetListResult> AlibabaPhotobankPhotoGetListAsync(string webSite, long? albumID = null, int? pageNo = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.product/alibaba.photobank.photo.getList/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    if (albumID != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(albumID, System.Globalization.CultureInfo.InvariantCulture)), "albumID");
                    }
                    if (pageNo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageNo, System.Globalization.CultureInfo.InvariantCulture)), "pageNo");
                    }
                    if (pageSize != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaPhotobankPhotoGetListResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaPhotobankPhotoGetListResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取物流模板详情
        /// 根据物流模版ID获取卖家的物流模板。运费模板ID为0表示运费说明，为1表示卖家承担运费
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.myFreightTemplate.list.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.myFreightTemplate.list.get&amp;v=1</summary>
        /// <param name="templateId">模版id，用于单条查询的场景</param>
        /// <param name="querySubTemplate">是否查询子模板</param>
        /// <param name="queryRate">是否查询子模板费率</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaLogisticsMyFreightTemplateListGetResult AlibabaLogisticsMyFreightTemplateListGet(long? templateId = null, bool? querySubTemplate = null, bool? queryRate = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaLogisticsMyFreightTemplateListGetAsync(templateId, querySubTemplate, queryRate, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取物流模板详情
        /// 根据物流模版ID获取卖家的物流模板。运费模板ID为0表示运费说明，为1表示卖家承担运费
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.myFreightTemplate.list.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.myFreightTemplate.list.get&amp;v=1</summary>
        /// <param name="templateId">模版id，用于单条查询的场景</param>
        /// <param name="querySubTemplate">是否查询子模板</param>
        /// <param name="queryRate">是否查询子模板费率</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaLogisticsMyFreightTemplateListGetResult> AlibabaLogisticsMyFreightTemplateListGetAsync(long? templateId = null, bool? querySubTemplate = null, bool? queryRate = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.logistics/alibaba.logistics.myFreightTemplate.list.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (templateId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(templateId, System.Globalization.CultureInfo.InvariantCulture)), "templateId");
                    }
                    if (querySubTemplate != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(querySubTemplate, System.Globalization.CultureInfo.InvariantCulture)), "querySubTemplate");
                    }
                    if (queryRate != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(queryRate, System.Globalization.CultureInfo.InvariantCulture)), "queryRate");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaLogisticsMyFreightTemplateListGetResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaLogisticsMyFreightTemplateListGetResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>代销商获取供应商的运费模版
        /// 代销商获取供应商的运费模版，用来计算代销商品的运费信息，需要先建立代销关系才能查询
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.distributor.getSupplierFreightTemplates-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.distributor.getSupplierFreightTemplates&amp;v=1</summary>
        /// <param name="supplierLoginId">供应商的LoginId</param>
        /// <param name="templateId">运费模版id，用于单条查询的场景，如果不传的话，则是查所有模版</param>
        /// <param name="querySubTemplate">是否查询子模板</param>
        /// <param name="queryRate">是否查询子模板费率</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaDistributorGetSupplierFreightTemplatesResult AlibabaDistributorGetSupplierFreightTemplates(string supplierLoginId, long? templateId = null, bool? querySubTemplate = null, bool? queryRate = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaDistributorGetSupplierFreightTemplatesAsync(supplierLoginId, templateId, querySubTemplate, queryRate, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>代销商获取供应商的运费模版
        /// 代销商获取供应商的运费模版，用来计算代销商品的运费信息，需要先建立代销关系才能查询
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.distributor.getSupplierFreightTemplates-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.distributor.getSupplierFreightTemplates&amp;v=1</summary>
        /// <param name="supplierLoginId">供应商的LoginId</param>
        /// <param name="templateId">运费模版id，用于单条查询的场景，如果不传的话，则是查所有模版</param>
        /// <param name="querySubTemplate">是否查询子模板</param>
        /// <param name="queryRate">是否查询子模板费率</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaDistributorGetSupplierFreightTemplatesResult> AlibabaDistributorGetSupplierFreightTemplatesAsync(string supplierLoginId, long? templateId = null, bool? querySubTemplate = null, bool? queryRate = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.logistics/alibaba.distributor.getSupplierFreightTemplates/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (supplierLoginId == null)
                        throw new System.ArgumentNullException("supplierLoginId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(supplierLoginId, System.Globalization.CultureInfo.InvariantCulture)), "supplierLoginId");
                    }
                    if (templateId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(templateId, System.Globalization.CultureInfo.InvariantCulture)), "templateId");
                    }
                    if (querySubTemplate != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(querySubTemplate, System.Globalization.CultureInfo.InvariantCulture)), "querySubTemplate");
                    }
                    if (queryRate != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(queryRate, System.Globalization.CultureInfo.InvariantCulture)), "queryRate");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaDistributorGetSupplierFreightTemplatesResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaDistributorGetSupplierFreightTemplatesResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取交易订单的物流跟踪信息(卖家视角)
        /// 获取卖家的订单的物流跟踪信息。该接口能查能根据物流单号查看物流单跟踪信息。由于物流单录入的原因，可能跟踪信息的API查询会有延迟。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.trade.getLogisticsTraceInfo.sellerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.trade.getLogisticsTraceInfo.sellerView&amp;v=1</summary>
        /// <param name="orderId">订单号</param>
        /// <param name="webSite">是1688业务还是icbu业务</param>
        /// <param name="logisticsId">该订单下的物流编号</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeGetLogisticsTraceInfoSellerViewResult AlibabaTradeGetLogisticsTraceInfoSellerView(long orderId, string webSite, string logisticsId = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeGetLogisticsTraceInfoSellerViewAsync(orderId, webSite, logisticsId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取交易订单的物流跟踪信息(卖家视角)
        /// 获取卖家的订单的物流跟踪信息。该接口能查能根据物流单号查看物流单跟踪信息。由于物流单录入的原因，可能跟踪信息的API查询会有延迟。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.trade.getLogisticsTraceInfo.sellerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.trade.getLogisticsTraceInfo.sellerView&amp;v=1</summary>
        /// <param name="orderId">订单号</param>
        /// <param name="webSite">是1688业务还是icbu业务</param>
        /// <param name="logisticsId">该订单下的物流编号</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeGetLogisticsTraceInfoSellerViewResult> AlibabaTradeGetLogisticsTraceInfoSellerViewAsync(long orderId, string webSite, string logisticsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.logistics/alibaba.trade.getLogisticsTraceInfo.sellerView/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orderId == null)
                        throw new System.ArgumentNullException("orderId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)), "orderId");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    if (logisticsId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(logisticsId, System.Globalization.CultureInfo.InvariantCulture)), "logisticsId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeGetLogisticsTraceInfoSellerViewResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeGetLogisticsTraceInfoSellerViewResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>我的发货地址列表
        /// 我的发货地址列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.mySendGoodsAddress.list.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.mySendGoodsAddress.list.get&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaLogisticsMySendGoodsAddressListGetResult AlibabaLogisticsMySendGoodsAddressListGet()
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaLogisticsMySendGoodsAddressListGetAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>我的发货地址列表
        /// 我的发货地址列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.mySendGoodsAddress.list.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.mySendGoodsAddress.list.get&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaLogisticsMySendGoodsAddressListGetResult> AlibabaLogisticsMySendGoodsAddressListGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.logistics/alibaba.logistics.mySendGoodsAddress.list.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaLogisticsMySendGoodsAddressListGetResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaLogisticsMySendGoodsAddressListGetResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>物流发货-自己联系物流发货
        /// 1688大市场订单，卖家自己联系物流发货，支持合并发货，即：多个订单一次发货；支持子订单(orderEntry)级别的发货，不支持按数量发货。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.OpDeliverySendOrder.offline-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.OpDeliverySendOrder.offline&amp;v=1</summary>
        /// <param name="sendGoods">发货对象列表</param>
        /// <param name="extBody">JSON字符串，cpCode 为物流公司code，对应物流公司信息获取接口的companyNo（非数字Id）; logisticsCpName:物流公司名称，对应物流公司信息获取接口的companyName； mailNo：运单号； 可以通过获取 &amp;quot;物流公司列表-自联物流&amp;quot; 接口查询到数据。</param>
        /// <param name="remarks">备注</param>
        /// <param name="gmtSend">发货时间</param>
        /// <param name="extParam">JSON 字符串</param>
        /// <param name="receiverInfo">收货地址,优先级大于订单收货地址，为空时，使用订单收货地址</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 系统繁忙，请稍后再试Case1	- 调用接口返回“系统繁忙，请稍后再试”(请检查订单号是否正确，另外请确认物流公司CpCode是否正确。cpcode为物流公司信息的companyNo而非Id，例如顺丰的coCode为“SF”而非106422)
        /// 系统繁忙，请稍后再试Case2	- 使用测试工具时返回“系统繁忙，请稍后再试”(不要传递receiverInfo字段)
        /// HSF Server unexpected exception	- HSF Server unexpected exception(传入参数的字段类型不正确，或某些必传字段没有传递)
        /// INVALID_PARAM	- 运单号不符合规则或已被使用(请检查运单号是否正确，另外请注意一个运单号最多使用15次)
        /// 5001	- 下游销售订单退款中，暂不支持发货，建议与您的客户沟通处理退款，再确定是否继续发货(下游销售订单退款中，暂不支持发货，建议与您的客户沟通处理退款，再确定是否继续发货，继续发货需要到1688work工作台上发货)
        /// 5002	- 下游销售订单已退款成功/交易关闭，不支持发货(下游销售订单已退款成功/交易关闭，不支持发货)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaLogisticsOpDeliverySendOrderOfflineResult AlibabaLogisticsOpDeliverySendOrderOffline(System.Collections.Generic.IEnumerable<AlibabaLogisticsOpSendGood> sendGoods, string extBody, string remarks = null, System.DateTimeOffset? gmtSend = null, string extParam = null, AlibabaLogisticsOpReceiveContacter receiverInfo = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaLogisticsOpDeliverySendOrderOfflineAsync(sendGoods, extBody, remarks, gmtSend, extParam, receiverInfo, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>物流发货-自己联系物流发货
        /// 1688大市场订单，卖家自己联系物流发货，支持合并发货，即：多个订单一次发货；支持子订单(orderEntry)级别的发货，不支持按数量发货。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.OpDeliverySendOrder.offline-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.OpDeliverySendOrder.offline&amp;v=1</summary>
        /// <param name="sendGoods">发货对象列表</param>
        /// <param name="extBody">JSON字符串，cpCode 为物流公司code，对应物流公司信息获取接口的companyNo（非数字Id）; logisticsCpName:物流公司名称，对应物流公司信息获取接口的companyName； mailNo：运单号； 可以通过获取 &amp;quot;物流公司列表-自联物流&amp;quot; 接口查询到数据。</param>
        /// <param name="remarks">备注</param>
        /// <param name="gmtSend">发货时间</param>
        /// <param name="extParam">JSON 字符串</param>
        /// <param name="receiverInfo">收货地址,优先级大于订单收货地址，为空时，使用订单收货地址</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 系统繁忙，请稍后再试Case1	- 调用接口返回“系统繁忙，请稍后再试”(请检查订单号是否正确，另外请确认物流公司CpCode是否正确。cpcode为物流公司信息的companyNo而非Id，例如顺丰的coCode为“SF”而非106422)
        /// 系统繁忙，请稍后再试Case2	- 使用测试工具时返回“系统繁忙，请稍后再试”(不要传递receiverInfo字段)
        /// HSF Server unexpected exception	- HSF Server unexpected exception(传入参数的字段类型不正确，或某些必传字段没有传递)
        /// INVALID_PARAM	- 运单号不符合规则或已被使用(请检查运单号是否正确，另外请注意一个运单号最多使用15次)
        /// 5001	- 下游销售订单退款中，暂不支持发货，建议与您的客户沟通处理退款，再确定是否继续发货(下游销售订单退款中，暂不支持发货，建议与您的客户沟通处理退款，再确定是否继续发货，继续发货需要到1688work工作台上发货)
        /// 5002	- 下游销售订单已退款成功/交易关闭，不支持发货(下游销售订单已退款成功/交易关闭，不支持发货)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaLogisticsOpDeliverySendOrderOfflineResult> AlibabaLogisticsOpDeliverySendOrderOfflineAsync(System.Collections.Generic.IEnumerable<AlibabaLogisticsOpSendGood> sendGoods, string extBody, string remarks = null, System.DateTimeOffset? gmtSend = null, string extParam = null, AlibabaLogisticsOpReceiveContacter receiverInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.logistics/alibaba.logistics.OpDeliverySendOrder.offline/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (sendGoods == null)
                        throw new System.ArgumentNullException("sendGoods");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(sendGoods, System.Globalization.CultureInfo.InvariantCulture)), "sendGoods");
                    }
                    if (extBody == null)
                        throw new System.ArgumentNullException("extBody");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(extBody, System.Globalization.CultureInfo.InvariantCulture)), "extBody");
                    }
                    if (remarks != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(remarks, System.Globalization.CultureInfo.InvariantCulture)), "remarks");
                    }
                    if (gmtSend != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(gmtSend, System.Globalization.CultureInfo.InvariantCulture)), "gmtSend");
                    }
                    if (extParam != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(extParam, System.Globalization.CultureInfo.InvariantCulture)), "extParam");
                    }
                    if (receiverInfo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(receiverInfo, System.Globalization.CultureInfo.InvariantCulture)), "receiverInfo");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaLogisticsOpDeliverySendOrderOfflineResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaLogisticsOpDeliverySendOrderOfflineResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>物流发货-无需物流
        /// 1688大市场订单，无需物流，支持合并发货，即：多个订单一次发货；支持子订单(orderEntry)级别的发货，不支持按数量发货。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.OpDeliverySendOrder.dummy-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.OpDeliverySendOrder.dummy&amp;v=1</summary>
        /// <param name="sendGoods">发货对象列表</param>
        /// <param name="extBody">JSON字符串,extBodyJson中的noLogisticsCondition必填，取值字符串1到5：“1”：其他第三方物流、小型物充商、车队等（noLogisticsName、noLogisticsTel必填）；“2”：补运费、差价（noLogisticsBillNo必填）；“3”：卖家配送（noLogisticsName、noLogisticsTel必填）；“4”：买家自提；“5”：其他原因（remarks必填）。其他字段根据noLogisticsCondition的值不同，必填要求不同。字段说明：无需物流原因:noLogisticsCondition;无需物流名称:noLogisticsName;无需物流电话:noLogisticsTel;无需物流单号，不同的无需物流原因，该字段解释不同:noLogisticsBillNo。</param>
        /// <param name="remarks">备注</param>
        /// <param name="gmtSend">发货时间</param>
        /// <param name="extParam">{}</param>
        /// <param name="receiverInfo">收货地址</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaLogisticsOpDeliverySendOrderDummyResult AlibabaLogisticsOpDeliverySendOrderDummy(System.Collections.Generic.IEnumerable<AlibabaLogisticsOpSendGood> sendGoods, string extBody, string remarks = null, System.DateTimeOffset? gmtSend = null, string extParam = null, AlibabaLogisticsOpReceiveContacter receiverInfo = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaLogisticsOpDeliverySendOrderDummyAsync(sendGoods, extBody, remarks, gmtSend, extParam, receiverInfo, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>物流发货-无需物流
        /// 1688大市场订单，无需物流，支持合并发货，即：多个订单一次发货；支持子订单(orderEntry)级别的发货，不支持按数量发货。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.OpDeliverySendOrder.dummy-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.OpDeliverySendOrder.dummy&amp;v=1</summary>
        /// <param name="sendGoods">发货对象列表</param>
        /// <param name="extBody">JSON字符串,extBodyJson中的noLogisticsCondition必填，取值字符串1到5：“1”：其他第三方物流、小型物充商、车队等（noLogisticsName、noLogisticsTel必填）；“2”：补运费、差价（noLogisticsBillNo必填）；“3”：卖家配送（noLogisticsName、noLogisticsTel必填）；“4”：买家自提；“5”：其他原因（remarks必填）。其他字段根据noLogisticsCondition的值不同，必填要求不同。字段说明：无需物流原因:noLogisticsCondition;无需物流名称:noLogisticsName;无需物流电话:noLogisticsTel;无需物流单号，不同的无需物流原因，该字段解释不同:noLogisticsBillNo。</param>
        /// <param name="remarks">备注</param>
        /// <param name="gmtSend">发货时间</param>
        /// <param name="extParam">{}</param>
        /// <param name="receiverInfo">收货地址</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaLogisticsOpDeliverySendOrderDummyResult> AlibabaLogisticsOpDeliverySendOrderDummyAsync(System.Collections.Generic.IEnumerable<AlibabaLogisticsOpSendGood> sendGoods, string extBody, string remarks = null, System.DateTimeOffset? gmtSend = null, string extParam = null, AlibabaLogisticsOpReceiveContacter receiverInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.logistics/alibaba.logistics.OpDeliverySendOrder.dummy/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (sendGoods == null)
                        throw new System.ArgumentNullException("sendGoods");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(sendGoods, System.Globalization.CultureInfo.InvariantCulture)), "sendGoods");
                    }
                    if (extBody == null)
                        throw new System.ArgumentNullException("extBody");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(extBody, System.Globalization.CultureInfo.InvariantCulture)), "extBody");
                    }
                    if (remarks != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(remarks, System.Globalization.CultureInfo.InvariantCulture)), "remarks");
                    }
                    if (gmtSend != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(gmtSend, System.Globalization.CultureInfo.InvariantCulture)), "gmtSend");
                    }
                    if (extParam != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(extParam, System.Globalization.CultureInfo.InvariantCulture)), "extParam");
                    }
                    if (receiverInfo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(receiverInfo, System.Globalization.CultureInfo.InvariantCulture)), "receiverInfo");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaLogisticsOpDeliverySendOrderDummyResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaLogisticsOpDeliverySendOrderDummyResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取交易订单的物流跟踪信息(买家视角)
        /// 该接口需要获取订单买家的授权，获取买家的订单的物流跟踪信息，在采购或者分销场景中，作为买家也有获取物流详情的需求。该接口能查能根据物流单号查看物流单跟踪信息。由于物流单录入的原因，可能跟踪信息的API查询会有延迟。该API需要向开放平台申请权限才能访问。In the procurement or distribution scenario, buyers can obtain information on logistics tracking. The interface can view the logistics tracking information according to the logistics tacking number. Depending on the logistics information entry time, there may be a delay in API queries regarding the information tracking.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.trade.getLogisticsTraceInfo.buyerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.trade.getLogisticsTraceInfo.buyerView&amp;v=1</summary>
        /// <param name="orderId">订单号</param>
        /// <param name="webSite">是1688业务还是icbu业务</param>
        /// <param name="logisticsId">该订单下的物流编号</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeGetLogisticsTraceInfoBuyerViewResult AlibabaTradeGetLogisticsTraceInfoBuyerView(long orderId, string webSite, string logisticsId = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeGetLogisticsTraceInfoBuyerViewAsync(orderId, webSite, logisticsId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取交易订单的物流跟踪信息(买家视角)
        /// 该接口需要获取订单买家的授权，获取买家的订单的物流跟踪信息，在采购或者分销场景中，作为买家也有获取物流详情的需求。该接口能查能根据物流单号查看物流单跟踪信息。由于物流单录入的原因，可能跟踪信息的API查询会有延迟。该API需要向开放平台申请权限才能访问。In the procurement or distribution scenario, buyers can obtain information on logistics tracking. The interface can view the logistics tracking information according to the logistics tacking number. Depending on the logistics information entry time, there may be a delay in API queries regarding the information tracking.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.trade.getLogisticsTraceInfo.buyerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.trade.getLogisticsTraceInfo.buyerView&amp;v=1</summary>
        /// <param name="orderId">订单号</param>
        /// <param name="webSite">是1688业务还是icbu业务</param>
        /// <param name="logisticsId">该订单下的物流编号</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeGetLogisticsTraceInfoBuyerViewResult> AlibabaTradeGetLogisticsTraceInfoBuyerViewAsync(long orderId, string webSite, string logisticsId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.logistics/alibaba.trade.getLogisticsTraceInfo.buyerView/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orderId == null)
                        throw new System.ArgumentNullException("orderId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)), "orderId");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    if (logisticsId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(logisticsId, System.Globalization.CultureInfo.InvariantCulture)), "logisticsId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeGetLogisticsTraceInfoBuyerViewResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeGetLogisticsTraceInfoBuyerViewResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取交易订单的物流信息(卖家视角)
        /// 获取卖家的订单的物流详情。该接口能查能根据物流单号查看物流详情，包括发件人，收件人，所发货物明细等。由于物流单录入的原因，可能跟踪信息的API查询会有延迟。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.trade.getLogisticsInfos.sellerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.trade.getLogisticsInfos.sellerView&amp;v=1</summary>
        /// <param name="orderId">订单号</param>
        /// <param name="webSite">是1688业务还是icbu业务</param>
        /// <param name="fields">需要返回的字段，目前有:company.name,sender,receiver,sendgood。返回的字段要用英文逗号分隔开</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeGetLogisticsInfosSellerViewResult AlibabaTradeGetLogisticsInfosSellerView(long orderId, string webSite, string fields = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeGetLogisticsInfosSellerViewAsync(orderId, webSite, fields, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取交易订单的物流信息(卖家视角)
        /// 获取卖家的订单的物流详情。该接口能查能根据物流单号查看物流详情，包括发件人，收件人，所发货物明细等。由于物流单录入的原因，可能跟踪信息的API查询会有延迟。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.trade.getLogisticsInfos.sellerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.trade.getLogisticsInfos.sellerView&amp;v=1</summary>
        /// <param name="orderId">订单号</param>
        /// <param name="webSite">是1688业务还是icbu业务</param>
        /// <param name="fields">需要返回的字段，目前有:company.name,sender,receiver,sendgood。返回的字段要用英文逗号分隔开</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeGetLogisticsInfosSellerViewResult> AlibabaTradeGetLogisticsInfosSellerViewAsync(long orderId, string webSite, string fields = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.logistics/alibaba.trade.getLogisticsInfos.sellerView/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orderId == null)
                        throw new System.ArgumentNullException("orderId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)), "orderId");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    if (fields != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture)), "fields");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeGetLogisticsInfosSellerViewResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeGetLogisticsInfosSellerViewResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取交易订单的物流信息(买家视角)
        /// 该接口需要获得订单买家的授权，获取买家的订单的物流详情，在采购或者分销场景中，作为买家也有获取物流详情的需求。该接口能查能根据订单号查看物流详情，包括发件人，收件人，所发货物明细等。由于物流单录入的原因，可能跟踪信息的API查询会有延迟。该API需要向开放平台申请权限才能访问。In the procurement or distribution scenario, buyers can ask for obtaining the logistics details. The interface can check the logistics details according to the order ID, including the sender, the recipient, the details of the goods sent, and so on. Depending on the logistics information entry time, there may be a delay in API queries regarding the information tracking.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.trade.getLogisticsInfos.buyerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.trade.getLogisticsInfos.buyerView&amp;v=1</summary>
        /// <param name="orderId">订单号</param>
        /// <param name="webSite">是1688业务还是icbu业务</param>
        /// <param name="fields">需要返回的字段，目前有:company.name,sender,receiver,sendgood。返回的字段要用英文逗号分隔开</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_2	- 订单尚未发货，暂无物流详情，请稍候再试。(订单尚未发货，建议监听订单发货消息，收到消息后查询订单物流状态。参考：https://open.1688.com/doc/topicDetail.htm?spm=a260s.11630592.0.0.555655ed4QUvy5&amp;topicGroup=ORDER&amp;id=ORDER_BUYER_VIEW_ANNOUNCE_SENDGOODS)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeGetLogisticsInfosBuyerViewResult AlibabaTradeGetLogisticsInfosBuyerView(long orderId, string webSite, string fields = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeGetLogisticsInfosBuyerViewAsync(orderId, webSite, fields, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取交易订单的物流信息(买家视角)
        /// 该接口需要获得订单买家的授权，获取买家的订单的物流详情，在采购或者分销场景中，作为买家也有获取物流详情的需求。该接口能查能根据订单号查看物流详情，包括发件人，收件人，所发货物明细等。由于物流单录入的原因，可能跟踪信息的API查询会有延迟。该API需要向开放平台申请权限才能访问。In the procurement or distribution scenario, buyers can ask for obtaining the logistics details. The interface can check the logistics details according to the order ID, including the sender, the recipient, the details of the goods sent, and so on. Depending on the logistics information entry time, there may be a delay in API queries regarding the information tracking.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.trade.getLogisticsInfos.buyerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.trade.getLogisticsInfos.buyerView&amp;v=1</summary>
        /// <param name="orderId">订单号</param>
        /// <param name="webSite">是1688业务还是icbu业务</param>
        /// <param name="fields">需要返回的字段，目前有:company.name,sender,receiver,sendgood。返回的字段要用英文逗号分隔开</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_2	- 订单尚未发货，暂无物流详情，请稍候再试。(订单尚未发货，建议监听订单发货消息，收到消息后查询订单物流状态。参考：https://open.1688.com/doc/topicDetail.htm?spm=a260s.11630592.0.0.555655ed4QUvy5&amp;topicGroup=ORDER&amp;id=ORDER_BUYER_VIEW_ANNOUNCE_SENDGOODS)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeGetLogisticsInfosBuyerViewResult> AlibabaTradeGetLogisticsInfosBuyerViewAsync(long orderId, string webSite, string fields = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.logistics/alibaba.trade.getLogisticsInfos.buyerView/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orderId == null)
                        throw new System.ArgumentNullException("orderId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)), "orderId");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    if (fields != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture)), "fields");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeGetLogisticsInfosBuyerViewResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeGetLogisticsInfosBuyerViewResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>物流公司列表-自联物流
        /// 查询自己联系物流的物流公司列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.OpQueryLogisticCompanyList.offline-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.OpQueryLogisticCompanyList.offline&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaLogisticsOpQueryLogisticCompanyListOfflineResult AlibabaLogisticsOpQueryLogisticCompanyListOffline()
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaLogisticsOpQueryLogisticCompanyListOfflineAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>物流公司列表-自联物流
        /// 查询自己联系物流的物流公司列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.OpQueryLogisticCompanyList.offline-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.OpQueryLogisticCompanyList.offline&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaLogisticsOpQueryLogisticCompanyListOfflineResult> AlibabaLogisticsOpQueryLogisticCompanyListOfflineAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.logistics/alibaba.logistics.OpQueryLogisticCompanyList.offline/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaLogisticsOpQueryLogisticCompanyListOfflineResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaLogisticsOpQueryLogisticCompanyListOfflineResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>物流公司列表-所有的物流公司
        /// 获取所有的物流公司名称
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.OpQueryLogisticCompanyList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.OpQueryLogisticCompanyList&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaLogisticsOpQueryLogisticCompanyListResult AlibabaLogisticsOpQueryLogisticCompanyList()
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaLogisticsOpQueryLogisticCompanyListAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>物流公司列表-所有的物流公司
        /// 获取所有的物流公司名称
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.OpQueryLogisticCompanyList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.OpQueryLogisticCompanyList&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaLogisticsOpQueryLogisticCompanyListResult> AlibabaLogisticsOpQueryLogisticCompanyListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.logistics/alibaba.logistics.OpQueryLogisticCompanyList/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaLogisticsOpQueryLogisticCompanyListResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaLogisticsOpQueryLogisticCompanyListResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取运费模板列表
        /// 获取运费模板列表。1688有两类特殊运费模板，不在此接口返回：不传运费模板表示使用运费说明；传入1表示卖家承担运费
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.freightTemplate.getList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.freightTemplate.getList&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaLogisticsFreightTemplateGetListResult AlibabaLogisticsFreightTemplateGetList(string webSite)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaLogisticsFreightTemplateGetListAsync(webSite, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取运费模板列表
        /// 获取运费模板列表。1688有两类特殊运费模板，不在此接口返回：不传运费模板表示使用运费说明；传入1表示卖家承担运费
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.freightTemplate.getList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.freightTemplate.getList&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaLogisticsFreightTemplateGetListResult> AlibabaLogisticsFreightTemplateGetListAsync(string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.logistics/alibaba.logistics.freightTemplate.getList/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaLogisticsFreightTemplateGetListResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaLogisticsFreightTemplateGetListResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>物流公司列表-支持快递单打印
        /// 查询支持快递单打印的物流公司列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.OpQueryLogisticCompanyList.print-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.OpQueryLogisticCompanyList.print&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaLogisticsOpQueryLogisticCompanyListPrintResult AlibabaLogisticsOpQueryLogisticCompanyListPrint()
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaLogisticsOpQueryLogisticCompanyListPrintAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>物流公司列表-支持快递单打印
        /// 查询支持快递单打印的物流公司列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.logistics:alibaba.logistics.OpQueryLogisticCompanyList.print-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.logistics&amp;n=alibaba.logistics.OpQueryLogisticCompanyList.print&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaLogisticsOpQueryLogisticCompanyListPrintResult> AlibabaLogisticsOpQueryLogisticCompanyListPrintAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.logistics/alibaba.logistics.OpQueryLogisticCompanyList.print/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaLogisticsOpQueryLogisticCompanyListPrintResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaLogisticsOpQueryLogisticCompanyListPrintResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>订单详情查看(买家视角)
        /// 获取单个交易明细信息，仅限买家调用。该API需要向阿里巴巴开放平台申请权限才能使用。Get a single transaction detail, only for users to call.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.get.buyerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.get.buyerView&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="orderId">交易的订单id</param>
        /// <param name="includeFields">查询结果中包含的域，GuaranteesTerms：保障条款，NativeLogistics：物流信息，RateDetail：评价详情，OrderInvoice：发票信息。默认返回GuaranteesTerms、NativeLogistics、OrderInvoice。</param>
        /// <param name="attributeKeys">垂直表中的attributeKeys</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeGetBuyerViewResult AlibabaTradeGetBuyerView(string webSite, long orderId, string includeFields = null, System.Collections.Generic.IEnumerable<string> attributeKeys = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeGetBuyerViewAsync(webSite, orderId, includeFields, attributeKeys, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>订单详情查看(买家视角)
        /// 获取单个交易明细信息，仅限买家调用。该API需要向阿里巴巴开放平台申请权限才能使用。Get a single transaction detail, only for users to call.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.get.buyerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.get.buyerView&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="orderId">交易的订单id</param>
        /// <param name="includeFields">查询结果中包含的域，GuaranteesTerms：保障条款，NativeLogistics：物流信息，RateDetail：评价详情，OrderInvoice：发票信息。默认返回GuaranteesTerms、NativeLogistics、OrderInvoice。</param>
        /// <param name="attributeKeys">垂直表中的attributeKeys</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeGetBuyerViewResult> AlibabaTradeGetBuyerViewAsync(string webSite, long orderId, string includeFields = null, System.Collections.Generic.IEnumerable<string> attributeKeys = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.get.buyerView/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    if (orderId == null)
                        throw new System.ArgumentNullException("orderId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)), "orderId");
                    }
                    if (includeFields != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(includeFields, System.Globalization.CultureInfo.InvariantCulture)), "includeFields");
                    }
                    if (attributeKeys != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(attributeKeys, System.Globalization.CultureInfo.InvariantCulture)), "attributeKeys");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeGetBuyerViewResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeGetBuyerViewResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>订单详情查看(卖家视角)
        /// 获取单个交易明细信息，仅限卖家调用
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.get.sellerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.get.sellerView&amp;v=1</summary>
        /// <param name="orderId">交易的订单id</param>
        /// <param name="includeFields">查询结果中包含的域，GuaranteesTerms：保障条款，NativeLogistics：物流信息，RateDetail：评价详情，OrderInvoice：发票信息。默认返回GuaranteesTerms、NativeLogistics、OrderInvoice。</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeGetSellerViewResult AlibabaTradeGetSellerView(long orderId, string includeFields = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeGetSellerViewAsync(orderId, includeFields, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>订单详情查看(卖家视角)
        /// 获取单个交易明细信息，仅限卖家调用
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.get.sellerView-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.get.sellerView&amp;v=1</summary>
        /// <param name="orderId">交易的订单id</param>
        /// <param name="includeFields">查询结果中包含的域，GuaranteesTerms：保障条款，NativeLogistics：物流信息，RateDetail：评价详情，OrderInvoice：发票信息。默认返回GuaranteesTerms、NativeLogistics、OrderInvoice。</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeGetSellerViewResult> AlibabaTradeGetSellerViewAsync(long orderId, string includeFields = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.get.sellerView/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orderId == null)
                        throw new System.ArgumentNullException("orderId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)), "orderId");
                    }
                    if (includeFields != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(includeFields, System.Globalization.CultureInfo.InvariantCulture)), "includeFields");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeGetSellerViewResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeGetSellerViewResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>退款单操作-卖家同意退货
        /// 卖家同意退货，并填写退货地址信息。注意：只有退货的售中或者售后退款单，才可以调用这个接口。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.refund.OpAgreeReturnGoods-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.refund.OpAgreeReturnGoods&amp;v=1</summary>
        /// <param name="refundId">退款单Id</param>
        /// <param name="address">卖家收货地址</param>
        /// <param name="post">邮编</param>
        /// <param name="phone">电话</param>
        /// <param name="fullName">全名</param>
        /// <param name="mobilePhone">手机</param>
        /// <param name="discription">说明</param>
        /// <param name="disputeType">1表示售中，2表示售后</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// INVALID_PARAM	- disputeType=* refundId=TQ8359259727492085,cause:null(纠纷类型填写错误，disputeType=1表示售中退款，disputeType=2表示售后退款)
        /// REFUND_STATUS_ERROR	- REFUND_STATUS_ERROR,errorMsg:null(退款单类型错误，待卖家同意退款单且退货的退款单可以调用本接口)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeRefundOpAgreeReturnGoodsResult AlibabaTradeRefundOpAgreeReturnGoods(string refundId, string address = null, string post = null, string phone = null, string fullName = null, string mobilePhone = null, string discription = null, int? disputeType = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeRefundOpAgreeReturnGoodsAsync(refundId, address, post, phone, fullName, mobilePhone, discription, disputeType, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>退款单操作-卖家同意退货
        /// 卖家同意退货，并填写退货地址信息。注意：只有退货的售中或者售后退款单，才可以调用这个接口。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.refund.OpAgreeReturnGoods-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.refund.OpAgreeReturnGoods&amp;v=1</summary>
        /// <param name="refundId">退款单Id</param>
        /// <param name="address">卖家收货地址</param>
        /// <param name="post">邮编</param>
        /// <param name="phone">电话</param>
        /// <param name="fullName">全名</param>
        /// <param name="mobilePhone">手机</param>
        /// <param name="discription">说明</param>
        /// <param name="disputeType">1表示售中，2表示售后</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// INVALID_PARAM	- disputeType=* refundId=TQ8359259727492085,cause:null(纠纷类型填写错误，disputeType=1表示售中退款，disputeType=2表示售后退款)
        /// REFUND_STATUS_ERROR	- REFUND_STATUS_ERROR,errorMsg:null(退款单类型错误，待卖家同意退款单且退货的退款单可以调用本接口)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeRefundOpAgreeReturnGoodsResult> AlibabaTradeRefundOpAgreeReturnGoodsAsync(string refundId, string address = null, string post = null, string phone = null, string fullName = null, string mobilePhone = null, string discription = null, int? disputeType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.refund.OpAgreeReturnGoods/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (refundId == null)
                        throw new System.ArgumentNullException("refundId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(refundId, System.Globalization.CultureInfo.InvariantCulture)), "refundId");
                    }
                    if (address != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture)), "address");
                    }
                    if (post != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(post, System.Globalization.CultureInfo.InvariantCulture)), "post");
                    }
                    if (phone != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(phone, System.Globalization.CultureInfo.InvariantCulture)), "phone");
                    }
                    if (fullName != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(fullName, System.Globalization.CultureInfo.InvariantCulture)), "fullName");
                    }
                    if (mobilePhone != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(mobilePhone, System.Globalization.CultureInfo.InvariantCulture)), "mobilePhone");
                    }
                    if (discription != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(discription, System.Globalization.CultureInfo.InvariantCulture)), "discription");
                    }
                    if (disputeType != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(disputeType, System.Globalization.CultureInfo.InvariantCulture)), "disputeType");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeRefundOpAgreeReturnGoodsResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeRefundOpAgreeReturnGoodsResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>查询退款单详情-根据退款单ID
        /// 查询退款单详情，同时可以查询到退款操作列表。 该API需要像阿里巴巴申请权限才能访问。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.refund.OpQueryOrderRefund-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.refund.OpQueryOrderRefund&amp;v=1</summary>
        /// <param name="refundId">退款单业务主键 TQ+ID</param>
        /// <param name="needTimeOutInfo">需要退款单的超时信息</param>
        /// <param name="needOrderRefundOperation">需要退款单伴随的所有退款操作信息</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500	- {\&amp;quot;errorCode\&amp;quot;:\&amp;quot;003\&amp;quot;,\&amp;quot;errorMessage\&amp;quot;:\&amp;quot;SERVICE:查询数据失败，请检查输入参数后重试。\&amp;quot;,\&amp;quot;cause\&amp;quot;:\&amp;quot;\&amp;quot;}(非授权用户的退款单)
        /// 500	- {\&amp;quot;errorCode\&amp;quot;:\&amp;quot;003002\&amp;quot;,\&amp;quot;errorMessage\&amp;quot;:\&amp;quot;SERVICE:INVOKE_FAIL:退款数据错误，请检查退款单号，退款单号的格式一般为TD+id\&amp;quot;,\&amp;quot;cause\&amp;quot;:\&amp;quot;errorCode:REFUND_DATA_ERROR,errorMsg:refundId : 11043002311780591,cause:null\&amp;quot;}(退款单不正确)
        /// 500	- {\&amp;quot;errorCode\&amp;quot;:\&amp;quot;003002\&amp;quot;,\&amp;quot;errorMessage\&amp;quot;:\&amp;quot;SERVICE:INVOKE_FAIL:OrderRefundService#queryOrderRefundOperationList\&amp;quot;,\&amp;quot;cause\&amp;quot;:\&amp;quot;errorCode:INVALID_PARAM,errorMsg:null,cause:null\&amp;quot;}(退款单不正确)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeRefundOpQueryOrderRefundResult2 AlibabaTradeRefundOpQueryOrderRefund(string refundId, bool? needTimeOutInfo = null, bool? needOrderRefundOperation = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeRefundOpQueryOrderRefundAsync(refundId, needTimeOutInfo, needOrderRefundOperation, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询退款单详情-根据退款单ID
        /// 查询退款单详情，同时可以查询到退款操作列表。 该API需要像阿里巴巴申请权限才能访问。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.refund.OpQueryOrderRefund-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.refund.OpQueryOrderRefund&amp;v=1</summary>
        /// <param name="refundId">退款单业务主键 TQ+ID</param>
        /// <param name="needTimeOutInfo">需要退款单的超时信息</param>
        /// <param name="needOrderRefundOperation">需要退款单伴随的所有退款操作信息</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500	- {\&amp;quot;errorCode\&amp;quot;:\&amp;quot;003\&amp;quot;,\&amp;quot;errorMessage\&amp;quot;:\&amp;quot;SERVICE:查询数据失败，请检查输入参数后重试。\&amp;quot;,\&amp;quot;cause\&amp;quot;:\&amp;quot;\&amp;quot;}(非授权用户的退款单)
        /// 500	- {\&amp;quot;errorCode\&amp;quot;:\&amp;quot;003002\&amp;quot;,\&amp;quot;errorMessage\&amp;quot;:\&amp;quot;SERVICE:INVOKE_FAIL:退款数据错误，请检查退款单号，退款单号的格式一般为TD+id\&amp;quot;,\&amp;quot;cause\&amp;quot;:\&amp;quot;errorCode:REFUND_DATA_ERROR,errorMsg:refundId : 11043002311780591,cause:null\&amp;quot;}(退款单不正确)
        /// 500	- {\&amp;quot;errorCode\&amp;quot;:\&amp;quot;003002\&amp;quot;,\&amp;quot;errorMessage\&amp;quot;:\&amp;quot;SERVICE:INVOKE_FAIL:OrderRefundService#queryOrderRefundOperationList\&amp;quot;,\&amp;quot;cause\&amp;quot;:\&amp;quot;errorCode:INVALID_PARAM,errorMsg:null,cause:null\&amp;quot;}(退款单不正确)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeRefundOpQueryOrderRefundResult2> AlibabaTradeRefundOpQueryOrderRefundAsync(string refundId, bool? needTimeOutInfo = null, bool? needOrderRefundOperation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.refund.OpQueryOrderRefund/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (refundId == null)
                        throw new System.ArgumentNullException("refundId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(refundId, System.Globalization.CultureInfo.InvariantCulture)), "refundId");
                    }
                    if (needTimeOutInfo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(needTimeOutInfo, System.Globalization.CultureInfo.InvariantCulture)), "needTimeOutInfo");
                    }
                    if (needOrderRefundOperation != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(needOrderRefundOperation, System.Globalization.CultureInfo.InvariantCulture)), "needOrderRefundOperation");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeRefundOpQueryOrderRefundResult2>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeRefundOpQueryOrderRefundResult2);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>查询退款单列表(卖家视角)
        /// 根据订单号或退款单列表查询退款单列表，有可能有延迟。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.refund.queryOrderRefundList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.refund.queryOrderRefundList&amp;v=1</summary>
        /// <param name="orderId">订单Id</param>
        /// <param name="applyStartTime">退款申请时间（起始）</param>
        /// <param name="applyEndTime">退款申请时间(截止)</param>
        /// <param name="refundStatusSet">退款状态列表</param>
        /// <param name="buyerMemberId">买家memberId</param>
        /// <param name="buyerLoginId">买家loginId</param>
        /// <param name="currentPageNum">查询页码，起始页码为0</param>
        /// <param name="pageSize">页大小</param>
        /// <param name="logisticsNo">退货运单号</param>
        /// <param name="modifyStartTime">退款修改时间(起始)</param>
        /// <param name="modifyEndTime">退款修改时间(截止)</param>
        /// <param name="dipsuteType">1:售中退款，2:售后退款；0:所有退款单</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500	- {\&amp;quot;errorCode\&amp;quot;:\&amp;quot;003\&amp;quot;,\&amp;quot;errorMessage\&amp;quot;:\&amp;quot;SERVICE:查询数据失败，请检查输入参数后重试。\&amp;quot;,\&amp;quot;cause\&amp;quot;:\&amp;quot;\&amp;quot;}(订单号码输入错误)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeRefundQueryOrderRefundListResult AlibabaTradeRefundQueryOrderRefundList(long? orderId = null, System.DateTimeOffset? applyStartTime = null, System.DateTimeOffset? applyEndTime = null, System.Collections.Generic.IEnumerable<string> refundStatusSet = null, string buyerMemberId = null, string buyerLoginId = null, int? currentPageNum = null, int? pageSize = null, string logisticsNo = null, System.DateTimeOffset? modifyStartTime = null, System.DateTimeOffset? modifyEndTime = null, int? dipsuteType = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeRefundQueryOrderRefundListAsync(orderId, applyStartTime, applyEndTime, refundStatusSet, buyerMemberId, buyerLoginId, currentPageNum, pageSize, logisticsNo, modifyStartTime, modifyEndTime, dipsuteType, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询退款单列表(卖家视角)
        /// 根据订单号或退款单列表查询退款单列表，有可能有延迟。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.refund.queryOrderRefundList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.refund.queryOrderRefundList&amp;v=1</summary>
        /// <param name="orderId">订单Id</param>
        /// <param name="applyStartTime">退款申请时间（起始）</param>
        /// <param name="applyEndTime">退款申请时间(截止)</param>
        /// <param name="refundStatusSet">退款状态列表</param>
        /// <param name="buyerMemberId">买家memberId</param>
        /// <param name="buyerLoginId">买家loginId</param>
        /// <param name="currentPageNum">查询页码，起始页码为0</param>
        /// <param name="pageSize">页大小</param>
        /// <param name="logisticsNo">退货运单号</param>
        /// <param name="modifyStartTime">退款修改时间(起始)</param>
        /// <param name="modifyEndTime">退款修改时间(截止)</param>
        /// <param name="dipsuteType">1:售中退款，2:售后退款；0:所有退款单</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500	- {\&amp;quot;errorCode\&amp;quot;:\&amp;quot;003\&amp;quot;,\&amp;quot;errorMessage\&amp;quot;:\&amp;quot;SERVICE:查询数据失败，请检查输入参数后重试。\&amp;quot;,\&amp;quot;cause\&amp;quot;:\&amp;quot;\&amp;quot;}(订单号码输入错误)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeRefundQueryOrderRefundListResult> AlibabaTradeRefundQueryOrderRefundListAsync(long? orderId = null, System.DateTimeOffset? applyStartTime = null, System.DateTimeOffset? applyEndTime = null, System.Collections.Generic.IEnumerable<string> refundStatusSet = null, string buyerMemberId = null, string buyerLoginId = null, int? currentPageNum = null, int? pageSize = null, string logisticsNo = null, System.DateTimeOffset? modifyStartTime = null, System.DateTimeOffset? modifyEndTime = null, int? dipsuteType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.refund.queryOrderRefundList/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orderId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)), "orderId");
                    }
                    if (applyStartTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(applyStartTime, System.Globalization.CultureInfo.InvariantCulture)), "applyStartTime");
                    }
                    if (applyEndTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(applyEndTime, System.Globalization.CultureInfo.InvariantCulture)), "applyEndTime");
                    }
                    if (refundStatusSet != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(refundStatusSet, System.Globalization.CultureInfo.InvariantCulture)), "refundStatusSet");
                    }
                    if (buyerMemberId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(buyerMemberId, System.Globalization.CultureInfo.InvariantCulture)), "buyerMemberId");
                    }
                    if (buyerLoginId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(buyerLoginId, System.Globalization.CultureInfo.InvariantCulture)), "buyerLoginId");
                    }
                    if (currentPageNum != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(currentPageNum, System.Globalization.CultureInfo.InvariantCulture)), "currentPageNum");
                    }
                    if (pageSize != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    if (logisticsNo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(logisticsNo, System.Globalization.CultureInfo.InvariantCulture)), "logisticsNo");
                    }
                    if (modifyStartTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(modifyStartTime, System.Globalization.CultureInfo.InvariantCulture)), "modifyStartTime");
                    }
                    if (modifyEndTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(modifyEndTime, System.Globalization.CultureInfo.InvariantCulture)), "modifyEndTime");
                    }
                    if (dipsuteType != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(dipsuteType, System.Globalization.CultureInfo.InvariantCulture)), "dipsuteType");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeRefundQueryOrderRefundListResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeRefundQueryOrderRefundListResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>查询商品支持的交易类型
        /// 查询商品支持的交易类型
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.queryTradeTypesOfOffer-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.queryTradeTypesOfOffer&amp;v=1</summary>
        /// <param name="sellerMemberId">卖家memberId</param>
        /// <param name="productId">商品Id</param>
        /// <param name="catId">类目id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeQueryTradeTypesOfOfferResult AlibabaTradeQueryTradeTypesOfOffer(string sellerMemberId, long productId, long? catId = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeQueryTradeTypesOfOfferAsync(sellerMemberId, productId, catId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询商品支持的交易类型
        /// 查询商品支持的交易类型
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.queryTradeTypesOfOffer-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.queryTradeTypesOfOffer&amp;v=1</summary>
        /// <param name="sellerMemberId">卖家memberId</param>
        /// <param name="productId">商品Id</param>
        /// <param name="catId">类目id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeQueryTradeTypesOfOfferResult> AlibabaTradeQueryTradeTypesOfOfferAsync(string sellerMemberId, long productId, long? catId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.queryTradeTypesOfOffer/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (sellerMemberId == null)
                        throw new System.ArgumentNullException("sellerMemberId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(sellerMemberId, System.Globalization.CultureInfo.InvariantCulture)), "sellerMemberId");
                    }
                    if (productId == null)
                        throw new System.ArgumentNullException("productId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture)), "productId");
                    }
                    if (catId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(catId, System.Globalization.CultureInfo.InvariantCulture)), "catId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeQueryTradeTypesOfOfferResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeQueryTradeTypesOfOfferResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>创建订单前预览数据接口
        /// 订单创建只允许购买同一个供应商的商品。本接口返回创建订单相关的优惠等信息。
        /// 1、校验商品数据是否允许订购。
        /// 2、校验代销关系
        /// 3、校验库存、起批量、是否满足混批条件
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.createOrder.preview-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.createOrder.preview&amp;v=1</summary>
        /// <param name="addressParam">收货地址信息</param>
        /// <param name="cargoParamList">商品信息</param>
        /// <param name="invoiceParam">发票信息</param>
        /// <param name="flow">general（创建大市场订单），saleproxy（创建分销订单）。saleproxy流程将校验分销关系</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_007	- 与供应商的代销关系不存在,不能使用saleproxy通道下单。(flow不能使用slproxy)
        /// 500_005	- 商品[offerId]的购买数量不满足起批量限制。(商品的购买数量小于起批量)
        /// 500_006	- 商品[offerId]的购买数量或者价格不满足混批限制。(商品的购买数量或者总金额均不满足混批条件)
        /// 500_004	- 商品[offerId_specId]库存不足，请核实库存后订购。(商品的某个规格库存不足)
        /// 500_002	- 商品[offerId]不属于同一卖家或者没有指定specId。(存在多个卖家的商品或者商品没有指定specId)
        /// 500_003	- 商品[offerId ]不属于同一卖家或者规格[specId] 不属于商品[offerId](存在多个卖家的商品或者商品不存在specId的规格)
        /// 500_001	- 商品[offerId]不支持在线交易，无法下单。(商品不支持在线交易，目前不能购买)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCreateOrderPreviewResult AlibabaCreateOrderPreview(AlibabaTradeFastAddress addressParam, System.Collections.Generic.IEnumerable<AlibabaTradeFastCargo> cargoParamList, AlibabaTradeFastInvoice invoiceParam, string flow)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCreateOrderPreviewAsync(addressParam, cargoParamList, invoiceParam, flow, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建订单前预览数据接口
        /// 订单创建只允许购买同一个供应商的商品。本接口返回创建订单相关的优惠等信息。
        /// 1、校验商品数据是否允许订购。
        /// 2、校验代销关系
        /// 3、校验库存、起批量、是否满足混批条件
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.createOrder.preview-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.createOrder.preview&amp;v=1</summary>
        /// <param name="addressParam">收货地址信息</param>
        /// <param name="cargoParamList">商品信息</param>
        /// <param name="invoiceParam">发票信息</param>
        /// <param name="flow">general（创建大市场订单），saleproxy（创建分销订单）。saleproxy流程将校验分销关系</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_007	- 与供应商的代销关系不存在,不能使用saleproxy通道下单。(flow不能使用slproxy)
        /// 500_005	- 商品[offerId]的购买数量不满足起批量限制。(商品的购买数量小于起批量)
        /// 500_006	- 商品[offerId]的购买数量或者价格不满足混批限制。(商品的购买数量或者总金额均不满足混批条件)
        /// 500_004	- 商品[offerId_specId]库存不足，请核实库存后订购。(商品的某个规格库存不足)
        /// 500_002	- 商品[offerId]不属于同一卖家或者没有指定specId。(存在多个卖家的商品或者商品没有指定specId)
        /// 500_003	- 商品[offerId ]不属于同一卖家或者规格[specId] 不属于商品[offerId](存在多个卖家的商品或者商品不存在specId的规格)
        /// 500_001	- 商品[offerId]不支持在线交易，无法下单。(商品不支持在线交易，目前不能购买)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCreateOrderPreviewResult> AlibabaCreateOrderPreviewAsync(AlibabaTradeFastAddress addressParam, System.Collections.Generic.IEnumerable<AlibabaTradeFastCargo> cargoParamList, AlibabaTradeFastInvoice invoiceParam, string flow, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.createOrder.preview/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (addressParam == null)
                        throw new System.ArgumentNullException("addressParam");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(addressParam, System.Globalization.CultureInfo.InvariantCulture)), "addressParam");
                    }
                    if (cargoParamList == null)
                        throw new System.ArgumentNullException("cargoParamList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(cargoParamList, System.Globalization.CultureInfo.InvariantCulture)), "cargoParamList");
                    }
                    if (invoiceParam == null)
                        throw new System.ArgumentNullException("invoiceParam");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(invoiceParam, System.Globalization.CultureInfo.InvariantCulture)), "invoiceParam");
                    }
                    if (flow == null)
                        throw new System.ArgumentNullException("flow");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(flow, System.Globalization.CultureInfo.InvariantCulture)), "flow");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCreateOrderPreviewResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCreateOrderPreviewResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>查询退款单详情-根据订单ID
        /// 根据订单号实时查询退款单列表，目前只能查询到售中的退款单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.refund.OpQueryBatchRefundByOrderIdAndStatus-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.refund.OpQueryBatchRefundByOrderIdAndStatus&amp;v=1</summary>
        /// <param name="orderId">订单id</param>
        /// <param name="queryType">1：活动；3:退款成功（只支持退款中和退款成功）</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500	- &amp;quot;{\&amp;quot;errorCode\&amp;quot;:\&amp;quot;003002\&amp;quot;,\&amp;quot;errorMessage\&amp;quot;:\&amp;quot;SERVICE:INVOKE_FAIL:OrderRefundService.queryBatchRefundByOrderIdAndStatus\&amp;quot;,\&amp;quot;cause\&amp;quot;:\&amp;quot;errorCode:ORDER_NOT_EXIST,errorMsg:null,cause:null\&amp;quot;}&amp;quot;(订单号有误)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeRefundOpQueryBatchRefundByOrderIdAndStatusResult2 AlibabaTradeRefundOpQueryBatchRefundByOrderIdAndStatus(string orderId, string queryType)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeRefundOpQueryBatchRefundByOrderIdAndStatusAsync(orderId, queryType, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询退款单详情-根据订单ID
        /// 根据订单号实时查询退款单列表，目前只能查询到售中的退款单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.refund.OpQueryBatchRefundByOrderIdAndStatus-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.refund.OpQueryBatchRefundByOrderIdAndStatus&amp;v=1</summary>
        /// <param name="orderId">订单id</param>
        /// <param name="queryType">1：活动；3:退款成功（只支持退款中和退款成功）</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500	- &amp;quot;{\&amp;quot;errorCode\&amp;quot;:\&amp;quot;003002\&amp;quot;,\&amp;quot;errorMessage\&amp;quot;:\&amp;quot;SERVICE:INVOKE_FAIL:OrderRefundService.queryBatchRefundByOrderIdAndStatus\&amp;quot;,\&amp;quot;cause\&amp;quot;:\&amp;quot;errorCode:ORDER_NOT_EXIST,errorMsg:null,cause:null\&amp;quot;}&amp;quot;(订单号有误)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeRefundOpQueryBatchRefundByOrderIdAndStatusResult2> AlibabaTradeRefundOpQueryBatchRefundByOrderIdAndStatusAsync(string orderId, string queryType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.refund.OpQueryBatchRefundByOrderIdAndStatus/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orderId == null)
                        throw new System.ArgumentNullException("orderId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)), "orderId");
                    }
                    if (queryType == null)
                        throw new System.ArgumentNullException("queryType");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(queryType, System.Globalization.CultureInfo.InvariantCulture)), "queryType");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeRefundOpQueryBatchRefundByOrderIdAndStatusResult2>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeRefundOpQueryBatchRefundByOrderIdAndStatusResult2);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>查询退款单列表(买家视角)
        /// 买家查看退款单列表，该接口不支持子账号查询，请使用主账号授权后查询
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.refund.buyer.queryOrderRefundList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.refund.buyer.queryOrderRefundList&amp;v=1</summary>
        /// <param name="orderId">订单Id</param>
        /// <param name="applyStartTime">退款申请时间（起始）</param>
        /// <param name="applyEndTime">退款申请时间（截止）</param>
        /// <param name="refundStatusSet">退款状态列表</param>
        /// <param name="sellerMemberId">卖家memberId</param>
        /// <param name="currentPageNum">当前页码</param>
        /// <param name="pageSize">每页条数</param>
        /// <param name="logisticsNo">退货物流单号（传此字段查询时，需同时传入sellerMemberId）</param>
        /// <param name="modifyStartTime">退款修改时间(起始)</param>
        /// <param name="modifyEndTime">退款修改时间(截止)</param>
        /// <param name="dipsuteType">1:售中退款，2:售后退款；0:所有退款单</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeRefundBuyerQueryOrderRefundListResult AlibabaTradeRefundBuyerQueryOrderRefundList(long? orderId = null, System.DateTimeOffset? applyStartTime = null, System.DateTimeOffset? applyEndTime = null, System.Collections.Generic.IEnumerable<string> refundStatusSet = null, string sellerMemberId = null, int? currentPageNum = null, int? pageSize = null, string logisticsNo = null, System.DateTimeOffset? modifyStartTime = null, System.DateTimeOffset? modifyEndTime = null, int? dipsuteType = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeRefundBuyerQueryOrderRefundListAsync(orderId, applyStartTime, applyEndTime, refundStatusSet, sellerMemberId, currentPageNum, pageSize, logisticsNo, modifyStartTime, modifyEndTime, dipsuteType, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询退款单列表(买家视角)
        /// 买家查看退款单列表，该接口不支持子账号查询，请使用主账号授权后查询
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.refund.buyer.queryOrderRefundList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.refund.buyer.queryOrderRefundList&amp;v=1</summary>
        /// <param name="orderId">订单Id</param>
        /// <param name="applyStartTime">退款申请时间（起始）</param>
        /// <param name="applyEndTime">退款申请时间（截止）</param>
        /// <param name="refundStatusSet">退款状态列表</param>
        /// <param name="sellerMemberId">卖家memberId</param>
        /// <param name="currentPageNum">当前页码</param>
        /// <param name="pageSize">每页条数</param>
        /// <param name="logisticsNo">退货物流单号（传此字段查询时，需同时传入sellerMemberId）</param>
        /// <param name="modifyStartTime">退款修改时间(起始)</param>
        /// <param name="modifyEndTime">退款修改时间(截止)</param>
        /// <param name="dipsuteType">1:售中退款，2:售后退款；0:所有退款单</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeRefundBuyerQueryOrderRefundListResult> AlibabaTradeRefundBuyerQueryOrderRefundListAsync(long? orderId = null, System.DateTimeOffset? applyStartTime = null, System.DateTimeOffset? applyEndTime = null, System.Collections.Generic.IEnumerable<string> refundStatusSet = null, string sellerMemberId = null, int? currentPageNum = null, int? pageSize = null, string logisticsNo = null, System.DateTimeOffset? modifyStartTime = null, System.DateTimeOffset? modifyEndTime = null, int? dipsuteType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.refund.buyer.queryOrderRefundList/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orderId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)), "orderId");
                    }
                    if (applyStartTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(applyStartTime, System.Globalization.CultureInfo.InvariantCulture)), "applyStartTime");
                    }
                    if (applyEndTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(applyEndTime, System.Globalization.CultureInfo.InvariantCulture)), "applyEndTime");
                    }
                    if (refundStatusSet != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(refundStatusSet, System.Globalization.CultureInfo.InvariantCulture)), "refundStatusSet");
                    }
                    if (sellerMemberId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(sellerMemberId, System.Globalization.CultureInfo.InvariantCulture)), "sellerMemberId");
                    }
                    if (currentPageNum != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(currentPageNum, System.Globalization.CultureInfo.InvariantCulture)), "currentPageNum");
                    }
                    if (pageSize != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    if (logisticsNo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(logisticsNo, System.Globalization.CultureInfo.InvariantCulture)), "logisticsNo");
                    }
                    if (modifyStartTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(modifyStartTime, System.Globalization.CultureInfo.InvariantCulture)), "modifyStartTime");
                    }
                    if (modifyEndTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(modifyEndTime, System.Globalization.CultureInfo.InvariantCulture)), "modifyEndTime");
                    }
                    if (dipsuteType != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(dipsuteType, System.Globalization.CultureInfo.InvariantCulture)), "dipsuteType");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeRefundBuyerQueryOrderRefundListResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeRefundBuyerQueryOrderRefundListResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>买家补充订单留言接口
        /// 买家补充订单留言接口，注意留言总长不超500字符
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.addFeedback-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.addFeedback&amp;v=1</summary>
        /// <param name="tradeFeedbackParam">请求参数</param>
        /// <returns>返回结果返回 ErrorCode 的错误信息
        /// 400_1	- parameter invalid(检查参数是否有传及参数类型是否符合要求)
        /// 400_2	- need authorization(需要授权登录)
        /// 500_1	- invoke remote service error(调用远程服务异常，请在ISV交流群里咨询技术支持或帮助中心提单)
        /// 500_2	- remote service error(服务异常，请稍后再试，或在ISV交流群里咨询技术支持或帮助中心提单)
        /// 500_2	- invalid parameter error(请求参数无效，请在ISV交流群里咨询技术支持或帮助中心提单)
        /// 500_2	- user order not exist error(订单号对应的订单不是当前授权用户的订单，无权操作)
        /// 500_2	- order not exist error(订单号不存在对应订单，请检查订单号是否正确)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response4 AlibabaTradeAddFeedback(AlibabaOceanOpenplatformBizTradeParamTradeFeedbackParam tradeFeedbackParam)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeAddFeedbackAsync(tradeFeedbackParam, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>买家补充订单留言接口
        /// 买家补充订单留言接口，注意留言总长不超500字符
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.addFeedback-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.addFeedback&amp;v=1</summary>
        /// <param name="tradeFeedbackParam">请求参数</param>
        /// <returns>返回结果返回 ErrorCode 的错误信息
        /// 400_1	- parameter invalid(检查参数是否有传及参数类型是否符合要求)
        /// 400_2	- need authorization(需要授权登录)
        /// 500_1	- invoke remote service error(调用远程服务异常，请在ISV交流群里咨询技术支持或帮助中心提单)
        /// 500_2	- remote service error(服务异常，请稍后再试，或在ISV交流群里咨询技术支持或帮助中心提单)
        /// 500_2	- invalid parameter error(请求参数无效，请在ISV交流群里咨询技术支持或帮助中心提单)
        /// 500_2	- user order not exist error(订单号对应的订单不是当前授权用户的订单，无权操作)
        /// 500_2	- order not exist error(订单号不存在对应订单，请检查订单号是否正确)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response4> AlibabaTradeAddFeedbackAsync(AlibabaOceanOpenplatformBizTradeParamTradeFeedbackParam tradeFeedbackParam, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.addFeedback/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (tradeFeedbackParam == null)
                        throw new System.ArgumentNullException("tradeFeedbackParam");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(tradeFeedbackParam, System.Globalization.CultureInfo.InvariantCulture)), "tradeFeedbackParam");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response4);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>查询卖家混批设置
        /// 查询卖家混批设置。Query seller settings for mixed batch.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.OpQueryMarketingMixConfig-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.OpQueryMarketingMixConfig&amp;v=1</summary>
        /// <param name="sellerMemberId">卖家memberId</param>
        /// <param name="sellerLoginId">卖家LoginId，sellerMemberId为空时，以loginId为准</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_1	- 卖家信息不得为空。(检查sllerMemberId和sellerLoginId，这两个不能同时为空)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeOpQueryMarketingMixConfigResult AlibabaTradeOpQueryMarketingMixConfig(string sellerMemberId = null, string sellerLoginId = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeOpQueryMarketingMixConfigAsync(sellerMemberId, sellerLoginId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询卖家混批设置
        /// 查询卖家混批设置。Query seller settings for mixed batch.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.OpQueryMarketingMixConfig-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.OpQueryMarketingMixConfig&amp;v=1</summary>
        /// <param name="sellerMemberId">卖家memberId</param>
        /// <param name="sellerLoginId">卖家LoginId，sellerMemberId为空时，以loginId为准</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_1	- 卖家信息不得为空。(检查sllerMemberId和sellerLoginId，这两个不能同时为空)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeOpQueryMarketingMixConfigResult> AlibabaTradeOpQueryMarketingMixConfigAsync(string sellerMemberId = null, string sellerLoginId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.OpQueryMarketingMixConfig/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (sellerMemberId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(sellerMemberId, System.Globalization.CultureInfo.InvariantCulture)), "sellerMemberId");
                    }
                    if (sellerLoginId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(sellerLoginId, System.Globalization.CultureInfo.InvariantCulture)), "sellerLoginId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeOpQueryMarketingMixConfigResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeOpQueryMarketingMixConfigResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>订单列表查看(买家视角)
        /// 获取买家的订单列表，也就是用户的memberId必须等于订单里的买家memberId。该接口仅仅返回订单基本信息，不会返回订单的物流信息和发票信息；如果需要获取物流信息，请调用获取订单详情接口；如果需要获取发票信息，请调用获取发票信息的API
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.getBuyerOrderList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.getBuyerOrderList&amp;v=1</summary>
        /// <param name="bizTypes">业务类型，支持： &amp;quot;cn&amp;quot;(普通订单类型), &amp;quot;ws&amp;quot;(大额批发订单类型), &amp;quot;yp&amp;quot;(普通拿样订单类型), &amp;quot;yf&amp;quot;(一分钱拿样订单类型), &amp;quot;fs&amp;quot;(倒批(限时折扣)订单类型), &amp;quot;cz&amp;quot;(加工定制订单类型), &amp;quot;ag&amp;quot;(协议采购订单类型), &amp;quot;hp&amp;quot;(伙拼订单类型), &amp;quot;gc&amp;quot;(国采订单类型), &amp;quot;supply&amp;quot;(供销订单类型), &amp;quot;nyg&amp;quot;(nyg订单类型), &amp;quot;factory&amp;quot;(淘工厂订单类型), &amp;quot;quick&amp;quot;(快订下单), &amp;quot;xiangpin&amp;quot;(享拼订单), &amp;quot;nest&amp;quot;(采购商城-鸟巢), &amp;quot;f2f&amp;quot;(当面付), &amp;quot;cyfw&amp;quot;(存样服务), &amp;quot;sp&amp;quot;(代销订单标记), &amp;quot;wg&amp;quot;(微供订单), &amp;quot;factorysamp&amp;quot;(淘工厂打样订单), &amp;quot;factorybig&amp;quot;(淘工厂大货订单)</param>
        /// <param name="createEndTime">下单结束时间</param>
        /// <param name="createStartTime">下单开始时间</param>
        /// <param name="isHis">是否查询历史订单表,默认查询当前表，即默认值为false</param>
        /// <param name="modifyEndTime">查询修改时间结束</param>
        /// <param name="modifyStartTime">查询修改时间开始</param>
        /// <param name="orderStatus">订单状态，值有 success, cancel(交易取消，违约金等交割完毕), waitbuyerpay(等待卖家付款)， waitsellersend(等待卖家发货), waitbuyerreceive(等待买家收货 )</param>
        /// <param name="page">查询分页页码，从1开始</param>
        /// <param name="pageSize">查询的每页的数量</param>
        /// <param name="refundStatus">退款状态，支持： &amp;quot;waitselleragree&amp;quot;(等待卖家同意), &amp;quot;refundsuccess&amp;quot;(退款成功), &amp;quot;refundclose&amp;quot;(退款关闭), &amp;quot;waitbuyermodify&amp;quot;(待买家修改), &amp;quot;waitbuyersend&amp;quot;(等待买家退货), &amp;quot;waitsellerreceive&amp;quot;(等待卖家确认收货)</param>
        /// <param name="sellerMemberId">卖家memberId</param>
        /// <param name="sellerRateStatus">卖家评价状态 (4:已评价,5:未评价,6;不需要评价)</param>
        /// <param name="tradeType">交易类型:
        /// 担保交易(1),
        /// 预存款交易(2),
        /// ETC境外收单交易(3),
        /// 即时到帐交易(4),
        /// 保障金安全交易(5),
        /// 统一交易流程(6),
        /// 分阶段交易(7),
        /// 货到付款交易(8),
        /// 信用凭证支付交易(9),
        /// 账期支付交易(10),
        /// 1688交易4.0，新分阶段交易(50060),
        /// 当面付的交易流程(50070),
        /// 服务类的交易流程(50080)</param>
        /// <param name="productName">商品名称</param>
        /// <param name="needBuyerAddressAndPhone">是否需要查询买家的详细地址信息和电话</param>
        /// <param name="needMemoInfo">是否需要查询备注信息</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeGetBuyerOrderListResult AlibabaTradeGetBuyerOrderList(System.Collections.Generic.IEnumerable<string> bizTypes = null, System.DateTimeOffset? createEndTime = null, System.DateTimeOffset? createStartTime = null, bool? isHis = null, System.DateTimeOffset? modifyEndTime = null, System.DateTimeOffset? modifyStartTime = null, string orderStatus = null, int? page = null, int? pageSize = null, string refundStatus = null, string sellerMemberId = null, int? sellerRateStatus = null, string tradeType = null, string productName = null, bool? needBuyerAddressAndPhone = null, bool? needMemoInfo = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeGetBuyerOrderListAsync(bizTypes, createEndTime, createStartTime, isHis, modifyEndTime, modifyStartTime, orderStatus, page, pageSize, refundStatus, sellerMemberId, sellerRateStatus, tradeType, productName, needBuyerAddressAndPhone, needMemoInfo, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>订单列表查看(买家视角)
        /// 获取买家的订单列表，也就是用户的memberId必须等于订单里的买家memberId。该接口仅仅返回订单基本信息，不会返回订单的物流信息和发票信息；如果需要获取物流信息，请调用获取订单详情接口；如果需要获取发票信息，请调用获取发票信息的API
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.getBuyerOrderList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.getBuyerOrderList&amp;v=1</summary>
        /// <param name="bizTypes">业务类型，支持： &amp;quot;cn&amp;quot;(普通订单类型), &amp;quot;ws&amp;quot;(大额批发订单类型), &amp;quot;yp&amp;quot;(普通拿样订单类型), &amp;quot;yf&amp;quot;(一分钱拿样订单类型), &amp;quot;fs&amp;quot;(倒批(限时折扣)订单类型), &amp;quot;cz&amp;quot;(加工定制订单类型), &amp;quot;ag&amp;quot;(协议采购订单类型), &amp;quot;hp&amp;quot;(伙拼订单类型), &amp;quot;gc&amp;quot;(国采订单类型), &amp;quot;supply&amp;quot;(供销订单类型), &amp;quot;nyg&amp;quot;(nyg订单类型), &amp;quot;factory&amp;quot;(淘工厂订单类型), &amp;quot;quick&amp;quot;(快订下单), &amp;quot;xiangpin&amp;quot;(享拼订单), &amp;quot;nest&amp;quot;(采购商城-鸟巢), &amp;quot;f2f&amp;quot;(当面付), &amp;quot;cyfw&amp;quot;(存样服务), &amp;quot;sp&amp;quot;(代销订单标记), &amp;quot;wg&amp;quot;(微供订单), &amp;quot;factorysamp&amp;quot;(淘工厂打样订单), &amp;quot;factorybig&amp;quot;(淘工厂大货订单)</param>
        /// <param name="createEndTime">下单结束时间</param>
        /// <param name="createStartTime">下单开始时间</param>
        /// <param name="isHis">是否查询历史订单表,默认查询当前表，即默认值为false</param>
        /// <param name="modifyEndTime">查询修改时间结束</param>
        /// <param name="modifyStartTime">查询修改时间开始</param>
        /// <param name="orderStatus">订单状态，值有 success, cancel(交易取消，违约金等交割完毕), waitbuyerpay(等待卖家付款)， waitsellersend(等待卖家发货), waitbuyerreceive(等待买家收货 )</param>
        /// <param name="page">查询分页页码，从1开始</param>
        /// <param name="pageSize">查询的每页的数量</param>
        /// <param name="refundStatus">退款状态，支持： &amp;quot;waitselleragree&amp;quot;(等待卖家同意), &amp;quot;refundsuccess&amp;quot;(退款成功), &amp;quot;refundclose&amp;quot;(退款关闭), &amp;quot;waitbuyermodify&amp;quot;(待买家修改), &amp;quot;waitbuyersend&amp;quot;(等待买家退货), &amp;quot;waitsellerreceive&amp;quot;(等待卖家确认收货)</param>
        /// <param name="sellerMemberId">卖家memberId</param>
        /// <param name="sellerRateStatus">卖家评价状态 (4:已评价,5:未评价,6;不需要评价)</param>
        /// <param name="tradeType">交易类型:
        /// 担保交易(1),
        /// 预存款交易(2),
        /// ETC境外收单交易(3),
        /// 即时到帐交易(4),
        /// 保障金安全交易(5),
        /// 统一交易流程(6),
        /// 分阶段交易(7),
        /// 货到付款交易(8),
        /// 信用凭证支付交易(9),
        /// 账期支付交易(10),
        /// 1688交易4.0，新分阶段交易(50060),
        /// 当面付的交易流程(50070),
        /// 服务类的交易流程(50080)</param>
        /// <param name="productName">商品名称</param>
        /// <param name="needBuyerAddressAndPhone">是否需要查询买家的详细地址信息和电话</param>
        /// <param name="needMemoInfo">是否需要查询备注信息</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeGetBuyerOrderListResult> AlibabaTradeGetBuyerOrderListAsync(System.Collections.Generic.IEnumerable<string> bizTypes = null, System.DateTimeOffset? createEndTime = null, System.DateTimeOffset? createStartTime = null, bool? isHis = null, System.DateTimeOffset? modifyEndTime = null, System.DateTimeOffset? modifyStartTime = null, string orderStatus = null, int? page = null, int? pageSize = null, string refundStatus = null, string sellerMemberId = null, int? sellerRateStatus = null, string tradeType = null, string productName = null, bool? needBuyerAddressAndPhone = null, bool? needMemoInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.getBuyerOrderList/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (bizTypes != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(bizTypes, System.Globalization.CultureInfo.InvariantCulture)), "bizTypes");
                    }
                    if (createEndTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(createEndTime, System.Globalization.CultureInfo.InvariantCulture)), "createEndTime");
                    }
                    if (createStartTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(createStartTime, System.Globalization.CultureInfo.InvariantCulture)), "createStartTime");
                    }
                    if (isHis != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(isHis, System.Globalization.CultureInfo.InvariantCulture)), "isHis");
                    }
                    if (modifyEndTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(modifyEndTime, System.Globalization.CultureInfo.InvariantCulture)), "modifyEndTime");
                    }
                    if (modifyStartTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(modifyStartTime, System.Globalization.CultureInfo.InvariantCulture)), "modifyStartTime");
                    }
                    if (orderStatus != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderStatus, System.Globalization.CultureInfo.InvariantCulture)), "orderStatus");
                    }
                    if (page != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture)), "page");
                    }
                    if (pageSize != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    if (refundStatus != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(refundStatus, System.Globalization.CultureInfo.InvariantCulture)), "refundStatus");
                    }
                    if (sellerMemberId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(sellerMemberId, System.Globalization.CultureInfo.InvariantCulture)), "sellerMemberId");
                    }
                    if (sellerRateStatus != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(sellerRateStatus, System.Globalization.CultureInfo.InvariantCulture)), "sellerRateStatus");
                    }
                    if (tradeType != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(tradeType, System.Globalization.CultureInfo.InvariantCulture)), "tradeType");
                    }
                    if (productName != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productName, System.Globalization.CultureInfo.InvariantCulture)), "productName");
                    }
                    if (needBuyerAddressAndPhone != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(needBuyerAddressAndPhone, System.Globalization.CultureInfo.InvariantCulture)), "needBuyerAddressAndPhone");
                    }
                    if (needMemoInfo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(needMemoInfo, System.Globalization.CultureInfo.InvariantCulture)), "needMemoInfo");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeGetBuyerOrderListResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeGetBuyerOrderListResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>批量提交订单评价
        /// 此接口支持多笔订单（暂定最多10笔每次）同时提交评价，并且只支持卖家向买家的评价，目前当某笔订单存在多个商品时,只能为这笔订单的这些商品提交相同的评价内容。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:trade.order.batch.rate-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=trade.order.batch.rate&amp;v=1</summary>
        /// <param name="orders">订单评价：Map(String,TradeRateParam[]),前者为订单号，后者为评价内容与星级,结构请看数据结构订单评价参数。
        /// 评价星级(starLevel)必须是1-5, 当starLevel  4 时必须同时指定评价内容</param>
        /// <returns>提交评价失败的订单Map(Long,String),前者为失败的订单号，后者为失败的错误码：
        /// 1 返回为空时，创建全部成功
        /// 2 没指定订单号及评价内容时,接口直接返回成功结果
        /// 3 当订单已经评价过时，接口直接返回成功结果，不做任何处理
        /// 4 当指定的订单不是指定postMemberId用户的订单是，接口直接返回成功结果，不做任何处理
        /// 5 当指定的订单不处于待评价状态时，接口直接返回成功结果，不做任何处理返回 ErrorCode 的错误信息
        /// NULL_PARAM	- 指定的参数为空
        /// INVALID_PARAM	- 指定的参数有误
        /// INVOKE_DUBBO_ERROR	- 接口内部服务调用错误,请联系服务接口人
        /// UPDATE_DATABASE_FAILED	- 提交评价失败,数据库异常</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response5 TradeOrderBatchRate(System.Collections.Generic.IDictionary<string, string> orders)
        {
            return System.Threading.Tasks.Task.Run(async () => await TradeOrderBatchRateAsync(orders, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>批量提交订单评价
        /// 此接口支持多笔订单（暂定最多10笔每次）同时提交评价，并且只支持卖家向买家的评价，目前当某笔订单存在多个商品时,只能为这笔订单的这些商品提交相同的评价内容。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:trade.order.batch.rate-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=trade.order.batch.rate&amp;v=1</summary>
        /// <param name="orders">订单评价：Map(String,TradeRateParam[]),前者为订单号，后者为评价内容与星级,结构请看数据结构订单评价参数。
        /// 评价星级(starLevel)必须是1-5, 当starLevel  4 时必须同时指定评价内容</param>
        /// <returns>提交评价失败的订单Map(Long,String),前者为失败的订单号，后者为失败的错误码：
        /// 1 返回为空时，创建全部成功
        /// 2 没指定订单号及评价内容时,接口直接返回成功结果
        /// 3 当订单已经评价过时，接口直接返回成功结果，不做任何处理
        /// 4 当指定的订单不是指定postMemberId用户的订单是，接口直接返回成功结果，不做任何处理
        /// 5 当指定的订单不处于待评价状态时，接口直接返回成功结果，不做任何处理返回 ErrorCode 的错误信息
        /// NULL_PARAM	- 指定的参数为空
        /// INVALID_PARAM	- 指定的参数有误
        /// INVOKE_DUBBO_ERROR	- 接口内部服务调用错误,请联系服务接口人
        /// UPDATE_DATABASE_FAILED	- 提交评价失败,数据库异常</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response5> TradeOrderBatchRateAsync(System.Collections.Generic.IDictionary<string, string> orders, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/trade.order.batch.rate/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orders == null)
                        throw new System.ArgumentNullException("orders");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orders, System.Globalization.CultureInfo.InvariantCulture)), "orders");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response5);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>延迟订单确认时间(卖家操作)
        /// 延迟订单确认时间。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.order.PostponeConfirmTime-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.order.PostponeConfirmTime&amp;v=1</summary>
        /// <param name="orderId">订单ID</param>
        /// <param name="delayedDays">延迟时间（天）</param>
        /// <param name="subPayOrderId">子支付单号，如果传递，该值必须是真实的subPayOrderId</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400	- 不支持输入的延迟天数[2],当前支持的延迟天数为3,5,7,10,30(当前支持的延迟天数为3,5,7,10,30)
        /// 500_1	- 延迟交易确认(订单不是等待买家确认收货状态)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeOrderPostponeConfirmTimeResult AlibabaTradeOrderPostponeConfirmTime(long orderId, int delayedDays, long? subPayOrderId = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeOrderPostponeConfirmTimeAsync(orderId, delayedDays, subPayOrderId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>延迟订单确认时间(卖家操作)
        /// 延迟订单确认时间。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.order.PostponeConfirmTime-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.order.PostponeConfirmTime&amp;v=1</summary>
        /// <param name="orderId">订单ID</param>
        /// <param name="delayedDays">延迟时间（天）</param>
        /// <param name="subPayOrderId">子支付单号，如果传递，该值必须是真实的subPayOrderId</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400	- 不支持输入的延迟天数[2],当前支持的延迟天数为3,5,7,10,30(当前支持的延迟天数为3,5,7,10,30)
        /// 500_1	- 延迟交易确认(订单不是等待买家确认收货状态)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeOrderPostponeConfirmTimeResult> AlibabaTradeOrderPostponeConfirmTimeAsync(long orderId, int delayedDays, long? subPayOrderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.order.PostponeConfirmTime/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orderId == null)
                        throw new System.ArgumentNullException("orderId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)), "orderId");
                    }
                    if (delayedDays == null)
                        throw new System.ArgumentNullException("delayedDays");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(delayedDays, System.Globalization.CultureInfo.InvariantCulture)), "delayedDays");
                    }
                    if (subPayOrderId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(subPayOrderId, System.Globalization.CultureInfo.InvariantCulture)), "subPayOrderId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeOrderPostponeConfirmTimeResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeOrderPostponeConfirmTimeResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取交易地址代码表详情
        /// 获取交易地址代码表，该API会返回输入code的详情和该code的下一级地区code.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.addresscode.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.addresscode.get&amp;v=1</summary>
        /// <param name="areaCode">地址code码</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 404	- 无法找到相对应的地址信息。(请输入正确的areaCode)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeAddresscodeGetResult AlibabaTradeAddresscodeGet(string areaCode, string webSite)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeAddresscodeGetAsync(areaCode, webSite, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取交易地址代码表详情
        /// 获取交易地址代码表，该API会返回输入code的详情和该code的下一级地区code.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.addresscode.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.addresscode.get&amp;v=1</summary>
        /// <param name="areaCode">地址code码</param>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 404	- 无法找到相对应的地址信息。(请输入正确的areaCode)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeAddresscodeGetResult> AlibabaTradeAddresscodeGetAsync(string areaCode, string webSite, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.addresscode.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (areaCode == null)
                        throw new System.ArgumentNullException("areaCode");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(areaCode, System.Globalization.CultureInfo.InvariantCulture)), "areaCode");
                    }
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeAddresscodeGetResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeAddresscodeGetResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>根据理赔单或保险单号查询对应的订单号
        /// 根据理赔单或保险单号查询对应的订单号，查询理赔时type传lp，查询运费险时type传bx
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.queryOrderByInsure-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.queryOrderByInsure&amp;v=1</summary>
        /// <param name="tradeProtectParam">请求参数</param>
        /// <returns>返回结果返回 ErrorCode 的错误信息
        /// 400_1	- parameter invalid(检查参数)
        /// 400_2	- need authorization(授权登录)
        /// 400_3	- not support type(保单类型：查询理赔时type传lp，查询运费险时type传bx)
        /// 400_4	- protectId not exist(保单不存在)
        /// 400_5	- no permission(保单所属用户非当前授权用户)
        /// 400_6	- refundId not exist(保单对应的退款单不存在)
        /// 500_1	- invoke remote service error(调用底层服务异常，请ISV交流群里咨询技术支持或直接帮助中心提单)
        /// 500_2	- system error(调用底层服务异常，请ISV交流群里咨询技术支持或直接帮助中心提单)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaOceanOpenplatformBizTradeResultTradeProtectResult AlibabaTradeQueryOrderByInsure(AlibabaOceanOpenplatformBizTradeParamTradeProtectParam tradeProtectParam)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeQueryOrderByInsureAsync(tradeProtectParam, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据理赔单或保险单号查询对应的订单号
        /// 根据理赔单或保险单号查询对应的订单号，查询理赔时type传lp，查询运费险时type传bx
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.queryOrderByInsure-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.queryOrderByInsure&amp;v=1</summary>
        /// <param name="tradeProtectParam">请求参数</param>
        /// <returns>返回结果返回 ErrorCode 的错误信息
        /// 400_1	- parameter invalid(检查参数)
        /// 400_2	- need authorization(授权登录)
        /// 400_3	- not support type(保单类型：查询理赔时type传lp，查询运费险时type传bx)
        /// 400_4	- protectId not exist(保单不存在)
        /// 400_5	- no permission(保单所属用户非当前授权用户)
        /// 400_6	- refundId not exist(保单对应的退款单不存在)
        /// 500_1	- invoke remote service error(调用底层服务异常，请ISV交流群里咨询技术支持或直接帮助中心提单)
        /// 500_2	- system error(调用底层服务异常，请ISV交流群里咨询技术支持或直接帮助中心提单)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaOceanOpenplatformBizTradeResultTradeProtectResult> AlibabaTradeQueryOrderByInsureAsync(AlibabaOceanOpenplatformBizTradeParamTradeProtectParam tradeProtectParam, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.queryOrderByInsure/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (tradeProtectParam == null)
                        throw new System.ArgumentNullException("tradeProtectParam");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(tradeProtectParam, System.Globalization.CultureInfo.InvariantCulture)), "tradeProtectParam");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaOceanOpenplatformBizTradeResultTradeProtectResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaOceanOpenplatformBizTradeResultTradeProtectResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>买家获取保存的收货地址信息列表
        /// 买家获取保存的收货地址信息列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.receiveAddress.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.receiveAddress.get&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeReceiveAddressGetResult AlibabaTradeReceiveAddressGet()
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeReceiveAddressGetAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>买家获取保存的收货地址信息列表
        /// 买家获取保存的收货地址信息列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.receiveAddress.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.receiveAddress.get&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeReceiveAddressGetResult> AlibabaTradeReceiveAddressGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.receiveAddress.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeReceiveAddressGetResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeReceiveAddressGetResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>订单列表查看(卖家视角)
        /// 获取卖家订单列表，也就是用户的memberId必须等于订单的sellerMemberId。该接口仅仅返回订单基本信息，不会返回订单的物流信息和发票信息；如果需要获取物流信息，请调用获取订单详情接口；如果需要获取发票信息，请调用获取发票信息的API
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.getSellerOrderList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.getSellerOrderList&amp;v=1</summary>
        /// <param name="createStartTime">下单开始时间</param>
        /// <param name="createEndTime">下单结束时间</param>
        /// <param name="modifyStartTime">查询修改时间开始</param>
        /// <param name="modifyEndTime">查询修改时间结束</param>
        /// <param name="page">查询分页页码，从1开始</param>
        /// <param name="pageSize">查询的每页的数量(最高20)</param>
        /// <param name="orderStatus">订单状态，值有success,cancel(交易取消，违约金等交割完毕),waitbuyerpay(等待买家付款)，waitsellersend(等待卖家发货),waitbuyerreceive(等待买家收货)</param>
        /// <param name="refundStatus">退款状态，支持：
        /// &amp;quot;waitselleragree&amp;quot;(等待卖家同意),
        /// &amp;quot;refundsuccess&amp;quot;(退款成功),
        /// &amp;quot;refundclose&amp;quot;(退款关闭),
        /// &amp;quot;waitbuyermodify&amp;quot;(待买家修改),
        /// &amp;quot;waitbuyersend&amp;quot;(等待买家退货),
        /// &amp;quot;waitsellerreceive&amp;quot;(等待卖家确认收货)</param>
        /// <param name="buyerMemberId">买家memberId</param>
        /// <param name="tradeType">交易类型:
        /// 担保交易(1),
        /// 预存款交易(2),
        /// ETC境外收单交易(3),
        /// 即时到帐交易(4),
        /// 保障金安全交易(5),
        /// 统一交易流程(6),
        /// 分阶段交易(7),
        /// 货到付款交易(8),
        /// 信用凭证支付交易(9),
        /// 账期支付交易(10),
        /// 1688交易4.0，新分阶段交易(50060),
        /// 当面付的交易流程(50070),
        /// 服务类的交易流程(50080)</param>
        /// <param name="bizTypes">业务类型，支持： &amp;quot;cn&amp;quot;(普通订单类型), &amp;quot;ws&amp;quot;(大额批发订单类型), &amp;quot;yp&amp;quot;(普通拿样订单类型), &amp;quot;yf&amp;quot;(一分钱拿样订单类型), &amp;quot;fs&amp;quot;(倒批(限时折扣)订单类型), &amp;quot;cz&amp;quot;(加工定制订单类型), &amp;quot;ag&amp;quot;(协议采购订单类型), &amp;quot;hp&amp;quot;(伙拼订单类型), &amp;quot;gc&amp;quot;(国采订单类型), &amp;quot;supply&amp;quot;(供销订单类型), &amp;quot;nyg&amp;quot;(nyg订单类型), &amp;quot;factory&amp;quot;(淘工厂订单类型), &amp;quot;quick&amp;quot;(快订下单), &amp;quot;xiangpin&amp;quot;(享拼订单), &amp;quot;nest&amp;quot;(采购商城-鸟巢), &amp;quot;f2f&amp;quot;(当面付), &amp;quot;cyfw&amp;quot;(存样服务), &amp;quot;sp&amp;quot;(代销订单标记), &amp;quot;wg&amp;quot;(微供订单), &amp;quot;factorysamp&amp;quot;(淘工厂打样订单), &amp;quot;factorybig&amp;quot;(淘工厂大货订单)</param>
        /// <param name="isHis">是否查询历史订单表,默认查询当前表</param>
        /// <param name="productName">商品名称</param>
        /// <param name="needBuyerAddressAndPhone">是否需要查询买家的详细地址信息和电话</param>
        /// <param name="needMemoInfo">是否需要查询备注信息</param>
        /// <param name="tousuStatus">是否查找投诉中的地拟改单</param>
        /// <param name="buyerRateStatus">买家评价状态 (4:已评价,5:未评价,6;不需要评价)</param>
        /// <param name="sellerRateStatus">卖家评价状态 (4:已评价,5:未评价,6;不需要评价)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeGetSellerOrderListResult AlibabaTradeGetSellerOrderList(System.DateTimeOffset? createStartTime = null, System.DateTimeOffset? createEndTime = null, System.DateTimeOffset? modifyStartTime = null, System.DateTimeOffset? modifyEndTime = null, int? page = null, int? pageSize = null, string orderStatus = null, string refundStatus = null, string buyerMemberId = null, string tradeType = null, System.Collections.Generic.IEnumerable<string> bizTypes = null, bool? isHis = null, string productName = null, bool? needBuyerAddressAndPhone = null, bool? needMemoInfo = null, bool? tousuStatus = null, int? buyerRateStatus = null, int? sellerRateStatus = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeGetSellerOrderListAsync(createStartTime, createEndTime, modifyStartTime, modifyEndTime, page, pageSize, orderStatus, refundStatus, buyerMemberId, tradeType, bizTypes, isHis, productName, needBuyerAddressAndPhone, needMemoInfo, tousuStatus, buyerRateStatus, sellerRateStatus, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>订单列表查看(卖家视角)
        /// 获取卖家订单列表，也就是用户的memberId必须等于订单的sellerMemberId。该接口仅仅返回订单基本信息，不会返回订单的物流信息和发票信息；如果需要获取物流信息，请调用获取订单详情接口；如果需要获取发票信息，请调用获取发票信息的API
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.getSellerOrderList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.getSellerOrderList&amp;v=1</summary>
        /// <param name="createStartTime">下单开始时间</param>
        /// <param name="createEndTime">下单结束时间</param>
        /// <param name="modifyStartTime">查询修改时间开始</param>
        /// <param name="modifyEndTime">查询修改时间结束</param>
        /// <param name="page">查询分页页码，从1开始</param>
        /// <param name="pageSize">查询的每页的数量(最高20)</param>
        /// <param name="orderStatus">订单状态，值有success,cancel(交易取消，违约金等交割完毕),waitbuyerpay(等待买家付款)，waitsellersend(等待卖家发货),waitbuyerreceive(等待买家收货)</param>
        /// <param name="refundStatus">退款状态，支持：
        /// &amp;quot;waitselleragree&amp;quot;(等待卖家同意),
        /// &amp;quot;refundsuccess&amp;quot;(退款成功),
        /// &amp;quot;refundclose&amp;quot;(退款关闭),
        /// &amp;quot;waitbuyermodify&amp;quot;(待买家修改),
        /// &amp;quot;waitbuyersend&amp;quot;(等待买家退货),
        /// &amp;quot;waitsellerreceive&amp;quot;(等待卖家确认收货)</param>
        /// <param name="buyerMemberId">买家memberId</param>
        /// <param name="tradeType">交易类型:
        /// 担保交易(1),
        /// 预存款交易(2),
        /// ETC境外收单交易(3),
        /// 即时到帐交易(4),
        /// 保障金安全交易(5),
        /// 统一交易流程(6),
        /// 分阶段交易(7),
        /// 货到付款交易(8),
        /// 信用凭证支付交易(9),
        /// 账期支付交易(10),
        /// 1688交易4.0，新分阶段交易(50060),
        /// 当面付的交易流程(50070),
        /// 服务类的交易流程(50080)</param>
        /// <param name="bizTypes">业务类型，支持： &amp;quot;cn&amp;quot;(普通订单类型), &amp;quot;ws&amp;quot;(大额批发订单类型), &amp;quot;yp&amp;quot;(普通拿样订单类型), &amp;quot;yf&amp;quot;(一分钱拿样订单类型), &amp;quot;fs&amp;quot;(倒批(限时折扣)订单类型), &amp;quot;cz&amp;quot;(加工定制订单类型), &amp;quot;ag&amp;quot;(协议采购订单类型), &amp;quot;hp&amp;quot;(伙拼订单类型), &amp;quot;gc&amp;quot;(国采订单类型), &amp;quot;supply&amp;quot;(供销订单类型), &amp;quot;nyg&amp;quot;(nyg订单类型), &amp;quot;factory&amp;quot;(淘工厂订单类型), &amp;quot;quick&amp;quot;(快订下单), &amp;quot;xiangpin&amp;quot;(享拼订单), &amp;quot;nest&amp;quot;(采购商城-鸟巢), &amp;quot;f2f&amp;quot;(当面付), &amp;quot;cyfw&amp;quot;(存样服务), &amp;quot;sp&amp;quot;(代销订单标记), &amp;quot;wg&amp;quot;(微供订单), &amp;quot;factorysamp&amp;quot;(淘工厂打样订单), &amp;quot;factorybig&amp;quot;(淘工厂大货订单)</param>
        /// <param name="isHis">是否查询历史订单表,默认查询当前表</param>
        /// <param name="productName">商品名称</param>
        /// <param name="needBuyerAddressAndPhone">是否需要查询买家的详细地址信息和电话</param>
        /// <param name="needMemoInfo">是否需要查询备注信息</param>
        /// <param name="tousuStatus">是否查找投诉中的地拟改单</param>
        /// <param name="buyerRateStatus">买家评价状态 (4:已评价,5:未评价,6;不需要评价)</param>
        /// <param name="sellerRateStatus">卖家评价状态 (4:已评价,5:未评价,6;不需要评价)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeGetSellerOrderListResult> AlibabaTradeGetSellerOrderListAsync(System.DateTimeOffset? createStartTime = null, System.DateTimeOffset? createEndTime = null, System.DateTimeOffset? modifyStartTime = null, System.DateTimeOffset? modifyEndTime = null, int? page = null, int? pageSize = null, string orderStatus = null, string refundStatus = null, string buyerMemberId = null, string tradeType = null, System.Collections.Generic.IEnumerable<string> bizTypes = null, bool? isHis = null, string productName = null, bool? needBuyerAddressAndPhone = null, bool? needMemoInfo = null, bool? tousuStatus = null, int? buyerRateStatus = null, int? sellerRateStatus = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.getSellerOrderList/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (createStartTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(createStartTime, System.Globalization.CultureInfo.InvariantCulture)), "createStartTime");
                    }
                    if (createEndTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(createEndTime, System.Globalization.CultureInfo.InvariantCulture)), "createEndTime");
                    }
                    if (modifyStartTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(modifyStartTime, System.Globalization.CultureInfo.InvariantCulture)), "modifyStartTime");
                    }
                    if (modifyEndTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(modifyEndTime, System.Globalization.CultureInfo.InvariantCulture)), "modifyEndTime");
                    }
                    if (page != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture)), "page");
                    }
                    if (pageSize != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    if (orderStatus != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderStatus, System.Globalization.CultureInfo.InvariantCulture)), "orderStatus");
                    }
                    if (refundStatus != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(refundStatus, System.Globalization.CultureInfo.InvariantCulture)), "refundStatus");
                    }
                    if (buyerMemberId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(buyerMemberId, System.Globalization.CultureInfo.InvariantCulture)), "buyerMemberId");
                    }
                    if (tradeType != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(tradeType, System.Globalization.CultureInfo.InvariantCulture)), "tradeType");
                    }
                    if (bizTypes != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(bizTypes, System.Globalization.CultureInfo.InvariantCulture)), "bizTypes");
                    }
                    if (isHis != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(isHis, System.Globalization.CultureInfo.InvariantCulture)), "isHis");
                    }
                    if (productName != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productName, System.Globalization.CultureInfo.InvariantCulture)), "productName");
                    }
                    if (needBuyerAddressAndPhone != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(needBuyerAddressAndPhone, System.Globalization.CultureInfo.InvariantCulture)), "needBuyerAddressAndPhone");
                    }
                    if (needMemoInfo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(needMemoInfo, System.Globalization.CultureInfo.InvariantCulture)), "needMemoInfo");
                    }
                    if (tousuStatus != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(tousuStatus, System.Globalization.CultureInfo.InvariantCulture)), "tousuStatus");
                    }
                    if (buyerRateStatus != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(buyerRateStatus, System.Globalization.CultureInfo.InvariantCulture)), "buyerRateStatus");
                    }
                    if (sellerRateStatus != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(sellerRateStatus, System.Globalization.CultureInfo.InvariantCulture)), "sellerRateStatus");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeGetSellerOrderListResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeGetSellerOrderListResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取订单的发票信息
        /// 获取订单的发票信息, 该接口需要特定的合作伙伴才能申请使用
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.invoice.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.invoice.get&amp;v=1</summary>
        /// <param name="orderId">发票所关联的订单ID</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_1	- 获取订单时出错(订单号输入有误)
        /// 404_1	- 该订单没有发票信息(该订单没有发票信息)
        /// PEMISSION_ERROR	- 你没有权限访问该发票信息(不是授权用户的订单)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaInvoiceGetResult AlibabaInvoiceGet(long orderId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaInvoiceGetAsync(orderId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取订单的发票信息
        /// 获取订单的发票信息, 该接口需要特定的合作伙伴才能申请使用
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.invoice.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.invoice.get&amp;v=1</summary>
        /// <param name="orderId">发票所关联的订单ID</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_1	- 获取订单时出错(订单号输入有误)
        /// 404_1	- 该订单没有发票信息(该订单没有发票信息)
        /// PEMISSION_ERROR	- 你没有权限访问该发票信息(不是授权用户的订单)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaInvoiceGetResult> AlibabaInvoiceGetAsync(long orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.invoice.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orderId == null)
                        throw new System.ArgumentNullException("orderId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)), "orderId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaInvoiceGetResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaInvoiceGetResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>取消交易
        /// 买家或者卖家取消交易，注意只有特定状态的交易才能取消，1688可用于取消未付款的订单。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.cancel-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.cancel&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="tradeID">交易id，订单号</param>
        /// <param name="cancelReason">原因描述；buyerCancel:买家取消订单;sellerGoodsLack:卖家库存不足;other:其它</param>
        /// <param name="remark">备注</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// ORDER_STATUS_ERROR	- 订单状态错误(只能取消待支付的订单，需要先确认订单状态)
        /// 400_3	- 没有权限取消该订单(只有订单的买卖双方才能取消订单，确认授权用户是否该订单的买卖双方)
        /// ORDER_NOT_EXIST	- 订单不存在(确认订单号是否正确)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeCancelResult AlibabaTradeCancel(string webSite, long tradeID, string cancelReason, string remark = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeCancelAsync(webSite, tradeID, cancelReason, remark, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>取消交易
        /// 买家或者卖家取消交易，注意只有特定状态的交易才能取消，1688可用于取消未付款的订单。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.cancel-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.cancel&amp;v=1</summary>
        /// <param name="webSite">站点信息，指定调用的API是属于国际站（alibaba）还是1688网站（1688）</param>
        /// <param name="tradeID">交易id，订单号</param>
        /// <param name="cancelReason">原因描述；buyerCancel:买家取消订单;sellerGoodsLack:卖家库存不足;other:其它</param>
        /// <param name="remark">备注</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// ORDER_STATUS_ERROR	- 订单状态错误(只能取消待支付的订单，需要先确认订单状态)
        /// 400_3	- 没有权限取消该订单(只有订单的买卖双方才能取消订单，确认授权用户是否该订单的买卖双方)
        /// ORDER_NOT_EXIST	- 订单不存在(确认订单号是否正确)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeCancelResult> AlibabaTradeCancelAsync(string webSite, long tradeID, string cancelReason, string remark = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.cancel/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    if (tradeID == null)
                        throw new System.ArgumentNullException("tradeID");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(tradeID, System.Globalization.CultureInfo.InvariantCulture)), "tradeID");
                    }
                    if (cancelReason == null)
                        throw new System.ArgumentNullException("cancelReason");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(cancelReason, System.Globalization.CultureInfo.InvariantCulture)), "cancelReason");
                    }
                    if (remark != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(remark, System.Globalization.CultureInfo.InvariantCulture)), "remark");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeCancelResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeCancelResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取交易地址的下一级信息
        /// 获取交易地址的下一级信息，如果code不输入，返回最上层的地址列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.addresscode.getchild-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.addresscode.getchild&amp;v=1</summary>
        /// <param name="webSite">站点信息,1688或者alibaba</param>
        /// <param name="areaCode">地址码，如果不输入则获取最上层信息</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeAddresscodeGetchildResult AlibabaTradeAddresscodeGetchild(string webSite, string areaCode = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeAddresscodeGetchildAsync(webSite, areaCode, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取交易地址的下一级信息
        /// 获取交易地址的下一级信息，如果code不输入，返回最上层的地址列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.addresscode.getchild-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.addresscode.getchild&amp;v=1</summary>
        /// <param name="webSite">站点信息,1688或者alibaba</param>
        /// <param name="areaCode">地址码，如果不输入则获取最上层信息</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeAddresscodeGetchildResult> AlibabaTradeAddresscodeGetchildAsync(string webSite, string areaCode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.addresscode.getchild/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (webSite == null)
                        throw new System.ArgumentNullException("webSite");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webSite, System.Globalization.CultureInfo.InvariantCulture)), "webSite");
                    }
                    if (areaCode != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(areaCode, System.Globalization.CultureInfo.InvariantCulture)), "areaCode");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeAddresscodeGetchildResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeAddresscodeGetchildResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【最新】快速创建1688订单（推荐使用）
        /// 快速创建1688大市场订单和1688代销订单，订单一步创建，不需要先调用订单预览，接口参数简单，地址参数传省市区街道的文本名，不需要额外查询地址码，系统默认选择最优惠下单方式，默认支付宝担保交易方式，详细地址必须不超过200个字，不要用地址做其他用途，需要留言或备注的有专门字段，留言和备注都支持500字
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.fastCreateOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.fastCreateOrder&amp;v=1</summary>
        /// <param name="flow">流程</param>
        /// <param name="addressParam">收货地址信息</param>
        /// <param name="cargoParamList">商品信息</param>
        /// <param name="subUserId">子账号ID</param>
        /// <param name="message">买家留言</param>
        /// <param name="invoiceParam">发票信息</param>
        /// <param name="shopPromotionId">店铺优惠ID，通过“创建订单前预览数据接口”获得。为空默认使用默认优惠</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400	- 请求参数错误(检查请求参数是否满足要求)
        /// 400	- User authorization is required	(TOKEN失效，需要重新获取)
        /// 400	- Address is required	(收货地址必须要填)
        /// 400	- Cargo list is required	(货品信息必须要填)
        /// 400	- max cargo count is	(超过最大购买数)
        /// 400	- OfferId and quantity is required	(商品ID和购买数量必须要填)
        /// 400	- AddressId or FullName and Address is required	(收货地址信息要填完整)
        /// 400	- FullName length is required in 2~25	(收货人信息长度范围为2-25)
        /// 400		- phone length is required 1~30	(电话号码长度范围为1-30)
        /// 400		- Flow is empty or not exist	(flow参数必填，若接口没有要求传flow则可以忽略)
        /// 400		- Cargo list not duplicate is required(货品信息出现了重复的情况，需要累加处理)
        /// 400		- not support tradeType:	(不支持的交易方式)
        /// 400	- availableQuota less than sumPayment	(可用额度不足，需要先联系卖家提升账期可用额度)
        /// 500		- view order service error(接口调用出错，请检查参数是否正确或稍后重试)
        /// FAIL_BIZ_FAIL_BIZ_UNSUPPORT_MIX		- 该卖家不支持混批,所有货品数量应该达到最小起批量。请重新选择货品或修改购买数量后进行下单。	
        /// FAIL_BIZ_FAIL_BIZ_BOOKED_BEYOND_THE_MAX_QUANTITY		- 该订单中部分货品的订购数量超过了最大允许的购买量。
        /// FAIL_BIZ_FAIL_BIZ_BOOKED_LESS_THAN_LEAST_QUANTITY		- 该订单中部分货品的订购数量小于最小起批量。	
        /// FAIL_BIZ_FAIL_BIZ_ILLEGAL_OFFER		- 该订单中部分货品不支持交易，请联系卖家。
        /// FAIL_BIZ_FAIL_BIZ_LESS_THAN_MIX_BEGIN	- 该订单中部分货品数量小于混批起批量，请重新选择货品进行下单。
        /// FAIL_BIZ_FAIL_BIZ_ILLEGAL_CARGO_DATA	- 货品信息错误或者货品已失效，请重试
        /// FAIL_BIZ_QUANTITY_UNMATCH_SELLUNIT_SCALE	- 您该笔订单的货品数量不符合订购要求，请查看卖家设置并修改。
        /// FAIL_BIZ_ORDER_VIEW_RESULT_NOT_GET		- 订单展示服务没有返回处理结果。
        /// FAIL_BIZ_PRODUCT_TRADE_STAT_ERROR		- 库存不足或扣减库存时出现了问题。请确认购买数量后重新提交订单。	
        /// FAIL_BIZ_FAIL_BIZ_PROXY_RELATED_NOT_FUND	- 卖家未授权代销，您不能在此通道下单!请联系卖家授权!	
        /// FAIL_BIZ_FAIL_BIZ_QUANTITY_OUT_OF_SCOPE	- 订购数量必须大于0小于等于10亿。	
        /// FAIL_BIZ_MESSAGE_LENGTH_IS_ILLEGA	- 您的留言过长，留言长度须小于500个字符，请更改留言!
        /// FAIL_BIZ_FAIL_BIZ_CARGO_CANNOT_AUTH		- 您无权购买该订单中部分私密货品，请联系卖家。
        /// FAIL_BIZ_FAIL_BIZ_ILLEGAL_SELLER_NOT_ENABLED	- 卖家处于无效状态!不允许进行交易!
        /// FAIL_BIZ_CARGO_CARRIAGE_HAS_CHANGED		- 该货品运费已变化，请重新确认订单或者联系卖家。
        /// FAIL_BIZ_RECEIVE_ADDRESS_MOBILE_PHONE_NULL	- 收货地址里的电话和手机不能同时为空。
        /// FAIL_BIZ_XXX_ALL_ORDER_BLOCKS_SOME_COMMIT_ERROR		- 部分订单提交逻辑处理失败。
        /// FAIL_BIZ_SYSTEM_ERROR		- 系统繁忙,请重试!
        /// FAIL_BIZ_FAIL_BIZ_CARGO_CARRIAGE_HAS_ERROR		- 获取该货品运费发生错误，请重试。
        /// FAIL_BIZ_FAIL_BIZ_OFFER_PREHEATING		- 该订单中存在商品未到指定开售时间。
        /// FAIL_BIZ_TRADE_TYPE_HAS_CHANGED_RE_SELECT		- 交易方式发生变化请重新选择。
        /// FAIL_BIZ_NO_SERVICE_INFO		- 未获取到服务信息，服务数据可能发生变化!	
        /// FAIL_BIZ_TAOBAO_TP_EXCEPTION		- 系统错误，订单创建失败!	
        /// FAIL_BIZ_ORDER_COMMIT_ORDERPARAM_NOT_CONSTRUCTED	- 交时没有成功构造创建订单的参数。</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeFastCreateOrderResult AlibabaTradeFastCreateOrder(string flow, AlibabaTradeFastAddress addressParam, System.Collections.Generic.IEnumerable<AlibabaTradeFastCargo> cargoParamList, long? subUserId = null, string message = null, AlibabaTradeFastInvoice invoiceParam = null, string shopPromotionId = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeFastCreateOrderAsync(flow, addressParam, cargoParamList, subUserId, message, invoiceParam, shopPromotionId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【最新】快速创建1688订单（推荐使用）
        /// 快速创建1688大市场订单和1688代销订单，订单一步创建，不需要先调用订单预览，接口参数简单，地址参数传省市区街道的文本名，不需要额外查询地址码，系统默认选择最优惠下单方式，默认支付宝担保交易方式，详细地址必须不超过200个字，不要用地址做其他用途，需要留言或备注的有专门字段，留言和备注都支持500字
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.fastCreateOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.fastCreateOrder&amp;v=1</summary>
        /// <param name="flow">流程</param>
        /// <param name="addressParam">收货地址信息</param>
        /// <param name="cargoParamList">商品信息</param>
        /// <param name="subUserId">子账号ID</param>
        /// <param name="message">买家留言</param>
        /// <param name="invoiceParam">发票信息</param>
        /// <param name="shopPromotionId">店铺优惠ID，通过“创建订单前预览数据接口”获得。为空默认使用默认优惠</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400	- 请求参数错误(检查请求参数是否满足要求)
        /// 400	- User authorization is required	(TOKEN失效，需要重新获取)
        /// 400	- Address is required	(收货地址必须要填)
        /// 400	- Cargo list is required	(货品信息必须要填)
        /// 400	- max cargo count is	(超过最大购买数)
        /// 400	- OfferId and quantity is required	(商品ID和购买数量必须要填)
        /// 400	- AddressId or FullName and Address is required	(收货地址信息要填完整)
        /// 400	- FullName length is required in 2~25	(收货人信息长度范围为2-25)
        /// 400		- phone length is required 1~30	(电话号码长度范围为1-30)
        /// 400		- Flow is empty or not exist	(flow参数必填，若接口没有要求传flow则可以忽略)
        /// 400		- Cargo list not duplicate is required(货品信息出现了重复的情况，需要累加处理)
        /// 400		- not support tradeType:	(不支持的交易方式)
        /// 400	- availableQuota less than sumPayment	(可用额度不足，需要先联系卖家提升账期可用额度)
        /// 500		- view order service error(接口调用出错，请检查参数是否正确或稍后重试)
        /// FAIL_BIZ_FAIL_BIZ_UNSUPPORT_MIX		- 该卖家不支持混批,所有货品数量应该达到最小起批量。请重新选择货品或修改购买数量后进行下单。	
        /// FAIL_BIZ_FAIL_BIZ_BOOKED_BEYOND_THE_MAX_QUANTITY		- 该订单中部分货品的订购数量超过了最大允许的购买量。
        /// FAIL_BIZ_FAIL_BIZ_BOOKED_LESS_THAN_LEAST_QUANTITY		- 该订单中部分货品的订购数量小于最小起批量。	
        /// FAIL_BIZ_FAIL_BIZ_ILLEGAL_OFFER		- 该订单中部分货品不支持交易，请联系卖家。
        /// FAIL_BIZ_FAIL_BIZ_LESS_THAN_MIX_BEGIN	- 该订单中部分货品数量小于混批起批量，请重新选择货品进行下单。
        /// FAIL_BIZ_FAIL_BIZ_ILLEGAL_CARGO_DATA	- 货品信息错误或者货品已失效，请重试
        /// FAIL_BIZ_QUANTITY_UNMATCH_SELLUNIT_SCALE	- 您该笔订单的货品数量不符合订购要求，请查看卖家设置并修改。
        /// FAIL_BIZ_ORDER_VIEW_RESULT_NOT_GET		- 订单展示服务没有返回处理结果。
        /// FAIL_BIZ_PRODUCT_TRADE_STAT_ERROR		- 库存不足或扣减库存时出现了问题。请确认购买数量后重新提交订单。	
        /// FAIL_BIZ_FAIL_BIZ_PROXY_RELATED_NOT_FUND	- 卖家未授权代销，您不能在此通道下单!请联系卖家授权!	
        /// FAIL_BIZ_FAIL_BIZ_QUANTITY_OUT_OF_SCOPE	- 订购数量必须大于0小于等于10亿。	
        /// FAIL_BIZ_MESSAGE_LENGTH_IS_ILLEGA	- 您的留言过长，留言长度须小于500个字符，请更改留言!
        /// FAIL_BIZ_FAIL_BIZ_CARGO_CANNOT_AUTH		- 您无权购买该订单中部分私密货品，请联系卖家。
        /// FAIL_BIZ_FAIL_BIZ_ILLEGAL_SELLER_NOT_ENABLED	- 卖家处于无效状态!不允许进行交易!
        /// FAIL_BIZ_CARGO_CARRIAGE_HAS_CHANGED		- 该货品运费已变化，请重新确认订单或者联系卖家。
        /// FAIL_BIZ_RECEIVE_ADDRESS_MOBILE_PHONE_NULL	- 收货地址里的电话和手机不能同时为空。
        /// FAIL_BIZ_XXX_ALL_ORDER_BLOCKS_SOME_COMMIT_ERROR		- 部分订单提交逻辑处理失败。
        /// FAIL_BIZ_SYSTEM_ERROR		- 系统繁忙,请重试!
        /// FAIL_BIZ_FAIL_BIZ_CARGO_CARRIAGE_HAS_ERROR		- 获取该货品运费发生错误，请重试。
        /// FAIL_BIZ_FAIL_BIZ_OFFER_PREHEATING		- 该订单中存在商品未到指定开售时间。
        /// FAIL_BIZ_TRADE_TYPE_HAS_CHANGED_RE_SELECT		- 交易方式发生变化请重新选择。
        /// FAIL_BIZ_NO_SERVICE_INFO		- 未获取到服务信息，服务数据可能发生变化!	
        /// FAIL_BIZ_TAOBAO_TP_EXCEPTION		- 系统错误，订单创建失败!	
        /// FAIL_BIZ_ORDER_COMMIT_ORDERPARAM_NOT_CONSTRUCTED	- 交时没有成功构造创建订单的参数。</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeFastCreateOrderResult> AlibabaTradeFastCreateOrderAsync(string flow, AlibabaTradeFastAddress addressParam, System.Collections.Generic.IEnumerable<AlibabaTradeFastCargo> cargoParamList, long? subUserId = null, string message = null, AlibabaTradeFastInvoice invoiceParam = null, string shopPromotionId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.fastCreateOrder/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (flow == null)
                        throw new System.ArgumentNullException("flow");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(flow, System.Globalization.CultureInfo.InvariantCulture)), "flow");
                    }
                    if (addressParam == null)
                        throw new System.ArgumentNullException("addressParam");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(addressParam, System.Globalization.CultureInfo.InvariantCulture)), "addressParam");
                    }
                    if (cargoParamList == null)
                        throw new System.ArgumentNullException("cargoParamList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(cargoParamList, System.Globalization.CultureInfo.InvariantCulture)), "cargoParamList");
                    }
                    if (subUserId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(subUserId, System.Globalization.CultureInfo.InvariantCulture)), "subUserId");
                    }
                    if (message != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture)), "message");
                    }
                    if (invoiceParam != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(invoiceParam, System.Globalization.CultureInfo.InvariantCulture)), "invoiceParam");
                    }
                    if (shopPromotionId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(shopPromotionId, System.Globalization.CultureInfo.InvariantCulture)), "shopPromotionId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeFastCreateOrderResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeFastCreateOrderResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>修改订单备忘
        /// 授权用户为卖家修改卖家备忘，授权用户为买家修改买家备忘
        /// 注意：该接口可重复调用，备注内容将覆盖前一次调用
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.order.memoAdd-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.order.memoAdd&amp;v=1</summary>
        /// <param name="orderId">订单ID</param>
        /// <param name="memo">备忘信息</param>
        /// <param name="remarkIcon">备忘图标，目前仅支持数字。1位红色图标，2为蓝色图标，3为绿色图标，4为黄色图标</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaOrderMemoAddResult AlibabaOrderMemoAdd(long orderId, string memo, string remarkIcon)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaOrderMemoAddAsync(orderId, memo, remarkIcon, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>修改订单备忘
        /// 授权用户为卖家修改卖家备忘，授权用户为买家修改买家备忘
        /// 注意：该接口可重复调用，备注内容将覆盖前一次调用
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.order.memoAdd-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.order.memoAdd&amp;v=1</summary>
        /// <param name="orderId">订单ID</param>
        /// <param name="memo">备忘信息</param>
        /// <param name="remarkIcon">备忘图标，目前仅支持数字。1位红色图标，2为蓝色图标，3为绿色图标，4为黄色图标</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaOrderMemoAddResult> AlibabaOrderMemoAddAsync(long orderId, string memo, string remarkIcon, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.order.memoAdd/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orderId == null)
                        throw new System.ArgumentNullException("orderId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)), "orderId");
                    }
                    if (memo == null)
                        throw new System.ArgumentNullException("memo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(memo, System.Globalization.CultureInfo.InvariantCulture)), "memo");
                    }
                    if (remarkIcon == null)
                        throw new System.ArgumentNullException("remarkIcon");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(remarkIcon, System.Globalization.CultureInfo.InvariantCulture)), "remarkIcon");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaOrderMemoAddResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaOrderMemoAddResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>根据地址解析地区码
        /// 根据地址信息，解析地区码
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.addresscode.parse-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.addresscode.parse&amp;v=1</summary>
        /// <param name="addressInfo">地址信息</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeAddresscodeParseResult AlibabaTradeAddresscodeParse(string addressInfo)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeAddresscodeParseAsync(addressInfo, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据地址解析地区码
        /// 根据地址信息，解析地区码
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.addresscode.parse-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.addresscode.parse&amp;v=1</summary>
        /// <param name="addressInfo">地址信息</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeAddresscodeParseResult> AlibabaTradeAddresscodeParseAsync(string addressInfo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.addresscode.parse/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (addressInfo == null)
                        throw new System.ArgumentNullException("addressInfo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(addressInfo, System.Globalization.CultureInfo.InvariantCulture)), "addressInfo");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeAddresscodeParseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeAddresscodeParseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>修改订单价格
        /// 修改订单价格，注意：订单价格修改逻辑同1688后台页面，是在订单原价的基础之上计算总价，不是在原先的折扣后的总价基础之上再增加或减少价格，对于订单已经存在在折扣是覆盖的。
        /// entryDiscounts不需要已经关闭的子订单信息。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:trade.order.modifyOrderPrice-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=trade.order.modifyOrderPrice&amp;v=1</summary>
        /// <param name="orderId">订单id</param>
        /// <param name="carriage">订单修改之后的运费，单位为分</param>
        /// <param name="entryDiscounts">改价明细,discount值的单位为分，正数为涨价，负数为减价</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// FAIL_BIZ_TRADING_INVALID_PARAM	- 参数错误(参考参数说明)
        /// FAIL_BIZ_TRADING_ORDER_NOT_EXIST	- 订单不存在(检查订单号有效性)
        /// FAIL_BIZ_TRADING_ORDER_STATUS_ERROR	- 订单状态不正确（就是该状态不能修改价格）(检查下订单状态，只有等待买家付款状态的订单才能修改订单价格)
        /// FAIL_BIZ_TRADING_MODIFY_PRICE_ERROR	- 修改价格失败（例如不能涨价，只能降价）(确定订单改价限制，只能修改订单类型为6、8、9、10的订单，既tradeTypeStr=6、8、9、10)
        /// FAIL_BIZ_TRADING_SYSTEM_ERROR	- 系统错误（系统繁忙）(稍后重试或联系开放平台管理人)
        /// FAIL_BIZ_TRADING_ORDER_ENTRY_STATUS_ERROR	- 子订单状态已改变，请返回重试(entryDiscounts中传递了已经删除的子订单信息，只需要传递未关闭的子订单即可)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public TradeOrderModifyOrderPriceResult TradeOrderModifyOrderPrice(long orderId, long carriage, string entryDiscounts)
        {
            return System.Threading.Tasks.Task.Run(async () => await TradeOrderModifyOrderPriceAsync(orderId, carriage, entryDiscounts, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>修改订单价格
        /// 修改订单价格，注意：订单价格修改逻辑同1688后台页面，是在订单原价的基础之上计算总价，不是在原先的折扣后的总价基础之上再增加或减少价格，对于订单已经存在在折扣是覆盖的。
        /// entryDiscounts不需要已经关闭的子订单信息。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:trade.order.modifyOrderPrice-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=trade.order.modifyOrderPrice&amp;v=1</summary>
        /// <param name="orderId">订单id</param>
        /// <param name="carriage">订单修改之后的运费，单位为分</param>
        /// <param name="entryDiscounts">改价明细,discount值的单位为分，正数为涨价，负数为减价</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// FAIL_BIZ_TRADING_INVALID_PARAM	- 参数错误(参考参数说明)
        /// FAIL_BIZ_TRADING_ORDER_NOT_EXIST	- 订单不存在(检查订单号有效性)
        /// FAIL_BIZ_TRADING_ORDER_STATUS_ERROR	- 订单状态不正确（就是该状态不能修改价格）(检查下订单状态，只有等待买家付款状态的订单才能修改订单价格)
        /// FAIL_BIZ_TRADING_MODIFY_PRICE_ERROR	- 修改价格失败（例如不能涨价，只能降价）(确定订单改价限制，只能修改订单类型为6、8、9、10的订单，既tradeTypeStr=6、8、9、10)
        /// FAIL_BIZ_TRADING_SYSTEM_ERROR	- 系统错误（系统繁忙）(稍后重试或联系开放平台管理人)
        /// FAIL_BIZ_TRADING_ORDER_ENTRY_STATUS_ERROR	- 子订单状态已改变，请返回重试(entryDiscounts中传递了已经删除的子订单信息，只需要传递未关闭的子订单即可)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TradeOrderModifyOrderPriceResult> TradeOrderModifyOrderPriceAsync(long orderId, long carriage, string entryDiscounts, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/trade.order.modifyOrderPrice/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orderId == null)
                        throw new System.ArgumentNullException("orderId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)), "orderId");
                    }
                    if (carriage == null)
                        throw new System.ArgumentNullException("carriage");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(carriage, System.Globalization.CultureInfo.InvariantCulture)), "carriage");
                    }
                    if (entryDiscounts == null)
                        throw new System.ArgumentNullException("entryDiscounts");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(entryDiscounts, System.Globalization.CultureInfo.InvariantCulture)), "entryDiscounts");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TradeOrderModifyOrderPriceResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(TradeOrderModifyOrderPriceResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取授权用户的基本信息
        /// 获取授权用户的基本信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.account:alibaba.account.basic-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.account&amp;n=alibaba.account.basic&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaAccountBasicResult AlibabaAccountBasic()
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaAccountBasicAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取授权用户的基本信息
        /// 获取授权用户的基本信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.account:alibaba.account.basic-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.account&amp;n=alibaba.account.basic&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaAccountBasicResult> AlibabaAccountBasicAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.account/alibaba.account.basic/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaAccountBasicResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaAccountBasicResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取非授权用户的基本信息
        /// 该接口本身需要授权，但可以查看他人的用户信息，主要使用在一些分销，采购场景。该接口由平台所招募的特定ISV可申请使用。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.account:alibaba.account.agent.basic-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.account&amp;n=alibaba.account.agent.basic&amp;v=1</summary>
        /// <param name="loginId">用户的loginId，入参不可同时为空</param>
        /// <param name="domain">旺铺域名，入参不可同时为空</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaAccountAgentBasicResult AlibabaAccountAgentBasic(string loginId = null, string domain = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaAccountAgentBasicAsync(loginId, domain, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取非授权用户的基本信息
        /// 该接口本身需要授权，但可以查看他人的用户信息，主要使用在一些分销，采购场景。该接口由平台所招募的特定ISV可申请使用。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.account:alibaba.account.agent.basic-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.account&amp;n=alibaba.account.agent.basic&amp;v=1</summary>
        /// <param name="loginId">用户的loginId，入参不可同时为空</param>
        /// <param name="domain">旺铺域名，入参不可同时为空</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaAccountAgentBasicResult> AlibabaAccountAgentBasicAsync(string loginId = null, string domain = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.account/alibaba.account.agent.basic/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (loginId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(loginId, System.Globalization.CultureInfo.InvariantCulture)), "loginId");
                    }
                    if (domain != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(domain, System.Globalization.CultureInfo.InvariantCulture)), "domain");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaAccountAgentBasicResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaAccountAgentBasicResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>标题属性不一致（Deprecated）
        /// 用来判断，用户标题和属性中填写的信息是否一致，是否存在冲突的关键属性
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:search.title.properties.inconsistent-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=search.title.properties.inconsistent&amp;v=1</summary>
        /// <param name="title">Offer标题,对应为offer的标题，字段名为title</param>
        /// <param name="catid">Offer 发布类目id,对应为offer的发布类目id，字段名为catid</param>
        /// <param name="brief">Offer属性,对应为offer的属性，字段名为brief。brief的字段格式要求为： key：value 多个间空格分开</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public void SearchTitlePropertiesInconsistent(string title, string catid, string brief)
        {
            System.Threading.Tasks.Task.Run(async () => await SearchTitlePropertiesInconsistentAsync(title, catid, brief, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>标题属性不一致（Deprecated）
        /// 用来判断，用户标题和属性中填写的信息是否一致，是否存在冲突的关键属性
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:search.title.properties.inconsistent-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=search.title.properties.inconsistent&amp;v=1</summary>
        /// <param name="title">Offer标题,对应为offer的标题，字段名为title</param>
        /// <param name="catid">Offer 发布类目id,对应为offer的发布类目id，字段名为catid</param>
        /// <param name="brief">Offer属性,对应为offer的属性，字段名为brief。brief的字段格式要求为： key：value 多个间空格分开</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SearchTitlePropertiesInconsistentAsync(string title, string catid, string brief, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/search.title.properties.inconsistent/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (title == null)
                        throw new System.ArgumentNullException("title");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)), "title");
                    }
                    if (catid == null)
                        throw new System.ArgumentNullException("catid");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(catid, System.Globalization.CultureInfo.InvariantCulture)), "catid");
                    }
                    if (brief == null)
                        throw new System.ArgumentNullException("brief");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(brief, System.Globalization.CultureInfo.InvariantCulture)), "brief");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>查询淘宝卖家的商品在1688的同款及相似款信息
        /// 查询淘宝卖家的商品在1688的同款及相似款信息，此API为定向招募开放
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.graph.offer.info-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.graph.offer.info&amp;v=1</summary>
        /// <param name="taobaoNickName">淘宝用户的登陆的nickName</param>
        /// <returns>同款及相似款商品的统计信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCbuSearchwebOpenHsfResultIsvGraphCommonResult AlibabaSearchGraphOfferInfo(string taobaoNickName)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaSearchGraphOfferInfoAsync(taobaoNickName, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询淘宝卖家的商品在1688的同款及相似款信息
        /// 查询淘宝卖家的商品在1688的同款及相似款信息，此API为定向招募开放
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.graph.offer.info-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.graph.offer.info&amp;v=1</summary>
        /// <param name="taobaoNickName">淘宝用户的登陆的nickName</param>
        /// <returns>同款及相似款商品的统计信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCbuSearchwebOpenHsfResultIsvGraphCommonResult> AlibabaSearchGraphOfferInfoAsync(string taobaoNickName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.search.graph.offer.info/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (taobaoNickName == null)
                        throw new System.ArgumentNullException("taobaoNickName");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(taobaoNickName, System.Globalization.CultureInfo.InvariantCulture)), "taobaoNickName");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCbuSearchwebOpenHsfResultIsvGraphCommonResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCbuSearchwebOpenHsfResultIsvGraphCommonResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>分页查询淘宝商品在1688的同款商品信息
        /// 分页查询淘宝商品在1688的同款商品信息，此API为定向招募开放
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.graph.offer.same.pages-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.graph.offer.same.pages&amp;v=1</summary>
        /// <param name="taobaoOfferId">淘宝的offerid</param>
        /// <param name="beginPage">查询的页码</param>
        /// <param name="pageSize">每页的offer数量</param>
        /// <returns>查询的同款商品信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult AlibabaSearchGraphOfferSamePages(long taobaoOfferId, int beginPage, int pageSize)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaSearchGraphOfferSamePagesAsync(taobaoOfferId, beginPage, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>分页查询淘宝商品在1688的同款商品信息
        /// 分页查询淘宝商品在1688的同款商品信息，此API为定向招募开放
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.graph.offer.same.pages-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.graph.offer.same.pages&amp;v=1</summary>
        /// <param name="taobaoOfferId">淘宝的offerid</param>
        /// <param name="beginPage">查询的页码</param>
        /// <param name="pageSize">每页的offer数量</param>
        /// <returns>查询的同款商品信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult> AlibabaSearchGraphOfferSamePagesAsync(long taobaoOfferId, int beginPage, int pageSize, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.search.graph.offer.same.pages/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (taobaoOfferId == null)
                        throw new System.ArgumentNullException("taobaoOfferId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(taobaoOfferId, System.Globalization.CultureInfo.InvariantCulture)), "taobaoOfferId");
                    }
                    if (beginPage == null)
                        throw new System.ArgumentNullException("beginPage");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(beginPage, System.Globalization.CultureInfo.InvariantCulture)), "beginPage");
                    }
                    if (pageSize == null)
                        throw new System.ArgumentNullException("pageSize");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>ISV代销版猜你喜欢接口2
        /// ISV代销版猜你喜欢接口2
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.guess.offer.daixiao.version2-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.guess.offer.daixiao.version2&amp;v=1</summary>
        /// <param name="companyMemberId">用户memberID</param>
        /// <param name="pageSize">offer个数</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult AlibabaSearchGuessOfferDaixiaoVersion2(string companyMemberId, int? pageSize = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaSearchGuessOfferDaixiaoVersion2Async(companyMemberId, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>ISV代销版猜你喜欢接口2
        /// ISV代销版猜你喜欢接口2
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.guess.offer.daixiao.version2-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.guess.offer.daixiao.version2&amp;v=1</summary>
        /// <param name="companyMemberId">用户memberID</param>
        /// <param name="pageSize">offer个数</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult> AlibabaSearchGuessOfferDaixiaoVersion2Async(string companyMemberId, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.search.guess.offer.daixiao.version2/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (companyMemberId == null)
                        throw new System.ArgumentNullException("companyMemberId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(companyMemberId, System.Globalization.CultureInfo.InvariantCulture)), "companyMemberId");
                    }
                    if (pageSize != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>类目作弊
        /// 用户在发布offer时候，需要选择对应的发布类目，类目作弊就是用来检测选择的类目跟发布的offer信息是否匹配
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:search.category.cheating-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=search.category.cheating&amp;v=1</summary>
        /// <param name="title">Offer标题,对应为offer的标题，字段名为title</param>
        /// <param name="catid">Offer 发布类目id,对应为offer的发布类目id，字段名为catid</param>
        /// <param name="userid">卖家id（1688的memberId）,对应为该offer的旺铺userid</param>
        /// <returns>对于检测到类目作弊的，在type字段中，会标示为anti，否则为none。同时系统会推荐一到多个类目id，分别在catid，catname，以及score中标示，解析相关字段就可以得到。</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response6 SearchCategoryCheating(string title, string catid, string userid)
        {
            return System.Threading.Tasks.Task.Run(async () => await SearchCategoryCheatingAsync(title, catid, userid, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>类目作弊
        /// 用户在发布offer时候，需要选择对应的发布类目，类目作弊就是用来检测选择的类目跟发布的offer信息是否匹配
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:search.category.cheating-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=search.category.cheating&amp;v=1</summary>
        /// <param name="title">Offer标题,对应为offer的标题，字段名为title</param>
        /// <param name="catid">Offer 发布类目id,对应为offer的发布类目id，字段名为catid</param>
        /// <param name="userid">卖家id（1688的memberId）,对应为该offer的旺铺userid</param>
        /// <returns>对于检测到类目作弊的，在type字段中，会标示为anti，否则为none。同时系统会推荐一到多个类目id，分别在catid，catname，以及score中标示，解析相关字段就可以得到。</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response6> SearchCategoryCheatingAsync(string title, string catid, string userid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/search.category.cheating/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (title == null)
                        throw new System.ArgumentNullException("title");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)), "title");
                    }
                    if (catid == null)
                        throw new System.ArgumentNullException("catid");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(catid, System.Globalization.CultureInfo.InvariantCulture)), "catid");
                    }
                    if (userid == null)
                        throw new System.ArgumentNullException("userid");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(userid, System.Globalization.CultureInfo.InvariantCulture)), "userid");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response6>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response6);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>属性滥用
        /// 判断用户填写的属性是否存在滥用，比如属性值多个重复使用，属性值过长，以及属性值无意义等。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:search.properties.abuse-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=search.properties.abuse&amp;v=1</summary>
        /// <param name="catid">Offer 发布类目id,对应为offer的发布类目id，字段名为catid</param>
        /// <param name="brief">Offer属性,对应为offer的属性，字段名为brief。brief的字段格式要求为： key：value 多个间空格分开</param>
        /// <returns>对于存在属性滥用的，会在OFFERLEVEL输出对应的作弊程度，没有作弊的会标示为NONE.其他字段会标示具体的引起属性滥用的原因以及具体的属性KEY和VALUE</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response7 SearchPropertiesAbuse(string catid, string brief)
        {
            return System.Threading.Tasks.Task.Run(async () => await SearchPropertiesAbuseAsync(catid, brief, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>属性滥用
        /// 判断用户填写的属性是否存在滥用，比如属性值多个重复使用，属性值过长，以及属性值无意义等。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:search.properties.abuse-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=search.properties.abuse&amp;v=1</summary>
        /// <param name="catid">Offer 发布类目id,对应为offer的发布类目id，字段名为catid</param>
        /// <param name="brief">Offer属性,对应为offer的属性，字段名为brief。brief的字段格式要求为： key：value 多个间空格分开</param>
        /// <returns>对于存在属性滥用的，会在OFFERLEVEL输出对应的作弊程度，没有作弊的会标示为NONE.其他字段会标示具体的引起属性滥用的原因以及具体的属性KEY和VALUE</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response7> SearchPropertiesAbuseAsync(string catid, string brief, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/search.properties.abuse/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (catid == null)
                        throw new System.ArgumentNullException("catid");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(catid, System.Globalization.CultureInfo.InvariantCulture)), "catid");
                    }
                    if (brief == null)
                        throw new System.ArgumentNullException("brief");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(brief, System.Globalization.CultureInfo.InvariantCulture)), "brief");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response7>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response7);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>商品推荐以品推品-1688offer id推淘货源offer
        /// 商品推荐以品推品-1688offer id推淘货源offer
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.graph.offer.daixiao.similar.pages-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.graph.offer.daixiao.similar.pages&amp;v=1</summary>
        /// <param name="offerId">offer的id</param>
        /// <param name="beginPage">查询的页码</param>
        /// <param name="pageSize">每页的offer数量</param>
        /// <returns>相似款商品的信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult AlibabaSearchGraphOfferDaixiaoSimilarPages(long offerId, int? beginPage = null, int? pageSize = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaSearchGraphOfferDaixiaoSimilarPagesAsync(offerId, beginPage, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>商品推荐以品推品-1688offer id推淘货源offer
        /// 商品推荐以品推品-1688offer id推淘货源offer
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.graph.offer.daixiao.similar.pages-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.graph.offer.daixiao.similar.pages&amp;v=1</summary>
        /// <param name="offerId">offer的id</param>
        /// <param name="beginPage">查询的页码</param>
        /// <param name="pageSize">每页的offer数量</param>
        /// <returns>相似款商品的信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult> AlibabaSearchGraphOfferDaixiaoSimilarPagesAsync(long offerId, int? beginPage = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.search.graph.offer.daixiao.similar.pages/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (offerId == null)
                        throw new System.ArgumentNullException("offerId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(offerId, System.Globalization.CultureInfo.InvariantCulture)), "offerId");
                    }
                    if (beginPage != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(beginPage, System.Globalization.CultureInfo.InvariantCulture)), "beginPage");
                    }
                    if (pageSize != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>标题堆砌（Deprecated）
        /// 标题堆砌，用来检测offer标题中是否存在堆砌多个关键词的情况，包括产品词堆砌，型号词堆砌，品牌堆砌等
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:search.title.stuffing-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=search.title.stuffing&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public void SearchTitleStuffing(string title, string catid)
        {
            System.Threading.Tasks.Task.Run(async () => await SearchTitleStuffingAsync(title, catid, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>标题堆砌（Deprecated）
        /// 标题堆砌，用来检测offer标题中是否存在堆砌多个关键词的情况，包括产品词堆砌，型号词堆砌，品牌堆砌等
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:search.title.stuffing-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=search.title.stuffing&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SearchTitleStuffingAsync(string title, string catid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/search.title.stuffing/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (title == null)
                        throw new System.ArgumentNullException("title");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)), "title");
                    }
                    if (catid == null)
                        throw new System.ArgumentNullException("catid");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(catid, System.Globalization.CultureInfo.InvariantCulture)), "catid");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>分页查询淘宝商品在1688的相似款商品信息
        /// 分页查询淘宝商品在1688的相似款商品信息，此API为定向招募开放
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.graph.offer.similar.pages-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.graph.offer.similar.pages&amp;v=1</summary>
        /// <param name="taobaoOfferId">淘宝的offer的id</param>
        /// <param name="beginPage">查询的页码</param>
        /// <param name="pageSize">每页的offer数量</param>
        /// <returns>相似款商品的信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult AlibabaSearchGraphOfferSimilarPages(long taobaoOfferId, int beginPage, int pageSize)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaSearchGraphOfferSimilarPagesAsync(taobaoOfferId, beginPage, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>分页查询淘宝商品在1688的相似款商品信息
        /// 分页查询淘宝商品在1688的相似款商品信息，此API为定向招募开放
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.graph.offer.similar.pages-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.graph.offer.similar.pages&amp;v=1</summary>
        /// <param name="taobaoOfferId">淘宝的offer的id</param>
        /// <param name="beginPage">查询的页码</param>
        /// <param name="pageSize">每页的offer数量</param>
        /// <returns>相似款商品的信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult> AlibabaSearchGraphOfferSimilarPagesAsync(long taobaoOfferId, int beginPage, int pageSize, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.search.graph.offer.similar.pages/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (taobaoOfferId == null)
                        throw new System.ArgumentNullException("taobaoOfferId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(taobaoOfferId, System.Globalization.CultureInfo.InvariantCulture)), "taobaoOfferId");
                    }
                    if (beginPage == null)
                        throw new System.ArgumentNullException("beginPage");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(beginPage, System.Globalization.CultureInfo.InvariantCulture)), "beginPage");
                    }
                    if (pageSize == null)
                        throw new System.ArgumentNullException("pageSize");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>订购的订单列表
        /// 订购的订单列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.app.pieceorder.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.app.pieceorder.get&amp;v=1</summary>
        /// <param name="gmtCreate">下单时间</param>
        /// <param name="startIndex">第几页 （用于分页）</param>
        /// <param name="aliId">买家的aliId</param>
        /// <param name="pageSize">每页大小（用于分页）
        /// 限制：小于等于50</param>
        /// <param name="bizStatusList">订单服务状态列表
        /// B:服务前，S:服务中，P：挂起，E：关闭，C:作废</param>
        /// <returns>isv订单信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response8 AlibabaAppPieceorderGet(System.DateTimeOffset gmtCreate, int? startIndex = null, long? aliId = null, int? pageSize = null, System.Collections.Generic.IEnumerable<string> bizStatusList = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaAppPieceorderGetAsync(gmtCreate, startIndex, aliId, pageSize, bizStatusList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>订购的订单列表
        /// 订购的订单列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.app.pieceorder.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.app.pieceorder.get&amp;v=1</summary>
        /// <param name="gmtCreate">下单时间</param>
        /// <param name="startIndex">第几页 （用于分页）</param>
        /// <param name="aliId">买家的aliId</param>
        /// <param name="pageSize">每页大小（用于分页）
        /// 限制：小于等于50</param>
        /// <param name="bizStatusList">订单服务状态列表
        /// B:服务前，S:服务中，P：挂起，E：关闭，C:作废</param>
        /// <returns>isv订单信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response8> AlibabaAppPieceorderGetAsync(System.DateTimeOffset gmtCreate, int? startIndex = null, long? aliId = null, int? pageSize = null, System.Collections.Generic.IEnumerable<string> bizStatusList = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.app.pieceorder.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (gmtCreate == null)
                        throw new System.ArgumentNullException("gmtCreate");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(gmtCreate, System.Globalization.CultureInfo.InvariantCulture)), "gmtCreate");
                    }
                    if (startIndex != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(startIndex, System.Globalization.CultureInfo.InvariantCulture)), "startIndex");
                    }
                    if (aliId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(aliId, System.Globalization.CultureInfo.InvariantCulture)), "aliId");
                    }
                    if (pageSize != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    if (bizStatusList != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(bizStatusList, System.Globalization.CultureInfo.InvariantCulture)), "bizStatusList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response8>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response8);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>查询系统时间
        /// 获取系统时间，从而跟本地时间进行校准
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:system.time.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=system.time.get&amp;v=1</summary>
        /// <returns>当前系统时间，格式为yyyyMMddHHmmssSSSZ，即年月日时分秒毫秒时区</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.DateTimeOffset SystemTimeGet()
        {
            return System.Threading.Tasks.Task.Run(async () => await SystemTimeGetAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询系统时间
        /// 获取系统时间，从而跟本地时间进行校准
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:system.time.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=system.time.get&amp;v=1</summary>
        /// <returns>当前系统时间，格式为yyyyMMddHHmmssSSSZ，即年月日时分秒毫秒时区</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.DateTimeOffset> SystemTimeGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/system.time.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.DateTimeOffset>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.DateTimeOffset);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取某个应用最近一个月的到期订单信息
        /// ISV获取自己名下的应用最近一个月的到期的订单信息列表。
        /// 只会状态是服务中或者待发布的才有到期时间
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:app.expire.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=app.expire.get&amp;v=1</summary>
        /// <param name="gmtServiceEnd">订单到期时间</param>
        /// <param name="memberId">订购者会员memberId</param>
        /// <param name="bizStatusList">订单服务状态列表
        /// B:服务前，S:服务中，P：挂起，E：关闭，C:作废</param>
        /// <param name="pageSize">每页大小（用于分页）
        /// 限制：小于等于50</param>
        /// <param name="startIndex">第几页 （用于分页）</param>
        /// <returns>isv订单信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response8 AppExpireGet(System.DateTimeOffset gmtServiceEnd, string memberId = null, System.Collections.Generic.IEnumerable<string> bizStatusList = null, int? pageSize = null, int? startIndex = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AppExpireGetAsync(gmtServiceEnd, memberId, bizStatusList, pageSize, startIndex, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取某个应用最近一个月的到期订单信息
        /// ISV获取自己名下的应用最近一个月的到期的订单信息列表。
        /// 只会状态是服务中或者待发布的才有到期时间
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:app.expire.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=app.expire.get&amp;v=1</summary>
        /// <param name="gmtServiceEnd">订单到期时间</param>
        /// <param name="memberId">订购者会员memberId</param>
        /// <param name="bizStatusList">订单服务状态列表
        /// B:服务前，S:服务中，P：挂起，E：关闭，C:作废</param>
        /// <param name="pageSize">每页大小（用于分页）
        /// 限制：小于等于50</param>
        /// <param name="startIndex">第几页 （用于分页）</param>
        /// <returns>isv订单信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response8> AppExpireGetAsync(System.DateTimeOffset gmtServiceEnd, string memberId = null, System.Collections.Generic.IEnumerable<string> bizStatusList = null, int? pageSize = null, int? startIndex = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/app.expire.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (gmtServiceEnd == null)
                        throw new System.ArgumentNullException("gmtServiceEnd");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(gmtServiceEnd, System.Globalization.CultureInfo.InvariantCulture)), "gmtServiceEnd");
                    }
                    if (memberId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(memberId, System.Globalization.CultureInfo.InvariantCulture)), "memberId");
                    }
                    if (bizStatusList != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(bizStatusList, System.Globalization.CultureInfo.InvariantCulture)), "bizStatusList");
                    }
                    if (pageSize != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    if (startIndex != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(startIndex, System.Globalization.CultureInfo.InvariantCulture)), "startIndex");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response8>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response8);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>服务商(ISV) 根据订单行号查询订单信息
        /// 服务商(ISV) 根据订单行号查询订单信息，如果订单号不存在或不属于当前查询的应用，结果不返回订单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.app.orderListbyIds-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.app.orderListbyIds&amp;v=1</summary>
        /// <param name="orderIdList">订单ID列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaAppOrderListbyIdsResult AlibabaAppOrderListbyIds(System.Collections.Generic.IEnumerable<string> orderIdList)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaAppOrderListbyIdsAsync(orderIdList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>服务商(ISV) 根据订单行号查询订单信息
        /// 服务商(ISV) 根据订单行号查询订单信息，如果订单号不存在或不属于当前查询的应用，结果不返回订单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.app.orderListbyIds-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.app.orderListbyIds&amp;v=1</summary>
        /// <param name="orderIdList">订单ID列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaAppOrderListbyIdsResult> AlibabaAppOrderListbyIdsAsync(System.Collections.Generic.IEnumerable<string> orderIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.app.orderListbyIds/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orderIdList == null)
                        throw new System.ArgumentNullException("orderIdList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderIdList, System.Globalization.CultureInfo.InvariantCulture)), "orderIdList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaAppOrderListbyIdsResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaAppOrderListbyIdsResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>app 在服务市场被订购的订单列表
        /// 获取调用该api的app在服务市场被订购的订单列表。appkey唯一表示一个app
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:app.order.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=app.order.get&amp;v=1</summary>
        /// <param name="gmtCreate">下单时间</param>
        /// <param name="memberId">订购者会员memberId</param>
        /// <param name="bizStatusList">订单服务状态列表
        /// B:服务前，S:服务中，P：挂起，E：关闭，C:作废</param>
        /// <param name="pageSize">每页大小（用于分页）
        /// 限制：小于等于50</param>
        /// <param name="startIndex">第几页 （用于分页）</param>
        /// <param name="loginId">订购者会员LoginId</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 11000	- 未知错误(未知错误)
        /// 11002	- 参数错误(参数错误)
        /// 11003	- 产品不存在或者已经下架(产品不存在或者已经下架)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AppOrderGetResult AppOrderGet(System.DateTimeOffset gmtCreate, string memberId = null, System.Collections.Generic.IEnumerable<string> bizStatusList = null, int? pageSize = null, int? startIndex = null, string loginId = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AppOrderGetAsync(gmtCreate, memberId, bizStatusList, pageSize, startIndex, loginId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>app 在服务市场被订购的订单列表
        /// 获取调用该api的app在服务市场被订购的订单列表。appkey唯一表示一个app
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:app.order.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=app.order.get&amp;v=1</summary>
        /// <param name="gmtCreate">下单时间</param>
        /// <param name="memberId">订购者会员memberId</param>
        /// <param name="bizStatusList">订单服务状态列表
        /// B:服务前，S:服务中，P：挂起，E：关闭，C:作废</param>
        /// <param name="pageSize">每页大小（用于分页）
        /// 限制：小于等于50</param>
        /// <param name="startIndex">第几页 （用于分页）</param>
        /// <param name="loginId">订购者会员LoginId</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 11000	- 未知错误(未知错误)
        /// 11002	- 参数错误(参数错误)
        /// 11003	- 产品不存在或者已经下架(产品不存在或者已经下架)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AppOrderGetResult> AppOrderGetAsync(System.DateTimeOffset gmtCreate, string memberId = null, System.Collections.Generic.IEnumerable<string> bizStatusList = null, int? pageSize = null, int? startIndex = null, string loginId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/app.order.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (gmtCreate == null)
                        throw new System.ArgumentNullException("gmtCreate");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(gmtCreate, System.Globalization.CultureInfo.InvariantCulture)), "gmtCreate");
                    }
                    if (memberId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(memberId, System.Globalization.CultureInfo.InvariantCulture)), "memberId");
                    }
                    if (bizStatusList != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(bizStatusList, System.Globalization.CultureInfo.InvariantCulture)), "bizStatusList");
                    }
                    if (pageSize != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    if (startIndex != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(startIndex, System.Globalization.CultureInfo.InvariantCulture)), "startIndex");
                    }
                    if (loginId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(loginId, System.Globalization.CultureInfo.InvariantCulture)), "loginId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AppOrderGetResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AppOrderGetResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【产品】查询SKU的代销价格和库存
        /// 根据渠道商ID和商品ID和SPECID查询指定SKU下商品的折扣后的代销价格和库存
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.querySkuBySpecId-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.querySkuBySpecId&amp;v=1</summary>
        /// <param name="productId">产品Id</param>
        /// <param name="specId">sku的SpecId</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaDistributorQuerySkuBySpecIdResult AlibabaDistributorQuerySkuBySpecId(long productId, string specId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaDistributorQuerySkuBySpecIdAsync(productId, specId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【产品】查询SKU的代销价格和库存
        /// 根据渠道商ID和商品ID和SPECID查询指定SKU下商品的折扣后的代销价格和库存
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.querySkuBySpecId-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.querySkuBySpecId&amp;v=1</summary>
        /// <param name="productId">产品Id</param>
        /// <param name="specId">sku的SpecId</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaDistributorQuerySkuBySpecIdResult> AlibabaDistributorQuerySkuBySpecIdAsync(long productId, string specId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.distributor.querySkuBySpecId/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (productId == null)
                        throw new System.ArgumentNullException("productId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture)), "productId");
                    }
                    if (specId == null)
                        throw new System.ArgumentNullException("specId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(specId, System.Globalization.CultureInfo.InvariantCulture)), "specId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaDistributorQuerySkuBySpecIdResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaDistributorQuerySkuBySpecIdResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【关系】分销商-分销商查看概览数据
        /// 通过分销商ID获取代销概览
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.getOverviewByConsignerId-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.getOverviewByConsignerId&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaRelationGetOverviewByConsignerIdResult AlibabaRelationGetOverviewByConsignerId()
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaRelationGetOverviewByConsignerIdAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【关系】分销商-分销商查看概览数据
        /// 通过分销商ID获取代销概览
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.getOverviewByConsignerId-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.getOverviewByConsignerId&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaRelationGetOverviewByConsignerIdResult> AlibabaRelationGetOverviewByConsignerIdAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.relation.getOverviewByConsignerId/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaRelationGetOverviewByConsignerIdResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaRelationGetOverviewByConsignerIdResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【产品】获取供应商可代销产品列表
        /// 获取供应商可代销产品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.supplier.listForAllConsignment-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.supplier.listForAllConsignment&amp;v=1</summary>
        /// <param name="keyword">模糊查询的关键字</param>
        /// <param name="productlineId">产品线Id</param>
        /// <param name="pageNo">页码。取值范围:大于零的整数;默认值为1，即返回第一页数据</param>
        /// <param name="pageSize">返回列表结果集每页条数。取值范围:大于零的整数;默认为20条，网页端默认10条</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaSupplierListForAllConsignmentResult AlibabaSupplierListForAllConsignment(string keyword = null, long? productlineId = null, int? pageNo = null, int? pageSize = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaSupplierListForAllConsignmentAsync(keyword, productlineId, pageNo, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【产品】获取供应商可代销产品列表
        /// 获取供应商可代销产品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.supplier.listForAllConsignment-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.supplier.listForAllConsignment&amp;v=1</summary>
        /// <param name="keyword">模糊查询的关键字</param>
        /// <param name="productlineId">产品线Id</param>
        /// <param name="pageNo">页码。取值范围:大于零的整数;默认值为1，即返回第一页数据</param>
        /// <param name="pageSize">返回列表结果集每页条数。取值范围:大于零的整数;默认为20条，网页端默认10条</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaSupplierListForAllConsignmentResult> AlibabaSupplierListForAllConsignmentAsync(string keyword = null, long? productlineId = null, int? pageNo = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.supplier.listForAllConsignment/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (keyword != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(keyword, System.Globalization.CultureInfo.InvariantCulture)), "keyword");
                    }
                    if (productlineId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productlineId, System.Globalization.CultureInfo.InvariantCulture)), "productlineId");
                    }
                    if (pageNo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageNo, System.Globalization.CultureInfo.InvariantCulture)), "pageNo");
                    }
                    if (pageSize != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaSupplierListForAllConsignmentResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaSupplierListForAllConsignmentResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【关系】分销商-终止代销关系
        /// 分销商终止关系,立刻生效
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.endConsignRelationByConsigner-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.endConsignRelationByConsigner&amp;v=1</summary>
        /// <param name="supplierLoginId">供应商LoginId</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaRelationEndConsignRelationByConsignerResult AlibabaRelationEndConsignRelationByConsigner(string supplierLoginId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaRelationEndConsignRelationByConsignerAsync(supplierLoginId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【关系】分销商-终止代销关系
        /// 分销商终止关系,立刻生效
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.endConsignRelationByConsigner-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.endConsignRelationByConsigner&amp;v=1</summary>
        /// <param name="supplierLoginId">供应商LoginId</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaRelationEndConsignRelationByConsignerResult> AlibabaRelationEndConsignRelationByConsignerAsync(string supplierLoginId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.relation.endConsignRelationByConsigner/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (supplierLoginId == null)
                        throw new System.ArgumentNullException("supplierLoginId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(supplierLoginId, System.Globalization.CultureInfo.InvariantCulture)), "supplierLoginId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaRelationEndConsignRelationByConsignerResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaRelationEndConsignRelationByConsignerResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>代销市场商品搜索服务
        /// 代销市场商品搜索服务
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.daixiao.offer.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.daixiao.offer.get&amp;v=1</summary>
        /// <param name="request">搜索参数</param>
        /// <returns>代销商品搜索的返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult AlibabaSearchDaixiaoOfferGet(ComAlibabaCbuSearchwebOpenHsfRequestIsvDaixiaoOfferRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaSearchDaixiaoOfferGetAsync(request, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>代销市场商品搜索服务
        /// 代销市场商品搜索服务
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.daixiao.offer.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.daixiao.offer.get&amp;v=1</summary>
        /// <param name="request">搜索参数</param>
        /// <returns>代销商品搜索的返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult> AlibabaSearchDaixiaoOfferGetAsync(ComAlibabaCbuSearchwebOpenHsfRequestIsvDaixiaoOfferRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.search.daixiao.offer.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (request == null)
                        throw new System.ArgumentNullException("request");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(request, System.Globalization.CultureInfo.InvariantCulture)), "request");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【采购单】修改采购单信息
        /// 修改采购单信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.modifySupplyOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.modifySupplyOrder&amp;v=1</summary>
        /// <param name="orderId">采购单Id</param>
        /// <param name="buyAmount">购买数量</param>
        /// <param name="specId">sku规格Id，例如af478130f6c683c4c77bb511796617d7，非sku类型则不用传</param>
        /// <param name="specInfo">sku规格信息的Map,key为规格属性名称，value为规格属性值，例如{&amp;quot;颜色&amp;quot;:&amp;quot;黄色&amp;quot;,&amp;quot;尺码&amp;quot;:&amp;quot;XS&amp;quot;}</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaDistributorModifySupplyOrderResult AlibabaDistributorModifySupplyOrder(long orderId, long buyAmount, string specId = null, System.Collections.Generic.IDictionary<string, string> specInfo = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaDistributorModifySupplyOrderAsync(orderId, buyAmount, specId, specInfo, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【采购单】修改采购单信息
        /// 修改采购单信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.modifySupplyOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.modifySupplyOrder&amp;v=1</summary>
        /// <param name="orderId">采购单Id</param>
        /// <param name="buyAmount">购买数量</param>
        /// <param name="specId">sku规格Id，例如af478130f6c683c4c77bb511796617d7，非sku类型则不用传</param>
        /// <param name="specInfo">sku规格信息的Map,key为规格属性名称，value为规格属性值，例如{&amp;quot;颜色&amp;quot;:&amp;quot;黄色&amp;quot;,&amp;quot;尺码&amp;quot;:&amp;quot;XS&amp;quot;}</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaDistributorModifySupplyOrderResult> AlibabaDistributorModifySupplyOrderAsync(long orderId, long buyAmount, string specId = null, System.Collections.Generic.IDictionary<string, string> specInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.distributor.modifySupplyOrder/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orderId == null)
                        throw new System.ArgumentNullException("orderId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)), "orderId");
                    }
                    if (buyAmount == null)
                        throw new System.ArgumentNullException("buyAmount");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(buyAmount, System.Globalization.CultureInfo.InvariantCulture)), "buyAmount");
                    }
                    if (specId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(specId, System.Globalization.CultureInfo.InvariantCulture)), "specId");
                    }
                    if (specInfo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(specInfo, System.Globalization.CultureInfo.InvariantCulture)), "specInfo");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaDistributorModifySupplyOrderResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaDistributorModifySupplyOrderResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【采购单】获取采购单列表
        /// 获取采购单列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.listSupplyOrders-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.listSupplyOrders&amp;v=1</summary>
        /// <param name="keyword">模糊查询关键字</param>
        /// <param name="supplierMemberId">供应商memberId</param>
        /// <param name="dataStatus">数据状态，0：待处理（正常），1：已删除（逻辑删除），2：已忽略</param>
        /// <param name="pageNo">页码。取值范围:大于零的整数;默认值为1，即返回第一页数据</param>
        /// <param name="pageSize">返回列表结果集每页条数。取值范围:大于零的整数;默认为20条，网页端默认10条</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaDistributorListSupplyOrdersResult AlibabaDistributorListSupplyOrders(string keyword = null, string supplierMemberId = null, long? dataStatus = null, int? pageNo = null, int? pageSize = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaDistributorListSupplyOrdersAsync(keyword, supplierMemberId, dataStatus, pageNo, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【采购单】获取采购单列表
        /// 获取采购单列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.listSupplyOrders-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.listSupplyOrders&amp;v=1</summary>
        /// <param name="keyword">模糊查询关键字</param>
        /// <param name="supplierMemberId">供应商memberId</param>
        /// <param name="dataStatus">数据状态，0：待处理（正常），1：已删除（逻辑删除），2：已忽略</param>
        /// <param name="pageNo">页码。取值范围:大于零的整数;默认值为1，即返回第一页数据</param>
        /// <param name="pageSize">返回列表结果集每页条数。取值范围:大于零的整数;默认为20条，网页端默认10条</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaDistributorListSupplyOrdersResult> AlibabaDistributorListSupplyOrdersAsync(string keyword = null, string supplierMemberId = null, long? dataStatus = null, int? pageNo = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.distributor.listSupplyOrders/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (keyword != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(keyword, System.Globalization.CultureInfo.InvariantCulture)), "keyword");
                    }
                    if (supplierMemberId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(supplierMemberId, System.Globalization.CultureInfo.InvariantCulture)), "supplierMemberId");
                    }
                    if (dataStatus != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(dataStatus, System.Globalization.CultureInfo.InvariantCulture)), "dataStatus");
                    }
                    if (pageNo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageNo, System.Globalization.CultureInfo.InvariantCulture)), "pageNo");
                    }
                    if (pageSize != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaDistributorListSupplyOrdersResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaDistributorListSupplyOrdersResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【产品】关联代销关系
        /// 关联代销关系
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.linkConsignSellItem-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.linkConsignSellItem&amp;v=1</summary>
        /// <param name="productId">需要关联代销关系的产品Id</param>
        /// <param name="itemUrl">淘宝宝贝链接</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaDistributorLinkConsignSellItemResult AlibabaDistributorLinkConsignSellItem(long productId, string itemUrl)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaDistributorLinkConsignSellItemAsync(productId, itemUrl, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【产品】关联代销关系
        /// 关联代销关系
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.linkConsignSellItem-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.linkConsignSellItem&amp;v=1</summary>
        /// <param name="productId">需要关联代销关系的产品Id</param>
        /// <param name="itemUrl">淘宝宝贝链接</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaDistributorLinkConsignSellItemResult> AlibabaDistributorLinkConsignSellItemAsync(long productId, string itemUrl, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.distributor.linkConsignSellItem/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (productId == null)
                        throw new System.ArgumentNullException("productId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture)), "productId");
                    }
                    if (itemUrl == null)
                        throw new System.ArgumentNullException("itemUrl");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(itemUrl, System.Globalization.CultureInfo.InvariantCulture)), "itemUrl");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaDistributorLinkConsignSellItemResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaDistributorLinkConsignSellItemResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【关系】供应商-添加等级
        /// 添加等级
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.addGroup-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.addGroup&amp;v=1</summary>
        /// <param name="groupName">等级名称</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaRelationAddGroupResult AlibabaRelationAddGroup(string groupName)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaRelationAddGroupAsync(groupName, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【关系】供应商-添加等级
        /// 添加等级
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.addGroup-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.addGroup&amp;v=1</summary>
        /// <param name="groupName">等级名称</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaRelationAddGroupResult> AlibabaRelationAddGroupAsync(string groupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.relation.addGroup/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (groupName == null)
                        throw new System.ArgumentNullException("groupName");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(groupName, System.Globalization.CultureInfo.InvariantCulture)), "groupName");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaRelationAddGroupResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaRelationAddGroupResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【采购单】删除采购单
        /// 删除采购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.deleteSupplyOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.deleteSupplyOrder&amp;v=1</summary>
        /// <param name="supplyOrders">采购单列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaDistributorDeleteSupplyOrderResult AlibabaDistributorDeleteSupplyOrder(System.Collections.Generic.IEnumerable<long> supplyOrders)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaDistributorDeleteSupplyOrderAsync(supplyOrders, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【采购单】删除采购单
        /// 删除采购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.deleteSupplyOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.deleteSupplyOrder&amp;v=1</summary>
        /// <param name="supplyOrders">采购单列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaDistributorDeleteSupplyOrderResult> AlibabaDistributorDeleteSupplyOrderAsync(System.Collections.Generic.IEnumerable<long> supplyOrders, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.distributor.deleteSupplyOrder/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (supplyOrders == null)
                        throw new System.ArgumentNullException("supplyOrders");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(supplyOrders, System.Globalization.CultureInfo.InvariantCulture)), "supplyOrders");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaDistributorDeleteSupplyOrderResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaDistributorDeleteSupplyOrderResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【关系】供应商-查询所有等级信息
        /// 查询所有等级信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.queryConsignerGroups-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.queryConsignerGroups&amp;v=1</summary>
        /// <returns>等级列表</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response9 AlibabaRelationQueryConsignerGroups()
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaRelationQueryConsignerGroupsAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【关系】供应商-查询所有等级信息
        /// 查询所有等级信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.queryConsignerGroups-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.queryConsignerGroups&amp;v=1</summary>
        /// <returns>等级列表</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response9> AlibabaRelationQueryConsignerGroupsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.relation.queryConsignerGroups/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response9>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response9);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【采购单】【已废弃】确认采购单
        /// 【已废弃】确认采购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.confirmOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.confirmOrder&amp;v=1</summary>
        /// <param name="supplyOrders">采购单列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaDistributorConfirmOrderResult AlibabaDistributorConfirmOrder(System.Collections.Generic.IEnumerable<long> supplyOrders)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaDistributorConfirmOrderAsync(supplyOrders, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【采购单】【已废弃】确认采购单
        /// 【已废弃】确认采购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.confirmOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.confirmOrder&amp;v=1</summary>
        /// <param name="supplyOrders">采购单列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaDistributorConfirmOrderResult> AlibabaDistributorConfirmOrderAsync(System.Collections.Generic.IEnumerable<long> supplyOrders, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.distributor.confirmOrder/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (supplyOrders == null)
                        throw new System.ArgumentNullException("supplyOrders");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(supplyOrders, System.Globalization.CultureInfo.InvariantCulture)), "supplyOrders");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaDistributorConfirmOrderResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaDistributorConfirmOrderResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【产品】获取已代销产品列表
        /// 获取已代销产品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.listForAlreadyConsignment-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.listForAlreadyConsignment&amp;v=1</summary>
        /// <param name="supplierMemberId">供应商memberId</param>
        /// <param name="keyword">模糊查询关键字</param>
        /// <param name="pageNo">页码。取值范围:大于零的整数;默认值为1，即返回第一页数据</param>
        /// <param name="pageSize">返回列表结果集每页条数。取值范围:大于零的整数;默认为20条，网页端默认10条</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaDistributorListForAlreadyConsignmentResult AlibabaDistributorListForAlreadyConsignment(string supplierMemberId, string keyword = null, int? pageNo = null, int? pageSize = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaDistributorListForAlreadyConsignmentAsync(supplierMemberId, keyword, pageNo, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【产品】获取已代销产品列表
        /// 获取已代销产品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.listForAlreadyConsignment-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.listForAlreadyConsignment&amp;v=1</summary>
        /// <param name="supplierMemberId">供应商memberId</param>
        /// <param name="keyword">模糊查询关键字</param>
        /// <param name="pageNo">页码。取值范围:大于零的整数;默认值为1，即返回第一页数据</param>
        /// <param name="pageSize">返回列表结果集每页条数。取值范围:大于零的整数;默认为20条，网页端默认10条</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaDistributorListForAlreadyConsignmentResult> AlibabaDistributorListForAlreadyConsignmentAsync(string supplierMemberId, string keyword = null, int? pageNo = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.distributor.listForAlreadyConsignment/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (supplierMemberId == null)
                        throw new System.ArgumentNullException("supplierMemberId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(supplierMemberId, System.Globalization.CultureInfo.InvariantCulture)), "supplierMemberId");
                    }
                    if (keyword != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(keyword, System.Globalization.CultureInfo.InvariantCulture)), "keyword");
                    }
                    if (pageNo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageNo, System.Globalization.CultureInfo.InvariantCulture)), "pageNo");
                    }
                    if (pageSize != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaDistributorListForAlreadyConsignmentResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaDistributorListForAlreadyConsignmentResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【采购单】忽略采购单
        /// 忽略采购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.ignoreSupplyOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.ignoreSupplyOrder&amp;v=1</summary>
        /// <param name="supplyOrders">采购单列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaDistributorIgnoreSupplyOrderResult AlibabaDistributorIgnoreSupplyOrder(System.Collections.Generic.IEnumerable<long> supplyOrders)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaDistributorIgnoreSupplyOrderAsync(supplyOrders, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【采购单】忽略采购单
        /// 忽略采购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.ignoreSupplyOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.ignoreSupplyOrder&amp;v=1</summary>
        /// <param name="supplyOrders">采购单列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaDistributorIgnoreSupplyOrderResult> AlibabaDistributorIgnoreSupplyOrderAsync(System.Collections.Generic.IEnumerable<long> supplyOrders, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.distributor.ignoreSupplyOrder/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (supplyOrders == null)
                        throw new System.ArgumentNullException("supplyOrders");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(supplyOrders, System.Globalization.CultureInfo.InvariantCulture)), "supplyOrders");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaDistributorIgnoreSupplyOrderResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaDistributorIgnoreSupplyOrderResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【关系】分销商-查询供应商列表
        /// 通过分销商 userID 获取 供应商列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.querySuppliers-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.querySuppliers&amp;v=1</summary>
        /// <param name="supplierLoginId">供应商登录ID，指定该参数可以查询授权用户与指定供应商的分销关系</param>
        /// <param name="currentPage">当前页码</param>
        /// <param name="pageSize">每页多少个</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaRelationSuppliersResult AlibabaRelationQuerySuppliers(string supplierLoginId = null, int? currentPage = null, int? pageSize = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaRelationQuerySuppliersAsync(supplierLoginId, currentPage, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【关系】分销商-查询供应商列表
        /// 通过分销商 userID 获取 供应商列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.querySuppliers-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.querySuppliers&amp;v=1</summary>
        /// <param name="supplierLoginId">供应商登录ID，指定该参数可以查询授权用户与指定供应商的分销关系</param>
        /// <param name="currentPage">当前页码</param>
        /// <param name="pageSize">每页多少个</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaRelationSuppliersResult> AlibabaRelationQuerySuppliersAsync(string supplierLoginId = null, int? currentPage = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.relation.querySuppliers/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (supplierLoginId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(supplierLoginId, System.Globalization.CultureInfo.InvariantCulture)), "supplierLoginId");
                    }
                    if (currentPage != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(currentPage, System.Globalization.CultureInfo.InvariantCulture)), "currentPage");
                    }
                    if (pageSize != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaRelationSuppliersResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaRelationSuppliersResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【关系】供应商-查询权益设置
        /// 查询权益测试
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.rights.queryAllRights-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.rights.queryAllRights&amp;v=1</summary>
        /// <returns>权益设置模型</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response7 AlibabaRightsQueryAllRights()
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaRightsQueryAllRightsAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【关系】供应商-查询权益设置
        /// 查询权益测试
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.rights.queryAllRights-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.rights.queryAllRights&amp;v=1</summary>
        /// <returns>权益设置模型</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response7> AlibabaRightsQueryAllRightsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.rights.queryAllRights/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response7>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response7);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【产品线】供应商-查询产品分组信息
        /// 查询产品分组信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.productline.queryConsignerProductlines-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.productline.queryConsignerProductlines&amp;v=1</summary>
        /// <returns>产品分组结果集合</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response10 AlibabaProductlineQueryConsignerProductlines()
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaProductlineQueryConsignerProductlinesAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【产品线】供应商-查询产品分组信息
        /// 查询产品分组信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.productline.queryConsignerProductlines-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.productline.queryConsignerProductlines&amp;v=1</summary>
        /// <returns>产品分组结果集合</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response10> AlibabaProductlineQueryConsignerProductlinesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.productline.queryConsignerProductlines/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response10>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response10);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【关系】供应商-修改优惠设置类型
        /// 供应商批量修改分组等级
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.updateAllRightsRightType-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.updateAllRightsRightType&amp;v=1</summary>
        /// <param name="rightType">优惠类型</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaRelationUpdateAllRightsRightTypeResult AlibabaRelationUpdateAllRightsRightType(string rightType)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaRelationUpdateAllRightsRightTypeAsync(rightType, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【关系】供应商-修改优惠设置类型
        /// 供应商批量修改分组等级
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.updateAllRightsRightType-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.updateAllRightsRightType&amp;v=1</summary>
        /// <param name="rightType">优惠类型</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaRelationUpdateAllRightsRightTypeResult> AlibabaRelationUpdateAllRightsRightTypeAsync(string rightType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.relation.updateAllRightsRightType/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (rightType == null)
                        throw new System.ArgumentNullException("rightType");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(rightType, System.Globalization.CultureInfo.InvariantCulture)), "rightType");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaRelationUpdateAllRightsRightTypeResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaRelationUpdateAllRightsRightTypeResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【产品】传淘宝代销
        /// 传淘宝代销
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.downloadConsignSell-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.downloadConsignSell&amp;v=1</summary>
        /// <param name="productId">需要传淘宝的产品Id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaDistributorDownloadConsignSellResult AlibabaDistributorDownloadConsignSell(long productId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaDistributorDownloadConsignSellAsync(productId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【产品】传淘宝代销
        /// 传淘宝代销
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.downloadConsignSell-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.downloadConsignSell&amp;v=1</summary>
        /// <param name="productId">需要传淘宝的产品Id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaDistributorDownloadConsignSellResult> AlibabaDistributorDownloadConsignSellAsync(long productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.distributor.downloadConsignSell/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (productId == null)
                        throw new System.ArgumentNullException("productId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture)), "productId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaDistributorDownloadConsignSellResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaDistributorDownloadConsignSellResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【产品】【已废弃】规格同步
        /// 规格同步
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.syncTbSkuInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.syncTbSkuInfo&amp;v=1</summary>
        /// <param name="productId">需要同步sku信息的产品Id</param>
        /// <param name="itemId">淘宝宝贝Id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaDistributorSyncTbSkuInfoResult AlibabaDistributorSyncTbSkuInfo(long productId, long itemId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaDistributorSyncTbSkuInfoAsync(productId, itemId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【产品】【已废弃】规格同步
        /// 规格同步
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.syncTbSkuInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.syncTbSkuInfo&amp;v=1</summary>
        /// <param name="productId">需要同步sku信息的产品Id</param>
        /// <param name="itemId">淘宝宝贝Id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaDistributorSyncTbSkuInfoResult> AlibabaDistributorSyncTbSkuInfoAsync(long productId, long itemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.distributor.syncTbSkuInfo/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (productId == null)
                        throw new System.ArgumentNullException("productId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture)), "productId");
                    }
                    if (itemId == null)
                        throw new System.ArgumentNullException("itemId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(itemId, System.Globalization.CultureInfo.InvariantCulture)), "itemId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaDistributorSyncTbSkuInfoResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaDistributorSyncTbSkuInfoResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>推荐代销市场的商品
        /// 推荐代销市场的商品
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.daixiao.recom.offer-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.daixiao.recom.offer&amp;v=1</summary>
        /// <param name="request">查询参数</param>
        /// <returns>代销市场推荐的商品信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult AlibabaSearchDaixiaoRecomOffer(ComAlibabaCbuSearchwebOpenHsfRequestIsvDaixiaoRecomRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaSearchDaixiaoRecomOfferAsync(request, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>推荐代销市场的商品
        /// 推荐代销市场的商品
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.daixiao.recom.offer-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.daixiao.recom.offer&amp;v=1</summary>
        /// <param name="request">查询参数</param>
        /// <returns>代销市场推荐的商品信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult> AlibabaSearchDaixiaoRecomOfferAsync(ComAlibabaCbuSearchwebOpenHsfRequestIsvDaixiaoRecomRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.search.daixiao.recom.offer/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (request == null)
                        throw new System.ArgumentNullException("request");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(request, System.Globalization.CultureInfo.InvariantCulture)), "request");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCbuSearchwebOpenHsfResultIsvOfferQueryCommonResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【产品】取消代销关系
        /// 取消代销关系
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.unLinkConsignSellItem-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.unLinkConsignSellItem&amp;v=1</summary>
        /// <param name="productId">需要取消关联关系的产品Id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaDistributorUnLinkConsignSellItemResult AlibabaDistributorUnLinkConsignSellItem(long productId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaDistributorUnLinkConsignSellItemAsync(productId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【产品】取消代销关系
        /// 取消代销关系
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.unLinkConsignSellItem-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.unLinkConsignSellItem&amp;v=1</summary>
        /// <param name="productId">需要取消关联关系的产品Id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaDistributorUnLinkConsignSellItemResult> AlibabaDistributorUnLinkConsignSellItemAsync(long productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.distributor.unLinkConsignSellItem/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (productId == null)
                        throw new System.ArgumentNullException("productId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture)), "productId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaDistributorUnLinkConsignSellItemResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaDistributorUnLinkConsignSellItemResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>推荐代销市场的供应商
        /// 推荐代销市场的供应商
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.daixiao.recom.company-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.daixiao.recom.company&amp;v=1</summary>
        /// <param name="request">查询参数</param>
        /// <returns>推荐的供应商信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public ComAlibabaCbuSearchwebOpenHsfResultDaixiaoRecomCommonResult AlibabaSearchDaixiaoRecomCompany(ComAlibabaCbuSearchwebOpenHsfRequestIsvDaixiaoRecomRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaSearchDaixiaoRecomCompanyAsync(request, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>推荐代销市场的供应商
        /// 推荐代销市场的供应商
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.search.daixiao.recom.company-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.search.daixiao.recom.company&amp;v=1</summary>
        /// <param name="request">查询参数</param>
        /// <returns>推荐的供应商信息</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ComAlibabaCbuSearchwebOpenHsfResultDaixiaoRecomCommonResult> AlibabaSearchDaixiaoRecomCompanyAsync(ComAlibabaCbuSearchwebOpenHsfRequestIsvDaixiaoRecomRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.search.daixiao.recom.company/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (request == null)
                        throw new System.ArgumentNullException("request");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(request, System.Globalization.CultureInfo.InvariantCulture)), "request");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ComAlibabaCbuSearchwebOpenHsfResultDaixiaoRecomCommonResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ComAlibabaCbuSearchwebOpenHsfResultDaixiaoRecomCommonResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【产品】一键代销
        /// 一键代销
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.fastConsign-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.fastConsign&amp;v=1</summary>
        /// <param name="productId">需要一键代销的产品Id</param>
        /// <param name="supplierMemberId">供应商memberId</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaDistributorFastConsignResult AlibabaDistributorFastConsign(long productId, string supplierMemberId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaDistributorFastConsignAsync(productId, supplierMemberId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【产品】一键代销
        /// 一键代销
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.fastConsign-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.fastConsign&amp;v=1</summary>
        /// <param name="productId">需要一键代销的产品Id</param>
        /// <param name="supplierMemberId">供应商memberId</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaDistributorFastConsignResult> AlibabaDistributorFastConsignAsync(long productId, string supplierMemberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.distributor.fastConsign/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (productId == null)
                        throw new System.ArgumentNullException("productId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture)), "productId");
                    }
                    if (supplierMemberId == null)
                        throw new System.ArgumentNullException("supplierMemberId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(supplierMemberId, System.Globalization.CultureInfo.InvariantCulture)), "supplierMemberId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaDistributorFastConsignResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaDistributorFastConsignResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【关系】供应商-查询分销商列表
        /// 通过供应商userId查询分销商列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.queryConsigners-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.queryConsigners&amp;v=1</summary>
        /// <param name="consignerLoginId">指定分销商LoginId</param>
        /// <param name="consignerGrade">分销商等级</param>
        /// <param name="currentPage">当前页码</param>
        /// <param name="pageSize">每页多少个</param>
        /// <returns>查询结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaRelationConsignersResult AlibabaRelationQueryConsigners(string consignerLoginId = null, long? consignerGrade = null, int? currentPage = null, int? pageSize = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaRelationQueryConsignersAsync(consignerLoginId, consignerGrade, currentPage, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【关系】供应商-查询分销商列表
        /// 通过供应商userId查询分销商列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.queryConsigners-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.queryConsigners&amp;v=1</summary>
        /// <param name="consignerLoginId">指定分销商LoginId</param>
        /// <param name="consignerGrade">分销商等级</param>
        /// <param name="currentPage">当前页码</param>
        /// <param name="pageSize">每页多少个</param>
        /// <returns>查询结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaRelationConsignersResult> AlibabaRelationQueryConsignersAsync(string consignerLoginId = null, long? consignerGrade = null, int? currentPage = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.relation.queryConsigners/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (consignerLoginId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(consignerLoginId, System.Globalization.CultureInfo.InvariantCulture)), "consignerLoginId");
                    }
                    if (consignerGrade != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(consignerGrade, System.Globalization.CultureInfo.InvariantCulture)), "consignerGrade");
                    }
                    if (currentPage != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(currentPage, System.Globalization.CultureInfo.InvariantCulture)), "currentPage");
                    }
                    if (pageSize != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaRelationConsignersResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaRelationConsignersResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【产品】获取可代销产品列表
        /// 获取可代销产品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.listForAllConsignment-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.listForAllConsignment&amp;v=1</summary>
        /// <param name="supplierMemberId">供应商memberId</param>
        /// <param name="keyword">模糊查询关键字</param>
        /// <param name="pageNo">页码。取值范围:大于零的整数;默认值为1，即返回第一页数据</param>
        /// <param name="pageSize">返回列表结果集每页条数。取值范围:大于零的整数;默认为20条，网页端默认10条</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaDistributorListForAllConsignmentResult AlibabaDistributorListForAllConsignment(string supplierMemberId, string keyword = null, int? pageNo = null, int? pageSize = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaDistributorListForAllConsignmentAsync(supplierMemberId, keyword, pageNo, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【产品】获取可代销产品列表
        /// 获取可代销产品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.listForAllConsignment-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.listForAllConsignment&amp;v=1</summary>
        /// <param name="supplierMemberId">供应商memberId</param>
        /// <param name="keyword">模糊查询关键字</param>
        /// <param name="pageNo">页码。取值范围:大于零的整数;默认值为1，即返回第一页数据</param>
        /// <param name="pageSize">返回列表结果集每页条数。取值范围:大于零的整数;默认为20条，网页端默认10条</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaDistributorListForAllConsignmentResult> AlibabaDistributorListForAllConsignmentAsync(string supplierMemberId, string keyword = null, int? pageNo = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.distributor.listForAllConsignment/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (supplierMemberId == null)
                        throw new System.ArgumentNullException("supplierMemberId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(supplierMemberId, System.Globalization.CultureInfo.InvariantCulture)), "supplierMemberId");
                    }
                    if (keyword != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(keyword, System.Globalization.CultureInfo.InvariantCulture)), "keyword");
                    }
                    if (pageNo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageNo, System.Globalization.CultureInfo.InvariantCulture)), "pageNo");
                    }
                    if (pageSize != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaDistributorListForAllConsignmentResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaDistributorListForAllConsignmentResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【关系】供应商-供应商批量修改分组等级
        /// 供应商批量修改分组等级
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.changeGroup-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.changeGroup&amp;v=1</summary>
        /// <param name="groupId">等级ID</param>
        /// <param name="loginIdList">需要修改的列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaRelationChangeGroupResult AlibabaRelationChangeGroup(long groupId, System.Collections.Generic.IEnumerable<string> loginIdList)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaRelationChangeGroupAsync(groupId, loginIdList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【关系】供应商-供应商批量修改分组等级
        /// 供应商批量修改分组等级
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.relation.changeGroup-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.relation.changeGroup&amp;v=1</summary>
        /// <param name="groupId">等级ID</param>
        /// <param name="loginIdList">需要修改的列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaRelationChangeGroupResult> AlibabaRelationChangeGroupAsync(long groupId, System.Collections.Generic.IEnumerable<string> loginIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.relation.changeGroup/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (groupId == null)
                        throw new System.ArgumentNullException("groupId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)), "groupId");
                    }
                    if (loginIdList == null)
                        throw new System.ArgumentNullException("loginIdList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(loginIdList, System.Globalization.CultureInfo.InvariantCulture)), "loginIdList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaRelationChangeGroupResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaRelationChangeGroupResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>【采购单】自动创建订单
        /// 自动创建订单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.autoCreateOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.autoCreateOrder&amp;v=1</summary>
        /// <param name="supplyOrders">采购单列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaDistributorAutoCreateOrderResult AlibabaDistributorAutoCreateOrder(System.Collections.Generic.IEnumerable<long> supplyOrders)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaDistributorAutoCreateOrderAsync(supplyOrders, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>【采购单】自动创建订单
        /// 自动创建订单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.distributor.autoCreateOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.distributor.autoCreateOrder&amp;v=1</summary>
        /// <param name="supplyOrders">采购单列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaDistributorAutoCreateOrderResult> AlibabaDistributorAutoCreateOrderAsync(System.Collections.Generic.IEnumerable<long> supplyOrders, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.distributor.autoCreateOrder/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (supplyOrders == null)
                        throw new System.ArgumentNullException("supplyOrders");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(supplyOrders, System.Globalization.CultureInfo.InvariantCulture)), "supplyOrders");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaDistributorAutoCreateOrderResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaDistributorAutoCreateOrderResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取网销宝推广单元列表
        /// 获取网销宝推广单元列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.adgroup.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.adgroup.list&amp;v=1</summary>
        /// <param name="adGroupIdList">推广单元id列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response11 AlibabaCnp4pAdgroupList(System.Collections.Generic.IEnumerable<string> adGroupIdList)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pAdgroupListAsync(adGroupIdList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝推广单元列表
        /// 获取网销宝推广单元列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.adgroup.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.adgroup.list&amp;v=1</summary>
        /// <param name="adGroupIdList">推广单元id列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response11> AlibabaCnp4pAdgroupListAsync(System.Collections.Generic.IEnumerable<string> adGroupIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.adgroup.list/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (adGroupIdList == null)
                        throw new System.ArgumentNullException("adGroupIdList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(adGroupIdList, System.Globalization.CultureInfo.InvariantCulture)), "adGroupIdList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response11>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response11);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>更新网销宝推广计划
        /// 更新网销宝推广计划
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.update&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="budget">计划预算</param>
        /// <param name="onlineStatus">计划状态，0为暂停；1为推广中；</param>
        /// <param name="promoteArea">计划投放地域，全部则为“0”，多个以英文逗号&amp;quot;,分隔&amp;quot;</param>
        /// <param name="schedule">计划投放时段，7*24小时分别用0、1代表暂停和投放。</param>
        /// <param name="cositeFlag">计划是否支持站外定向推广：0不支持，1支持</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCnp4pCampaign AlibabaCnp4pCampaignUpdate(long campaignId, double? budget = null, int? onlineStatus = null, string promoteArea = null, string schedule = null, int? cositeFlag = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pCampaignUpdateAsync(campaignId, budget, onlineStatus, promoteArea, schedule, cositeFlag, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新网销宝推广计划
        /// 更新网销宝推广计划
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.update&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="budget">计划预算</param>
        /// <param name="onlineStatus">计划状态，0为暂停；1为推广中；</param>
        /// <param name="promoteArea">计划投放地域，全部则为“0”，多个以英文逗号&amp;quot;,分隔&amp;quot;</param>
        /// <param name="schedule">计划投放时段，7*24小时分别用0、1代表暂停和投放。</param>
        /// <param name="cositeFlag">计划是否支持站外定向推广：0不支持，1支持</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCnp4pCampaign> AlibabaCnp4pCampaignUpdateAsync(long campaignId, double? budget = null, int? onlineStatus = null, string promoteArea = null, string schedule = null, int? cositeFlag = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.campaign.update/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (campaignId == null)
                        throw new System.ArgumentNullException("campaignId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)), "campaignId");
                    }
                    if (budget != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(budget, System.Globalization.CultureInfo.InvariantCulture)), "budget");
                    }
                    if (onlineStatus != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(onlineStatus, System.Globalization.CultureInfo.InvariantCulture)), "onlineStatus");
                    }
                    if (promoteArea != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(promoteArea, System.Globalization.CultureInfo.InvariantCulture)), "promoteArea");
                    }
                    if (schedule != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(schedule, System.Globalization.CultureInfo.InvariantCulture)), "schedule");
                    }
                    if (cositeFlag != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(cositeFlag, System.Globalization.CultureInfo.InvariantCulture)), "cositeFlag");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCnp4pCampaign>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCnp4pCampaign);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>删除计划信息
        /// 删除计划信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.delete&amp;v=1</summary>
        /// <param name="campaignIdList">推广计划id</param>
        /// <returns>通用int型结果返回 ErrorCode 的错误信息
        /// 110000	- 计划id为空
        /// 110017	- 计划信息不存在
        /// 88806	- 包含不允许操作的产品线计划id信息(移除非支持操作的产品线计划id信息)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response4 AlibabaCnp4pCampaignDelete(System.Collections.Generic.IEnumerable<string> campaignIdList)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pCampaignDeleteAsync(campaignIdList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除计划信息
        /// 删除计划信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.delete&amp;v=1</summary>
        /// <param name="campaignIdList">推广计划id</param>
        /// <returns>通用int型结果返回 ErrorCode 的错误信息
        /// 110000	- 计划id为空
        /// 110017	- 计划信息不存在
        /// 88806	- 包含不允许操作的产品线计划id信息(移除非支持操作的产品线计划id信息)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response4> AlibabaCnp4pCampaignDeleteAsync(System.Collections.Generic.IEnumerable<string> campaignIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.campaign.delete/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (campaignIdList == null)
                        throw new System.ArgumentNullException("campaignIdList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(campaignIdList, System.Globalization.CultureInfo.InvariantCulture)), "campaignIdList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response4);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取网销宝关键词排名
        /// 获取网销宝关键词排名
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.rank.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.rank.get&amp;v=1</summary>
        /// <param name="adGroupId">单元id</param>
        /// <param name="keywordId">关键词id</param>
        /// <param name="areaCode">排名所在区域</param>
        /// <returns>关键词排名返回 ErrorCode 的错误信息
        /// 系统错误	- 999999(系统错误)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCnp4pKeywordRank AlibabaCnp4pKeywordRankGet(long adGroupId, long keywordId, string areaCode = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pKeywordRankGetAsync(adGroupId, keywordId, areaCode, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝关键词排名
        /// 获取网销宝关键词排名
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.rank.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.rank.get&amp;v=1</summary>
        /// <param name="adGroupId">单元id</param>
        /// <param name="keywordId">关键词id</param>
        /// <param name="areaCode">排名所在区域</param>
        /// <returns>关键词排名返回 ErrorCode 的错误信息
        /// 系统错误	- 999999(系统错误)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCnp4pKeywordRank> AlibabaCnp4pKeywordRankGetAsync(long adGroupId, long keywordId, string areaCode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.keyword.rank.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (adGroupId == null)
                        throw new System.ArgumentNullException("adGroupId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(adGroupId, System.Globalization.CultureInfo.InvariantCulture)), "adGroupId");
                    }
                    if (keywordId == null)
                        throw new System.ArgumentNullException("keywordId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(keywordId, System.Globalization.CultureInfo.InvariantCulture)), "keywordId");
                    }
                    if (areaCode != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(areaCode, System.Globalization.CultureInfo.InvariantCulture)), "areaCode");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCnp4pKeywordRank>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCnp4pKeywordRank);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>根据推广计划获取网销宝推广单元列表
        /// 根据推广计划获取网销宝推广单元列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.adgroup.bycampaignids.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.adgroup.bycampaignids.list&amp;v=1</summary>
        /// <param name="campaignId">推广计划id</param>
        /// <param name="pageNo">分页页码，从1开始</param>
        /// <param name="pageSize">分页页条数，最大200</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCnp4pAdgroupBycampaignidsListResult AlibabaCnp4pAdgroupBycampaignidsList(long campaignId, int pageNo, int pageSize)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pAdgroupBycampaignidsListAsync(campaignId, pageNo, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据推广计划获取网销宝推广单元列表
        /// 根据推广计划获取网销宝推广单元列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.adgroup.bycampaignids.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.adgroup.bycampaignids.list&amp;v=1</summary>
        /// <param name="campaignId">推广计划id</param>
        /// <param name="pageNo">分页页码，从1开始</param>
        /// <param name="pageSize">分页页条数，最大200</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCnp4pAdgroupBycampaignidsListResult> AlibabaCnp4pAdgroupBycampaignidsListAsync(long campaignId, int pageNo, int pageSize, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.adgroup.bycampaignids.list/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (campaignId == null)
                        throw new System.ArgumentNullException("campaignId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)), "campaignId");
                    }
                    if (pageNo == null)
                        throw new System.ArgumentNullException("pageNo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageNo, System.Globalization.CultureInfo.InvariantCulture)), "pageNo");
                    }
                    if (pageSize == null)
                        throw new System.ArgumentNullException("pageSize");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCnp4pAdgroupBycampaignidsListResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCnp4pAdgroupBycampaignidsListResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取网销宝关键词列表
        /// 获取网销宝关键词列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.list&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="keywordIdList">关键词id列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response12 AlibabaCnp4pKeywordList(long campaignId, System.Collections.Generic.IEnumerable<string> keywordIdList)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pKeywordListAsync(campaignId, keywordIdList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝关键词列表
        /// 获取网销宝关键词列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.list&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="keywordIdList">关键词id列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response12> AlibabaCnp4pKeywordListAsync(long campaignId, System.Collections.Generic.IEnumerable<string> keywordIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.keyword.list/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (campaignId == null)
                        throw new System.ArgumentNullException("campaignId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)), "campaignId");
                    }
                    if (keywordIdList == null)
                        throw new System.ArgumentNullException("keywordIdList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(keywordIdList, System.Globalization.CultureInfo.InvariantCulture)), "keywordIdList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response12>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response12);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取网销宝关键词报表详情
        /// 获取网销宝关键词报表详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.report.keywordEffect-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.report.keywordEffect&amp;v=1</summary>
        /// <param name="startTime">报表起始日期</param>
        /// <param name="endTime">报表截止日期</param>
        /// <param name="campaignId">计划id</param>
        /// <param name="adGroupId">单元id</param>
        /// <param name="pageNo">分页起始页码，默认为1开始</param>
        /// <param name="pageSize">分页一页页数，最大一页200条</param>
        /// <param name="keywordId">关键词id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCnp4pReportKeywordEffectResult AlibabaCnp4pReportKeywordEffect(System.DateTimeOffset startTime, System.DateTimeOffset endTime, long campaignId, long adGroupId, int pageNo, int pageSize, long? keywordId = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pReportKeywordEffectAsync(startTime, endTime, campaignId, adGroupId, pageNo, pageSize, keywordId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝关键词报表详情
        /// 获取网销宝关键词报表详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.report.keywordEffect-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.report.keywordEffect&amp;v=1</summary>
        /// <param name="startTime">报表起始日期</param>
        /// <param name="endTime">报表截止日期</param>
        /// <param name="campaignId">计划id</param>
        /// <param name="adGroupId">单元id</param>
        /// <param name="pageNo">分页起始页码，默认为1开始</param>
        /// <param name="pageSize">分页一页页数，最大一页200条</param>
        /// <param name="keywordId">关键词id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCnp4pReportKeywordEffectResult> AlibabaCnp4pReportKeywordEffectAsync(System.DateTimeOffset startTime, System.DateTimeOffset endTime, long campaignId, long adGroupId, int pageNo, int pageSize, long? keywordId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.report.keywordEffect/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (startTime == null)
                        throw new System.ArgumentNullException("startTime");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture)), "startTime");
                    }
                    if (endTime == null)
                        throw new System.ArgumentNullException("endTime");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture)), "endTime");
                    }
                    if (campaignId == null)
                        throw new System.ArgumentNullException("campaignId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)), "campaignId");
                    }
                    if (adGroupId == null)
                        throw new System.ArgumentNullException("adGroupId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(adGroupId, System.Globalization.CultureInfo.InvariantCulture)), "adGroupId");
                    }
                    if (pageNo == null)
                        throw new System.ArgumentNullException("pageNo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageNo, System.Globalization.CultureInfo.InvariantCulture)), "pageNo");
                    }
                    if (pageSize == null)
                        throw new System.ArgumentNullException("pageSize");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    if (keywordId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(keywordId, System.Globalization.CultureInfo.InvariantCulture)), "keywordId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCnp4pReportKeywordEffectResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCnp4pReportKeywordEffectResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取关键词相关词列表
        /// 获取关键词相关词列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.list.relativeword-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.list.relativeword&amp;v=1</summary>
        /// <returns>返回 ErrorCode 的错误信息
        /// 100000	- 客户号为空
        /// 130003	- 关键词为空</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response13 AlibabaCnp4pKeywordListRelativeword(string keyword)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pKeywordListRelativewordAsync(keyword, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取关键词相关词列表
        /// 获取关键词相关词列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.list.relativeword-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.list.relativeword&amp;v=1</summary>
        /// <returns>返回 ErrorCode 的错误信息
        /// 100000	- 客户号为空
        /// 130003	- 关键词为空</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response13> AlibabaCnp4pKeywordListRelativewordAsync(string keyword, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.keyword.list.relativeword/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (keyword == null)
                        throw new System.ArgumentNullException("keyword");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(keyword, System.Globalization.CultureInfo.InvariantCulture)), "keyword");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response13>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response13);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>新增网销宝推广单元
        /// 新增网销宝推广单元
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.adgroup.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.adgroup.add&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="onlineState">推广单元上下线状态：0下线；1上线</param>
        /// <param name="bidPrice">推广单元默认出价，单位元</param>
        /// <param name="offerId">1688中文站offer产品信息id，具体获取指定用户offer列表可以从这个API获取：https://open.1688.com/doc/api/cn/api.htm?ns=cn.alibaba.open&amp;n=offer.getPublishOfferList&amp;v=1</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCnp4pAdgroup AlibabaCnp4pAdgroupAdd(long campaignId, int onlineState, double bidPrice, long offerId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pAdgroupAddAsync(campaignId, onlineState, bidPrice, offerId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>新增网销宝推广单元
        /// 新增网销宝推广单元
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.adgroup.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.adgroup.add&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="onlineState">推广单元上下线状态：0下线；1上线</param>
        /// <param name="bidPrice">推广单元默认出价，单位元</param>
        /// <param name="offerId">1688中文站offer产品信息id，具体获取指定用户offer列表可以从这个API获取：https://open.1688.com/doc/api/cn/api.htm?ns=cn.alibaba.open&amp;n=offer.getPublishOfferList&amp;v=1</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCnp4pAdgroup> AlibabaCnp4pAdgroupAddAsync(long campaignId, int onlineState, double bidPrice, long offerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.adgroup.add/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (campaignId == null)
                        throw new System.ArgumentNullException("campaignId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)), "campaignId");
                    }
                    if (onlineState == null)
                        throw new System.ArgumentNullException("onlineState");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(onlineState, System.Globalization.CultureInfo.InvariantCulture)), "onlineState");
                    }
                    if (bidPrice == null)
                        throw new System.ArgumentNullException("bidPrice");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(bidPrice, System.Globalization.CultureInfo.InvariantCulture)), "bidPrice");
                    }
                    if (offerId == null)
                        throw new System.ArgumentNullException("offerId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(offerId, System.Globalization.CultureInfo.InvariantCulture)), "offerId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCnp4pAdgroup>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCnp4pAdgroup);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取关键词相关性信息
        /// 获取关键词相关性及诊断建议
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.list.mlrscore-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.list.mlrscore&amp;v=1</summary>
        /// <returns>返回 ErrorCode 的错误信息
        /// 100000	- 客户号为空(未登录授权)
        /// 120000	- 推广单元id为空(参数传入推广单元id)
        /// 130000	- 关键词列表id为空(传入关键词id列表)
        /// 130002	- 关键词id列表size大于上限(传不超过关键词id上限列表)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response14 AlibabaCnp4pKeywordListMlrscore(long adGroupId, System.Collections.Generic.IEnumerable<string> keywordIdList)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pKeywordListMlrscoreAsync(adGroupId, keywordIdList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取关键词相关性信息
        /// 获取关键词相关性及诊断建议
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.list.mlrscore-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.list.mlrscore&amp;v=1</summary>
        /// <returns>返回 ErrorCode 的错误信息
        /// 100000	- 客户号为空(未登录授权)
        /// 120000	- 推广单元id为空(参数传入推广单元id)
        /// 130000	- 关键词列表id为空(传入关键词id列表)
        /// 130002	- 关键词id列表size大于上限(传不超过关键词id上限列表)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response14> AlibabaCnp4pKeywordListMlrscoreAsync(long adGroupId, System.Collections.Generic.IEnumerable<string> keywordIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.keyword.list.mlrscore/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (adGroupId == null)
                        throw new System.ArgumentNullException("adGroupId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(adGroupId, System.Globalization.CultureInfo.InvariantCulture)), "adGroupId");
                    }
                    if (keywordIdList == null)
                        throw new System.ArgumentNullException("keywordIdList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(keywordIdList, System.Globalization.CultureInfo.InvariantCulture)), "keywordIdList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response14>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response14);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取关键词推荐价格
        /// 获取关键词推荐价格
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.list.recommend.price-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.list.recommend.price&amp;v=1</summary>
        /// <param name="adGroupId">推广单元id</param>
        /// <param name="keywordIdList">关键词id列表</param>
        /// <param name="areaCode">投放地域码</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 100000	- 客户信息为空
        /// 100001	- 地域码为空
        /// 120000	- 推广单元为空
        /// 130000	- 关键词id为空
        /// 130002	- 关键词id列表size超过上限</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response15 AlibabaCnp4pKeywordListRecommendPrice(long adGroupId, System.Collections.Generic.IEnumerable<string> keywordIdList, string areaCode)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pKeywordListRecommendPriceAsync(adGroupId, keywordIdList, areaCode, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取关键词推荐价格
        /// 获取关键词推荐价格
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.list.recommend.price-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.list.recommend.price&amp;v=1</summary>
        /// <param name="adGroupId">推广单元id</param>
        /// <param name="keywordIdList">关键词id列表</param>
        /// <param name="areaCode">投放地域码</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 100000	- 客户信息为空
        /// 100001	- 地域码为空
        /// 120000	- 推广单元为空
        /// 130000	- 关键词id为空
        /// 130002	- 关键词id列表size超过上限</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response15> AlibabaCnp4pKeywordListRecommendPriceAsync(long adGroupId, System.Collections.Generic.IEnumerable<string> keywordIdList, string areaCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.keyword.list.recommend.price/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (adGroupId == null)
                        throw new System.ArgumentNullException("adGroupId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(adGroupId, System.Globalization.CultureInfo.InvariantCulture)), "adGroupId");
                    }
                    if (keywordIdList == null)
                        throw new System.ArgumentNullException("keywordIdList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(keywordIdList, System.Globalization.CultureInfo.InvariantCulture)), "keywordIdList");
                    }
                    if (areaCode == null)
                        throw new System.ArgumentNullException("areaCode");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(areaCode, System.Globalization.CultureInfo.InvariantCulture)), "areaCode");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response15>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response15);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>删除网销宝推广单元
        /// 删除网销宝推广单元
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.adgroup.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.adgroup.delete&amp;v=1</summary>
        /// <param name="adGroupId">单元id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCnp4pAdgroup AlibabaCnp4pAdgroupDelete(long adGroupId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pAdgroupDeleteAsync(adGroupId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除网销宝推广单元
        /// 删除网销宝推广单元
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.adgroup.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.adgroup.delete&amp;v=1</summary>
        /// <param name="adGroupId">单元id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCnp4pAdgroup> AlibabaCnp4pAdgroupDeleteAsync(long adGroupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.adgroup.delete/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (adGroupId == null)
                        throw new System.ArgumentNullException("adGroupId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(adGroupId, System.Globalization.CultureInfo.InvariantCulture)), "adGroupId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCnp4pAdgroup>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCnp4pAdgroup);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取网销宝计划列表
        /// 获取网销宝计划列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.list&amp;v=1</summary>
        /// <param name="campaignIdList">计划id列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response16 AlibabaCnp4pCampaignList(System.Collections.Generic.IEnumerable<string> campaignIdList = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pCampaignListAsync(campaignIdList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝计划列表
        /// 获取网销宝计划列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.list&amp;v=1</summary>
        /// <param name="campaignIdList">计划id列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response16> AlibabaCnp4pCampaignListAsync(System.Collections.Generic.IEnumerable<string> campaignIdList = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.campaign.list/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (campaignIdList != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(campaignIdList, System.Globalization.CultureInfo.InvariantCulture)), "campaignIdList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response16>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response16);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>更新网销宝推广计划投放时段
        /// 更新网销宝推广计划投放时段
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.schedule.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.schedule.update&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="schedule">计划投放时段，7*24小时分别用0、1代表暂停和投放。</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCnp4pCampaign AlibabaCnp4pCampaignScheduleUpdate(long campaignId, string schedule)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pCampaignScheduleUpdateAsync(campaignId, schedule, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新网销宝推广计划投放时段
        /// 更新网销宝推广计划投放时段
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.schedule.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.schedule.update&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="schedule">计划投放时段，7*24小时分别用0、1代表暂停和投放。</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCnp4pCampaign> AlibabaCnp4pCampaignScheduleUpdateAsync(long campaignId, string schedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.campaign.schedule.update/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (campaignId == null)
                        throw new System.ArgumentNullException("campaignId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)), "campaignId");
                    }
                    if (schedule == null)
                        throw new System.ArgumentNullException("schedule");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(schedule, System.Globalization.CultureInfo.InvariantCulture)), "schedule");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCnp4pCampaign>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCnp4pCampaign);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取可投放的地域列表
        /// 获取可投放的地域列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.areaList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.areaList&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response17 AlibabaCnp4pCampaignAreaList()
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pCampaignAreaListAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取可投放的地域列表
        /// 获取可投放的地域列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.areaList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.areaList&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response17> AlibabaCnp4pCampaignAreaListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.campaign.areaList/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response17>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response17);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取网销宝推广计划报表详情
        /// 获取网销宝推广计划报表详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.report.campaignEffect-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.report.campaignEffect&amp;v=1</summary>
        /// <param name="startTime">报表起始日期</param>
        /// <param name="endTime">报表截止日期</param>
        /// <param name="pageNo">分页起始页码，默认为1开始</param>
        /// <param name="pageSize">分页一页页数，最大一页200条</param>
        /// <param name="reportType">报表类型，为空则全部；site_in则为站内，site_out则为站外</param>
        /// <param name="campaignId">计划id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCnp4pReportCampaignEffectResult AlibabaCnp4pReportCampaignEffect(System.DateTimeOffset startTime, System.DateTimeOffset endTime, int pageNo, int pageSize, string reportType = null, long? campaignId = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pReportCampaignEffectAsync(startTime, endTime, pageNo, pageSize, reportType, campaignId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝推广计划报表详情
        /// 获取网销宝推广计划报表详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.report.campaignEffect-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.report.campaignEffect&amp;v=1</summary>
        /// <param name="startTime">报表起始日期</param>
        /// <param name="endTime">报表截止日期</param>
        /// <param name="pageNo">分页起始页码，默认为1开始</param>
        /// <param name="pageSize">分页一页页数，最大一页200条</param>
        /// <param name="reportType">报表类型，为空则全部；site_in则为站内，site_out则为站外</param>
        /// <param name="campaignId">计划id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCnp4pReportCampaignEffectResult> AlibabaCnp4pReportCampaignEffectAsync(System.DateTimeOffset startTime, System.DateTimeOffset endTime, int pageNo, int pageSize, string reportType = null, long? campaignId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.report.campaignEffect/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (startTime == null)
                        throw new System.ArgumentNullException("startTime");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture)), "startTime");
                    }
                    if (endTime == null)
                        throw new System.ArgumentNullException("endTime");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture)), "endTime");
                    }
                    if (pageNo == null)
                        throw new System.ArgumentNullException("pageNo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageNo, System.Globalization.CultureInfo.InvariantCulture)), "pageNo");
                    }
                    if (pageSize == null)
                        throw new System.ArgumentNullException("pageSize");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    if (reportType != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(reportType, System.Globalization.CultureInfo.InvariantCulture)), "reportType");
                    }
                    if (campaignId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)), "campaignId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCnp4pReportCampaignEffectResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCnp4pReportCampaignEffectResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取网销宝关键词质量分
        /// 获取网销宝关键词质量分
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.quality.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.quality.list&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response18 AlibabaCnp4pKeywordQualityList(long adGroupId, System.Collections.Generic.IEnumerable<string> keywordIdList)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pKeywordQualityListAsync(adGroupId, keywordIdList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝关键词质量分
        /// 获取网销宝关键词质量分
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.quality.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.quality.list&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response18> AlibabaCnp4pKeywordQualityListAsync(long adGroupId, System.Collections.Generic.IEnumerable<string> keywordIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.keyword.quality.list/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (adGroupId == null)
                        throw new System.ArgumentNullException("adGroupId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(adGroupId, System.Globalization.CultureInfo.InvariantCulture)), "adGroupId");
                    }
                    if (keywordIdList == null)
                        throw new System.ArgumentNullException("keywordIdList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(keywordIdList, System.Globalization.CultureInfo.InvariantCulture)), "keywordIdList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response18>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response18);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取网销宝指定推广单元的推荐词
        /// 获取网销宝指定推广单元的推荐词
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.recommend.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.recommend.list&amp;v=1</summary>
        /// <param name="pageNo">分页页码，从1开始</param>
        /// <param name="pageSize">分页页条数，最多10条</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response19 AlibabaCnp4pKeywordRecommendList(long adGroupId, int pageNo, int pageSize)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pKeywordRecommendListAsync(adGroupId, pageNo, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝指定推广单元的推荐词
        /// 获取网销宝指定推广单元的推荐词
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.recommend.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.recommend.list&amp;v=1</summary>
        /// <param name="pageNo">分页页码，从1开始</param>
        /// <param name="pageSize">分页页条数，最多10条</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response19> AlibabaCnp4pKeywordRecommendListAsync(long adGroupId, int pageNo, int pageSize, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.keyword.recommend.list/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (adGroupId == null)
                        throw new System.ArgumentNullException("adGroupId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(adGroupId, System.Globalization.CultureInfo.InvariantCulture)), "adGroupId");
                    }
                    if (pageNo == null)
                        throw new System.ArgumentNullException("pageNo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageNo, System.Globalization.CultureInfo.InvariantCulture)), "pageNo");
                    }
                    if (pageSize == null)
                        throw new System.ArgumentNullException("pageSize");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response19>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response19);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>根据关键词查询联盟offer列表
        /// 根据关键词查询联盟offer列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.union.offerbyquery.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.union.offerbyquery.list&amp;v=1</summary>
        /// <param name="unionPid">联盟推广位ID</param>
        /// <param name="query">查询关键词</param>
        /// <param name="requestIp">请求者的IP</param>
        /// <param name="requestUserAgent">请求者的UA</param>
        /// <param name="pageNo">分页页码，从1开始</param>
        /// <param name="pageSize">分页页条数，最大20条</param>
        /// <param name="requestReferer">请求者的Referer</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 77703	- 该用户不是联盟用户(联系联盟系统管理员，加入联盟平台)
        /// 88804	- 请求的数据起始页码为1
        /// 150001	- 联盟pid无效
        /// 150002	- 请求ip无效
        /// 150003	- 请求query无效
        /// 150004	- 请求useragent无效
        /// 150005	- 请求页面条数超出限制</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response20 AlibabaCnp4pUnionOfferbyqueryList(string unionPid, string query, string requestIp, string requestUserAgent, int pageNo, int pageSize, string requestReferer = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pUnionOfferbyqueryListAsync(unionPid, query, requestIp, requestUserAgent, pageNo, pageSize, requestReferer, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据关键词查询联盟offer列表
        /// 根据关键词查询联盟offer列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.union.offerbyquery.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.union.offerbyquery.list&amp;v=1</summary>
        /// <param name="unionPid">联盟推广位ID</param>
        /// <param name="query">查询关键词</param>
        /// <param name="requestIp">请求者的IP</param>
        /// <param name="requestUserAgent">请求者的UA</param>
        /// <param name="pageNo">分页页码，从1开始</param>
        /// <param name="pageSize">分页页条数，最大20条</param>
        /// <param name="requestReferer">请求者的Referer</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 77703	- 该用户不是联盟用户(联系联盟系统管理员，加入联盟平台)
        /// 88804	- 请求的数据起始页码为1
        /// 150001	- 联盟pid无效
        /// 150002	- 请求ip无效
        /// 150003	- 请求query无效
        /// 150004	- 请求useragent无效
        /// 150005	- 请求页面条数超出限制</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response20> AlibabaCnp4pUnionOfferbyqueryListAsync(string unionPid, string query, string requestIp, string requestUserAgent, int pageNo, int pageSize, string requestReferer = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.union.offerbyquery.list/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (unionPid == null)
                        throw new System.ArgumentNullException("unionPid");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(unionPid, System.Globalization.CultureInfo.InvariantCulture)), "unionPid");
                    }
                    if (query == null)
                        throw new System.ArgumentNullException("query");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture)), "query");
                    }
                    if (requestIp == null)
                        throw new System.ArgumentNullException("requestIp");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(requestIp, System.Globalization.CultureInfo.InvariantCulture)), "requestIp");
                    }
                    if (requestUserAgent == null)
                        throw new System.ArgumentNullException("requestUserAgent");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(requestUserAgent, System.Globalization.CultureInfo.InvariantCulture)), "requestUserAgent");
                    }
                    if (pageNo == null)
                        throw new System.ArgumentNullException("pageNo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageNo, System.Globalization.CultureInfo.InvariantCulture)), "pageNo");
                    }
                    if (pageSize == null)
                        throw new System.ArgumentNullException("pageSize");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    if (requestReferer != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(requestReferer, System.Globalization.CultureInfo.InvariantCulture)), "requestReferer");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response20>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response20);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取推广单元审核状态
        /// 获取推广单元审核状态
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.audit.get.creative.status-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.audit.get.creative.status&amp;v=1</summary>
        /// <param name="adGroupId">推广单元id</param>
        /// <returns>返回审核状态对象返回 ErrorCode 的错误信息
        /// 120000	- 推广单元为空(参数中传入推广单元id，eg=100234)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response21 AlibabaCnp4pAuditGetCreativeStatus(long adGroupId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pAuditGetCreativeStatusAsync(adGroupId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取推广单元审核状态
        /// 获取推广单元审核状态
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.audit.get.creative.status-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.audit.get.creative.status&amp;v=1</summary>
        /// <param name="adGroupId">推广单元id</param>
        /// <returns>返回审核状态对象返回 ErrorCode 的错误信息
        /// 120000	- 推广单元为空(参数中传入推广单元id，eg=100234)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response21> AlibabaCnp4pAuditGetCreativeStatusAsync(long adGroupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.audit.get.creative.status/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (adGroupId == null)
                        throw new System.ArgumentNullException("adGroupId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(adGroupId, System.Globalization.CultureInfo.InvariantCulture)), "adGroupId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response21>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response21);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>计划、推广单元等实时消耗
        /// 获取客户计划、推官单元、关键词等粒度实时消耗信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.settle.campaignRealTimeCost-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.settle.campaignRealTimeCost&amp;v=1</summary>
        /// <param name="type">类型(1计划；2推广单元)</param>
        /// <param name="objectId">类型对象id</param>
        /// <returns>结算消耗返回 ErrorCode 的错误信息
        /// 88805	- 不支持的查询消耗类型（1：计划；2：推广单元）
        /// 88806	- 参数中包含暂未开放的产品线id信息
        /// 110000	- 查询参数id为空</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response22 AlibabaCnp4pSettleCampaignRealTimeCost(int type, long objectId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pSettleCampaignRealTimeCostAsync(type, objectId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>计划、推广单元等实时消耗
        /// 获取客户计划、推官单元、关键词等粒度实时消耗信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.settle.campaignRealTimeCost-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.settle.campaignRealTimeCost&amp;v=1</summary>
        /// <param name="type">类型(1计划；2推广单元)</param>
        /// <param name="objectId">类型对象id</param>
        /// <returns>结算消耗返回 ErrorCode 的错误信息
        /// 88805	- 不支持的查询消耗类型（1：计划；2：推广单元）
        /// 88806	- 参数中包含暂未开放的产品线id信息
        /// 110000	- 查询参数id为空</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response22> AlibabaCnp4pSettleCampaignRealTimeCostAsync(int type, long objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.settle.campaignRealTimeCost/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (type == null)
                        throw new System.ArgumentNullException("type");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture)), "type");
                    }
                    if (objectId == null)
                        throw new System.ArgumentNullException("objectId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)), "objectId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response22>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response22);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>更新网销宝推广单元
        /// 更新网销宝推广单元
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.adgroup.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.adgroup.update&amp;v=1</summary>
        /// <param name="campaignId">推广计划id</param>
        /// <param name="adGroupId">推广单元id</param>
        /// <param name="onlineState">推广单元上下线状态：0下线；1上线</param>
        /// <param name="bidPrice">推广单元默认出价，单位元</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCnp4pAdgroup AlibabaCnp4pAdgroupUpdate(long campaignId, long adGroupId, int? onlineState = null, double? bidPrice = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pAdgroupUpdateAsync(campaignId, adGroupId, onlineState, bidPrice, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新网销宝推广单元
        /// 更新网销宝推广单元
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.adgroup.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.adgroup.update&amp;v=1</summary>
        /// <param name="campaignId">推广计划id</param>
        /// <param name="adGroupId">推广单元id</param>
        /// <param name="onlineState">推广单元上下线状态：0下线；1上线</param>
        /// <param name="bidPrice">推广单元默认出价，单位元</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCnp4pAdgroup> AlibabaCnp4pAdgroupUpdateAsync(long campaignId, long adGroupId, int? onlineState = null, double? bidPrice = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.adgroup.update/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (campaignId == null)
                        throw new System.ArgumentNullException("campaignId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)), "campaignId");
                    }
                    if (adGroupId == null)
                        throw new System.ArgumentNullException("adGroupId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(adGroupId, System.Globalization.CultureInfo.InvariantCulture)), "adGroupId");
                    }
                    if (onlineState != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(onlineState, System.Globalization.CultureInfo.InvariantCulture)), "onlineState");
                    }
                    if (bidPrice != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(bidPrice, System.Globalization.CultureInfo.InvariantCulture)), "bidPrice");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCnp4pAdgroup>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCnp4pAdgroup);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取网销宝账户实时消耗，单位：元
        /// 获取网销宝账户实时消耗，单位：元
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.account.realtimeCost-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.account.realtimeCost&amp;v=1</summary>
        /// <returns>网销宝客户当天实时消耗，单位：元</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response23 AlibabaCnp4pAccountRealtimeCost()
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pAccountRealtimeCostAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝账户实时消耗，单位：元
        /// 获取网销宝账户实时消耗，单位：元
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.account.realtimeCost-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.account.realtimeCost&amp;v=1</summary>
        /// <returns>网销宝客户当天实时消耗，单位：元</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response23> AlibabaCnp4pAccountRealtimeCostAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.account.realtimeCost/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response23>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response23);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>添加网销宝关键词
        /// 添加网销宝关键词
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.add&amp;v=1</summary>
        /// <param name="adGroupId">推广单元id</param>
        /// <param name="keywords">关键词列表，关键词和出价json字符串，keyword:词，不能有一些特殊字符。bidPrice：出价，以“元”为单位，保留两位小数，不能大于日限额。</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 130001	- 关键词重复
        /// 130002	- 1个单元下的关键词数量不能超过200个
        /// 130003	- 关键词不能为空字符
        /// 130004	- 关键词最长为20个汉字或40个英文字符
        /// 130005	- 关键词与已有的关键词冲突
        /// 130006	- 关键词中含有特殊字符
        /// 130007	- 关键词触犯黑名单规则
        /// 130008	- 关键词触犯注册商标规则
        /// 130009	- 关键词含侵犯他人合法权益词汇
        /// 130010	- 关键词出价必须大于0
        /// 130011	- 关键词的出价不能超过99.9
        /// 130012	- 关键词的出价不能超过计划日消耗上限
        /// 130013	- 关键词对应推广计划id为空
        /// 130014	- 关键词对应推广计划id无效或者不属于该用户
        /// 130015	- 关键词对应推广单元id为空
        /// 130016	- 关键词对应推广单元id无效或者不属于该用户
        /// 130017	- 关键词质量分过差，不建议添加
        /// 130018	- 关键词不存在
        /// 130019	- 关键词查询质量分最大批次为10
        /// 130020	- 关键词查询推荐词最大批次为10</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCnp4pKeywordAddResult AlibabaCnp4pKeywordAdd(long adGroupId, System.Collections.Generic.IEnumerable<string> keywords)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pKeywordAddAsync(adGroupId, keywords, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>添加网销宝关键词
        /// 添加网销宝关键词
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.add&amp;v=1</summary>
        /// <param name="adGroupId">推广单元id</param>
        /// <param name="keywords">关键词列表，关键词和出价json字符串，keyword:词，不能有一些特殊字符。bidPrice：出价，以“元”为单位，保留两位小数，不能大于日限额。</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 130001	- 关键词重复
        /// 130002	- 1个单元下的关键词数量不能超过200个
        /// 130003	- 关键词不能为空字符
        /// 130004	- 关键词最长为20个汉字或40个英文字符
        /// 130005	- 关键词与已有的关键词冲突
        /// 130006	- 关键词中含有特殊字符
        /// 130007	- 关键词触犯黑名单规则
        /// 130008	- 关键词触犯注册商标规则
        /// 130009	- 关键词含侵犯他人合法权益词汇
        /// 130010	- 关键词出价必须大于0
        /// 130011	- 关键词的出价不能超过99.9
        /// 130012	- 关键词的出价不能超过计划日消耗上限
        /// 130013	- 关键词对应推广计划id为空
        /// 130014	- 关键词对应推广计划id无效或者不属于该用户
        /// 130015	- 关键词对应推广单元id为空
        /// 130016	- 关键词对应推广单元id无效或者不属于该用户
        /// 130017	- 关键词质量分过差，不建议添加
        /// 130018	- 关键词不存在
        /// 130019	- 关键词查询质量分最大批次为10
        /// 130020	- 关键词查询推荐词最大批次为10</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCnp4pKeywordAddResult> AlibabaCnp4pKeywordAddAsync(long adGroupId, System.Collections.Generic.IEnumerable<string> keywords, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.keyword.add/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (adGroupId == null)
                        throw new System.ArgumentNullException("adGroupId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(adGroupId, System.Globalization.CultureInfo.InvariantCulture)), "adGroupId");
                    }
                    if (keywords == null)
                        throw new System.ArgumentNullException("keywords");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(keywords, System.Globalization.CultureInfo.InvariantCulture)), "keywords");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCnp4pKeywordAddResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCnp4pKeywordAddResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>更新网销宝推广计划投放地域
        /// 更新网销宝推广计划投放地域
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.area.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.area.update&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="promoteArea">计划投放地域，全部则为“0”，多个以英文逗号&amp;quot;,分隔&amp;quot;</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCnp4pCampaign AlibabaCnp4pCampaignAreaUpdate(long campaignId, string promoteArea)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pCampaignAreaUpdateAsync(campaignId, promoteArea, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新网销宝推广计划投放地域
        /// 更新网销宝推广计划投放地域
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.area.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.area.update&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="promoteArea">计划投放地域，全部则为“0”，多个以英文逗号&amp;quot;,分隔&amp;quot;</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCnp4pCampaign> AlibabaCnp4pCampaignAreaUpdateAsync(long campaignId, string promoteArea, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.campaign.area.update/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (campaignId == null)
                        throw new System.ArgumentNullException("campaignId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)), "campaignId");
                    }
                    if (promoteArea == null)
                        throw new System.ArgumentNullException("promoteArea");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(promoteArea, System.Globalization.CultureInfo.InvariantCulture)), "promoteArea");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCnp4pCampaign>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCnp4pCampaign);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取网销宝推广单元报表详情
        /// 获取网销宝推广单元报表详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.report.adGroupEffect-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.report.adGroupEffect&amp;v=1</summary>
        /// <param name="startTime">报表起始日期</param>
        /// <param name="endTime">报表截止日期</param>
        /// <param name="campaignId">推广计划id</param>
        /// <param name="pageNo">分页起始页码，默认为1开始</param>
        /// <param name="pageSize">分页一页页数，最大一页200条</param>
        /// <param name="adGroupId">推广单元id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCnp4pReportAdGroupEffectResult AlibabaCnp4pReportAdGroupEffect(System.DateTimeOffset startTime, System.DateTimeOffset endTime, long campaignId, int pageNo, int pageSize, long? adGroupId = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pReportAdGroupEffectAsync(startTime, endTime, campaignId, pageNo, pageSize, adGroupId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝推广单元报表详情
        /// 获取网销宝推广单元报表详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.report.adGroupEffect-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.report.adGroupEffect&amp;v=1</summary>
        /// <param name="startTime">报表起始日期</param>
        /// <param name="endTime">报表截止日期</param>
        /// <param name="campaignId">推广计划id</param>
        /// <param name="pageNo">分页起始页码，默认为1开始</param>
        /// <param name="pageSize">分页一页页数，最大一页200条</param>
        /// <param name="adGroupId">推广单元id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCnp4pReportAdGroupEffectResult> AlibabaCnp4pReportAdGroupEffectAsync(System.DateTimeOffset startTime, System.DateTimeOffset endTime, long campaignId, int pageNo, int pageSize, long? adGroupId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.report.adGroupEffect/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (startTime == null)
                        throw new System.ArgumentNullException("startTime");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture)), "startTime");
                    }
                    if (endTime == null)
                        throw new System.ArgumentNullException("endTime");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture)), "endTime");
                    }
                    if (campaignId == null)
                        throw new System.ArgumentNullException("campaignId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)), "campaignId");
                    }
                    if (pageNo == null)
                        throw new System.ArgumentNullException("pageNo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageNo, System.Globalization.CultureInfo.InvariantCulture)), "pageNo");
                    }
                    if (pageSize == null)
                        throw new System.ArgumentNullException("pageSize");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    if (adGroupId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(adGroupId, System.Globalization.CultureInfo.InvariantCulture)), "adGroupId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCnp4pReportAdGroupEffectResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCnp4pReportAdGroupEffectResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>添加网销宝推广计划
        /// 添加网销宝推广计划
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.add&amp;v=1</summary>
        /// <param name="title">计划标题</param>
        /// <param name="budget">计划预算</param>
        /// <param name="onlineStatus">计划状态，0为暂停；1为推广中；</param>
        /// <param name="promoteArea">计划投放地域，全部则为“0”，多个以英文逗号&amp;quot;,分隔&amp;quot;</param>
        /// <param name="schedule">计划投放时段，7*24小时分别用0、1代表暂停和投放。</param>
        /// <param name="cositeFlag">计划是否支持站外定向推广：0不支持，1支持</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCnp4pCampaign AlibabaCnp4pCampaignAdd(string title, double budget, int onlineStatus, string promoteArea = null, string schedule = null, int? cositeFlag = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pCampaignAddAsync(title, budget, onlineStatus, promoteArea, schedule, cositeFlag, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>添加网销宝推广计划
        /// 添加网销宝推广计划
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.add-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.add&amp;v=1</summary>
        /// <param name="title">计划标题</param>
        /// <param name="budget">计划预算</param>
        /// <param name="onlineStatus">计划状态，0为暂停；1为推广中；</param>
        /// <param name="promoteArea">计划投放地域，全部则为“0”，多个以英文逗号&amp;quot;,分隔&amp;quot;</param>
        /// <param name="schedule">计划投放时段，7*24小时分别用0、1代表暂停和投放。</param>
        /// <param name="cositeFlag">计划是否支持站外定向推广：0不支持，1支持</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCnp4pCampaign> AlibabaCnp4pCampaignAddAsync(string title, double budget, int onlineStatus, string promoteArea = null, string schedule = null, int? cositeFlag = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.campaign.add/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (title == null)
                        throw new System.ArgumentNullException("title");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)), "title");
                    }
                    if (budget == null)
                        throw new System.ArgumentNullException("budget");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(budget, System.Globalization.CultureInfo.InvariantCulture)), "budget");
                    }
                    if (onlineStatus == null)
                        throw new System.ArgumentNullException("onlineStatus");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(onlineStatus, System.Globalization.CultureInfo.InvariantCulture)), "onlineStatus");
                    }
                    if (promoteArea != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(promoteArea, System.Globalization.CultureInfo.InvariantCulture)), "promoteArea");
                    }
                    if (schedule != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(schedule, System.Globalization.CultureInfo.InvariantCulture)), "schedule");
                    }
                    if (cositeFlag != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(cositeFlag, System.Globalization.CultureInfo.InvariantCulture)), "cositeFlag");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCnp4pCampaign>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCnp4pCampaign);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>删除网销宝推广关键词
        /// 删除网销宝推广关键词
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.delete&amp;v=1</summary>
        /// <param name="campaignId">推广计划id</param>
        /// <param name="keywordIdList">关键词id列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response12 AlibabaCnp4pKeywordDelete(long campaignId, System.Collections.Generic.IEnumerable<string> keywordIdList)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pKeywordDeleteAsync(campaignId, keywordIdList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除网销宝推广关键词
        /// 删除网销宝推广关键词
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.delete&amp;v=1</summary>
        /// <param name="campaignId">推广计划id</param>
        /// <param name="keywordIdList">关键词id列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response12> AlibabaCnp4pKeywordDeleteAsync(long campaignId, System.Collections.Generic.IEnumerable<string> keywordIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.keyword.delete/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (campaignId == null)
                        throw new System.ArgumentNullException("campaignId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)), "campaignId");
                    }
                    if (keywordIdList == null)
                        throw new System.ArgumentNullException("keywordIdList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(keywordIdList, System.Globalization.CultureInfo.InvariantCulture)), "keywordIdList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response12>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response12);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>根据adGroupId获取网销宝关键词列表
        /// 根据adGroupId获取网销宝关键词列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.byadgroupid.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.byadgroupid.list&amp;v=1</summary>
        /// <param name="adGroupId">单元id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response12 AlibabaCnp4pKeywordByadgroupidList(long adGroupId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pKeywordByadgroupidListAsync(adGroupId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据adGroupId获取网销宝关键词列表
        /// 根据adGroupId获取网销宝关键词列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.byadgroupid.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.byadgroupid.list&amp;v=1</summary>
        /// <param name="adGroupId">单元id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response12> AlibabaCnp4pKeywordByadgroupidListAsync(long adGroupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.keyword.byadgroupid.list/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (adGroupId == null)
                        throw new System.ArgumentNullException("adGroupId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(adGroupId, System.Globalization.CultureInfo.InvariantCulture)), "adGroupId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response12>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response12);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>更新网销宝推广关键词价格
        /// 更新网销宝推广关键词价格
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.price.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.price.update&amp;v=1</summary>
        /// <param name="keywords">关键词列表，由keywordId、adGroupId、bidPrice组成的json字符串，其中keywordId为关键词id，adGroupId为单元id，bidPrice出价，以“元”为单位，保留一位小数，不能大于日限额。</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response12 AlibabaCnp4pKeywordPriceUpdate(System.Collections.Generic.IEnumerable<string> keywords)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pKeywordPriceUpdateAsync(keywords, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新网销宝推广关键词价格
        /// 更新网销宝推广关键词价格
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.keyword.price.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.keyword.price.update&amp;v=1</summary>
        /// <param name="keywords">关键词列表，由keywordId、adGroupId、bidPrice组成的json字符串，其中keywordId为关键词id，adGroupId为单元id，bidPrice出价，以“元”为单位，保留一位小数，不能大于日限额。</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response12> AlibabaCnp4pKeywordPriceUpdateAsync(System.Collections.Generic.IEnumerable<string> keywords, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.keyword.price.update/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (keywords == null)
                        throw new System.ArgumentNullException("keywords");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(keywords, System.Globalization.CultureInfo.InvariantCulture)), "keywords");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response12>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response12);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取网销宝客户账户余额
        /// 获取网销宝客户账户余额
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.account.balance-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.account.balance&amp;v=1</summary>
        /// <returns>网销宝账户余额，单位为元</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response24 AlibabaCnp4pAccountBalance()
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pAccountBalanceAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝客户账户余额
        /// 获取网销宝客户账户余额
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.account.balance-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.account.balance&amp;v=1</summary>
        /// <returns>网销宝账户余额，单位为元</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response24> AlibabaCnp4pAccountBalanceAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.account.balance/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response24>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response24);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取资质审核状态
        /// 获取资质审核状态
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.audit.get.certificate.status-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.audit.get.certificate.status&amp;v=1</summary>
        /// <returns>返回审核状态对象</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response21 AlibabaCnp4pAuditGetCertificateStatus()
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pAuditGetCertificateStatusAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取资质审核状态
        /// 获取资质审核状态
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.audit.get.certificate.status-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.audit.get.certificate.status&amp;v=1</summary>
        /// <returns>返回审核状态对象</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response21> AlibabaCnp4pAuditGetCertificateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.audit.get.certificate.status/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response21>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response21);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>更新网销宝计划日预算
        /// 更新网销宝计划日预算
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.budget.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.budget.update&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="budget">计划预算</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCnp4pCampaign AlibabaCnp4pCampaignBudgetUpdate(long campaignId, double budget)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pCampaignBudgetUpdateAsync(campaignId, budget, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新网销宝计划日预算
        /// 更新网销宝计划日预算
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.campaign.budget.update-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.campaign.budget.update&amp;v=1</summary>
        /// <param name="campaignId">计划id</param>
        /// <param name="budget">计划预算</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCnp4pCampaign> AlibabaCnp4pCampaignBudgetUpdateAsync(long campaignId, double budget, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.campaign.budget.update/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (campaignId == null)
                        throw new System.ArgumentNullException("campaignId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)), "campaignId");
                    }
                    if (budget == null)
                        throw new System.ArgumentNullException("budget");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(budget, System.Globalization.CultureInfo.InvariantCulture)), "budget");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCnp4pCampaign>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCnp4pCampaign);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取网销宝客户报表详情
        /// 获取网销宝客户报表详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.report.custEffect-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.report.custEffect&amp;v=1</summary>
        /// <param name="startTime">报表起始日期</param>
        /// <param name="endTime">报表截止日期</param>
        /// <param name="pageNo">分页起始页码，默认为1开始</param>
        /// <param name="pageSize">分页一页页数，最大一页200条</param>
        /// <param name="reportType">报表类型，为空则全部；site_in则为站内，site_out则为站外</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCnp4pReportCustEffectResult AlibabaCnp4pReportCustEffect(System.DateTimeOffset startTime, System.DateTimeOffset endTime, int pageNo, int pageSize, string reportType = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCnp4pReportCustEffectAsync(startTime, endTime, pageNo, pageSize, reportType, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取网销宝客户报表详情
        /// 获取网销宝客户报表详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cnp4p.report.custEffect-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cnp4p.report.custEffect&amp;v=1</summary>
        /// <param name="startTime">报表起始日期</param>
        /// <param name="endTime">报表截止日期</param>
        /// <param name="pageNo">分页起始页码，默认为1开始</param>
        /// <param name="pageSize">分页一页页数，最大一页200条</param>
        /// <param name="reportType">报表类型，为空则全部；site_in则为站内，site_out则为站外</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCnp4pReportCustEffectResult> AlibabaCnp4pReportCustEffectAsync(System.DateTimeOffset startTime, System.DateTimeOffset endTime, int pageNo, int pageSize, string reportType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cnp4p.report.custEffect/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (startTime == null)
                        throw new System.ArgumentNullException("startTime");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture)), "startTime");
                    }
                    if (endTime == null)
                        throw new System.ArgumentNullException("endTime");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture)), "endTime");
                    }
                    if (pageNo == null)
                        throw new System.ArgumentNullException("pageNo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageNo, System.Globalization.CultureInfo.InvariantCulture)), "pageNo");
                    }
                    if (pageSize == null)
                        throw new System.ArgumentNullException("pageSize");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    if (reportType != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(reportType, System.Globalization.CultureInfo.InvariantCulture)), "reportType");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCnp4pReportCustEffectResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCnp4pReportCustEffectResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取联盟结算明细列表(按月)
        /// 获取联盟结算明细列表(按月)
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listCPSSettleInfoDetail-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listCPSSettleInfoDetail&amp;v=1</summary>
        /// <param name="pageNo">页偏移量</param>
        /// <param name="pageSize">分页大小</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 88804	- 请求的数据页条数超过系统限制1-200
        /// 88807	- 请求的数据起始页码为1</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCpsListCPSSettleInfoDetailResult AlibabaCpsListCPSSettleInfoDetail(int pageNo, int pageSize)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCpsListCPSSettleInfoDetailAsync(pageNo, pageSize, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取联盟结算明细列表(按月)
        /// 获取联盟结算明细列表(按月)
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listCPSSettleInfoDetail-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listCPSSettleInfoDetail&amp;v=1</summary>
        /// <param name="pageNo">页偏移量</param>
        /// <param name="pageSize">分页大小</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 88804	- 请求的数据页条数超过系统限制1-200
        /// 88807	- 请求的数据起始页码为1</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCpsListCPSSettleInfoDetailResult> AlibabaCpsListCPSSettleInfoDetailAsync(int pageNo, int pageSize, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cps.listCPSSettleInfoDetail/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (pageNo == null)
                        throw new System.ArgumentNullException("pageNo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageNo, System.Globalization.CultureInfo.InvariantCulture)), "pageNo");
                    }
                    if (pageSize == null)
                        throw new System.ArgumentNullException("pageSize");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCpsListCPSSettleInfoDetailResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCpsListCPSSettleInfoDetailResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取选品库组信息
        /// 获取选品库组信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listGroupInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listGroupInfo&amp;v=1</summary>
        /// <param name="groupId">组id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response4 AlibabaCpsListGroupInfo(long? groupId = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCpsListGroupInfoAsync(groupId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取选品库组信息
        /// 获取选品库组信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listGroupInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listGroupInfo&amp;v=1</summary>
        /// <param name="groupId">组id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response4> AlibabaCpsListGroupInfoAsync(long? groupId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cps.listGroupInfo/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (groupId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)), "groupId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response4);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取offer价格雷达信息列表
        /// 获取offer价格雷达信息列表
        /// 
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listPriceRadarOffer-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listPriceRadarOffer&amp;v=1</summary>
        /// <param name="offerIds">offerId列表</param>
        /// <returns>结果返回</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response4 AlibabaCpsListPriceRadarOffer(System.Collections.Generic.IEnumerable<long> offerIds)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCpsListPriceRadarOfferAsync(offerIds, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取offer价格雷达信息列表
        /// 获取offer价格雷达信息列表
        /// 
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listPriceRadarOffer-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listPriceRadarOffer&amp;v=1</summary>
        /// <param name="offerIds">offerId列表</param>
        /// <returns>结果返回</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response4> AlibabaCpsListPriceRadarOfferAsync(System.Collections.Generic.IEnumerable<long> offerIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cps.listPriceRadarOffer/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (offerIds == null)
                        throw new System.ArgumentNullException("offerIds");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(offerIds, System.Globalization.CultureInfo.InvariantCulture)), "offerIds");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response4);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>网盟账单列表查询(下线，请使用【联盟账单列表查询】接口)
        /// 该接口后期会下线，仅老网盟用户使用，新接入不能使用该接口
        /// 
        /// 新接入请使用以下接口
        /// 联盟账单列表查询alibaba.cps.tradeBillList
        /// 
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.webUnionTradeBillList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.webUnionTradeBillList&amp;v=1</summary>
        /// <param name="queryOrderType">订单状态查询类型</param>
        /// <param name="queryTimeType">订单时间查询类型</param>
        /// <param name="queryStartTime">查询开始时间</param>
        /// <param name="queryEndTime">查询结束时间</param>
        /// <param name="pageNo">页偏移量</param>
        /// <param name="pageSize">页大小</param>
        /// <param name="webUnionKey">网盟appKey</param>
        /// <param name="orderState">订单状态</param>
        /// <param name="settleState">结算状态</param>
        /// <param name="rightsState">维权状态</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 160001	- 无效网盟appKey
        /// 150005	- 请求页面大小超出限制</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCpsWebUnionTradeBillListResult AlibabaCpsWebUnionTradeBillList(string queryOrderType, string queryTimeType, string queryStartTime, string queryEndTime, int pageNo, int pageSize, string webUnionKey = null, int? orderState = null, int? settleState = null, int? rightsState = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCpsWebUnionTradeBillListAsync(queryOrderType, queryTimeType, queryStartTime, queryEndTime, pageNo, pageSize, webUnionKey, orderState, settleState, rightsState, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>网盟账单列表查询(下线，请使用【联盟账单列表查询】接口)
        /// 该接口后期会下线，仅老网盟用户使用，新接入不能使用该接口
        /// 
        /// 新接入请使用以下接口
        /// 联盟账单列表查询alibaba.cps.tradeBillList
        /// 
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.webUnionTradeBillList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.webUnionTradeBillList&amp;v=1</summary>
        /// <param name="queryOrderType">订单状态查询类型</param>
        /// <param name="queryTimeType">订单时间查询类型</param>
        /// <param name="queryStartTime">查询开始时间</param>
        /// <param name="queryEndTime">查询结束时间</param>
        /// <param name="pageNo">页偏移量</param>
        /// <param name="pageSize">页大小</param>
        /// <param name="webUnionKey">网盟appKey</param>
        /// <param name="orderState">订单状态</param>
        /// <param name="settleState">结算状态</param>
        /// <param name="rightsState">维权状态</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 160001	- 无效网盟appKey
        /// 150005	- 请求页面大小超出限制</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCpsWebUnionTradeBillListResult> AlibabaCpsWebUnionTradeBillListAsync(string queryOrderType, string queryTimeType, string queryStartTime, string queryEndTime, int pageNo, int pageSize, string webUnionKey = null, int? orderState = null, int? settleState = null, int? rightsState = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cps.webUnionTradeBillList/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (queryOrderType == null)
                        throw new System.ArgumentNullException("queryOrderType");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(queryOrderType, System.Globalization.CultureInfo.InvariantCulture)), "queryOrderType");
                    }
                    if (queryTimeType == null)
                        throw new System.ArgumentNullException("queryTimeType");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(queryTimeType, System.Globalization.CultureInfo.InvariantCulture)), "queryTimeType");
                    }
                    if (queryStartTime == null)
                        throw new System.ArgumentNullException("queryStartTime");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(queryStartTime, System.Globalization.CultureInfo.InvariantCulture)), "queryStartTime");
                    }
                    if (queryEndTime == null)
                        throw new System.ArgumentNullException("queryEndTime");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(queryEndTime, System.Globalization.CultureInfo.InvariantCulture)), "queryEndTime");
                    }
                    if (pageNo == null)
                        throw new System.ArgumentNullException("pageNo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageNo, System.Globalization.CultureInfo.InvariantCulture)), "pageNo");
                    }
                    if (pageSize == null)
                        throw new System.ArgumentNullException("pageSize");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    if (webUnionKey != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(webUnionKey, System.Globalization.CultureInfo.InvariantCulture)), "webUnionKey");
                    }
                    if (orderState != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderState, System.Globalization.CultureInfo.InvariantCulture)), "orderState");
                    }
                    if (settleState != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(settleState, System.Globalization.CultureInfo.InvariantCulture)), "settleState");
                    }
                    if (rightsState != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(rightsState, System.Globalization.CultureInfo.InvariantCulture)), "rightsState");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCpsWebUnionTradeBillListResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCpsWebUnionTradeBillListResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取联盟活动列表
        /// 获取联盟活动列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listActivityPageQuery-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listActivityPageQuery&amp;v=1</summary>
        /// <returns>返回 ErrorCode 的错误信息
        /// 88804	- 请求的数据页条数超过系统限制1-200
        /// 88807	- 请求的数据起始页码为1</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCpsListActivityPageQueryResult AlibabaCpsListActivityPageQuery()
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCpsListActivityPageQueryAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取联盟活动列表
        /// 获取联盟活动列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listActivityPageQuery-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listActivityPageQuery&amp;v=1</summary>
        /// <returns>返回 ErrorCode 的错误信息
        /// 88804	- 请求的数据页条数超过系统限制1-200
        /// 88807	- 请求的数据起始页码为1</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCpsListActivityPageQueryResult> AlibabaCpsListActivityPageQueryAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cps.listActivityPageQuery/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCpsListActivityPageQueryResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCpsListActivityPageQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>查询订单的汇总信息
        /// 查询订单的汇总信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.queryTradeInfoSum-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.queryTradeInfoSum&amp;v=1</summary>
        /// <param name="startDate">订单创建开始时间13位时间戳，开始时间跟结束时间不能超过31天</param>
        /// <param name="endDate">订单创建结束时间13位时间戳，开始时间跟结束时间不能超过31天</param>
        /// <param name="mediaZoneId">媒体推广位id</param>
        /// <returns>结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaP4pOpenClientDtoOpenUnionRptTradeDTO AlibabaCpsQueryTradeInfoSum(long startDate, long endDate, long? mediaZoneId = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCpsQueryTradeInfoSumAsync(startDate, endDate, mediaZoneId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询订单的汇总信息
        /// 查询订单的汇总信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.queryTradeInfoSum-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.queryTradeInfoSum&amp;v=1</summary>
        /// <param name="startDate">订单创建开始时间13位时间戳，开始时间跟结束时间不能超过31天</param>
        /// <param name="endDate">订单创建结束时间13位时间戳，开始时间跟结束时间不能超过31天</param>
        /// <param name="mediaZoneId">媒体推广位id</param>
        /// <returns>结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaP4pOpenClientDtoOpenUnionRptTradeDTO> AlibabaCpsQueryTradeInfoSumAsync(long startDate, long endDate, long? mediaZoneId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cps.queryTradeInfoSum/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (startDate == null)
                        throw new System.ArgumentNullException("startDate");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(startDate, System.Globalization.CultureInfo.InvariantCulture)), "startDate");
                    }
                    if (endDate == null)
                        throw new System.ArgumentNullException("endDate");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endDate, System.Globalization.CultureInfo.InvariantCulture)), "endDate");
                    }
                    if (mediaZoneId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(mediaZoneId, System.Globalization.CultureInfo.InvariantCulture)), "mediaZoneId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaP4pOpenClientDtoOpenUnionRptTradeDTO>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaP4pOpenClientDtoOpenUnionRptTradeDTO);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取联盟商家列表
        /// 获取联盟商家列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listShopPageQuery-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listShopPageQuery&amp;v=1</summary>
        /// <param name="categoryId">类目id</param>
        /// <param name="pageNo">页偏移量</param>
        /// <param name="pageSize">分页大小</param>
        /// <param name="sellerId">卖家id</param>
        /// <param name="companyName">公司名称</param>
        /// <param name="defineTags">属性标签</param>
        /// <param name="filterRatioMin">佣金比例下限</param>
        /// <param name="filterRatioMax">佣金比例上限</param>
        /// <param name="sortField">排序字段(desc降序，asc升序)</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 88804	- 请求的数据页条数超过系统限制1-200
        /// 88807	- 请求的数据起始页码为1</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCpsListShopPageQueryResult AlibabaCpsListShopPageQuery(long categoryId, int pageNo, int pageSize, long? sellerId = null, string companyName = null, string defineTags = null, double? filterRatioMin = null, double? filterRatioMax = null, string sortField = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCpsListShopPageQueryAsync(categoryId, pageNo, pageSize, sellerId, companyName, defineTags, filterRatioMin, filterRatioMax, sortField, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取联盟商家列表
        /// 获取联盟商家列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listShopPageQuery-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listShopPageQuery&amp;v=1</summary>
        /// <param name="categoryId">类目id</param>
        /// <param name="pageNo">页偏移量</param>
        /// <param name="pageSize">分页大小</param>
        /// <param name="sellerId">卖家id</param>
        /// <param name="companyName">公司名称</param>
        /// <param name="defineTags">属性标签</param>
        /// <param name="filterRatioMin">佣金比例下限</param>
        /// <param name="filterRatioMax">佣金比例上限</param>
        /// <param name="sortField">排序字段(desc降序，asc升序)</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 88804	- 请求的数据页条数超过系统限制1-200
        /// 88807	- 请求的数据起始页码为1</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCpsListShopPageQueryResult> AlibabaCpsListShopPageQueryAsync(long categoryId, int pageNo, int pageSize, long? sellerId = null, string companyName = null, string defineTags = null, double? filterRatioMin = null, double? filterRatioMax = null, string sortField = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cps.listShopPageQuery/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (categoryId == null)
                        throw new System.ArgumentNullException("categoryId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(categoryId, System.Globalization.CultureInfo.InvariantCulture)), "categoryId");
                    }
                    if (pageNo == null)
                        throw new System.ArgumentNullException("pageNo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageNo, System.Globalization.CultureInfo.InvariantCulture)), "pageNo");
                    }
                    if (pageSize == null)
                        throw new System.ArgumentNullException("pageSize");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    if (sellerId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(sellerId, System.Globalization.CultureInfo.InvariantCulture)), "sellerId");
                    }
                    if (companyName != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(companyName, System.Globalization.CultureInfo.InvariantCulture)), "companyName");
                    }
                    if (defineTags != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(defineTags, System.Globalization.CultureInfo.InvariantCulture)), "defineTags");
                    }
                    if (filterRatioMin != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filterRatioMin, System.Globalization.CultureInfo.InvariantCulture)), "filterRatioMin");
                    }
                    if (filterRatioMax != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filterRatioMax, System.Globalization.CultureInfo.InvariantCulture)), "filterRatioMax");
                    }
                    if (sortField != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(sortField, System.Globalization.CultureInfo.InvariantCulture)), "sortField");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCpsListShopPageQueryResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCpsListShopPageQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>联盟账单列表查询
        /// 联盟实时获取订单列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.tradeBillList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.tradeBillList&amp;v=1</summary>
        /// <param name="queryOrderType">订单状态查询类型</param>
        /// <param name="queryTimeType">订单时间查询类型</param>
        /// <param name="queryStartTime">查询开始时间</param>
        /// <param name="queryEndTime">查询结束时间</param>
        /// <param name="pageNo">页偏移量</param>
        /// <param name="pageSize">页大小</param>
        /// <param name="orderState">订单状态</param>
        /// <param name="settleState">结算状态</param>
        /// <param name="rightsState">维权状态</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 150005	- 请求页面大小超出限制</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCpsTradeBillListResult AlibabaCpsTradeBillList(string queryOrderType, string queryTimeType, string queryStartTime, string queryEndTime, int pageNo, int pageSize, int? orderState = null, int? settleState = null, int? rightsState = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCpsTradeBillListAsync(queryOrderType, queryTimeType, queryStartTime, queryEndTime, pageNo, pageSize, orderState, settleState, rightsState, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>联盟账单列表查询
        /// 联盟实时获取订单列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.tradeBillList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.tradeBillList&amp;v=1</summary>
        /// <param name="queryOrderType">订单状态查询类型</param>
        /// <param name="queryTimeType">订单时间查询类型</param>
        /// <param name="queryStartTime">查询开始时间</param>
        /// <param name="queryEndTime">查询结束时间</param>
        /// <param name="pageNo">页偏移量</param>
        /// <param name="pageSize">页大小</param>
        /// <param name="orderState">订单状态</param>
        /// <param name="settleState">结算状态</param>
        /// <param name="rightsState">维权状态</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 150005	- 请求页面大小超出限制</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCpsTradeBillListResult> AlibabaCpsTradeBillListAsync(string queryOrderType, string queryTimeType, string queryStartTime, string queryEndTime, int pageNo, int pageSize, int? orderState = null, int? settleState = null, int? rightsState = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cps.tradeBillList/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (queryOrderType == null)
                        throw new System.ArgumentNullException("queryOrderType");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(queryOrderType, System.Globalization.CultureInfo.InvariantCulture)), "queryOrderType");
                    }
                    if (queryTimeType == null)
                        throw new System.ArgumentNullException("queryTimeType");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(queryTimeType, System.Globalization.CultureInfo.InvariantCulture)), "queryTimeType");
                    }
                    if (queryStartTime == null)
                        throw new System.ArgumentNullException("queryStartTime");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(queryStartTime, System.Globalization.CultureInfo.InvariantCulture)), "queryStartTime");
                    }
                    if (queryEndTime == null)
                        throw new System.ArgumentNullException("queryEndTime");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(queryEndTime, System.Globalization.CultureInfo.InvariantCulture)), "queryEndTime");
                    }
                    if (pageNo == null)
                        throw new System.ArgumentNullException("pageNo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageNo, System.Globalization.CultureInfo.InvariantCulture)), "pageNo");
                    }
                    if (pageSize == null)
                        throw new System.ArgumentNullException("pageSize");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    if (orderState != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderState, System.Globalization.CultureInfo.InvariantCulture)), "orderState");
                    }
                    if (settleState != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(settleState, System.Globalization.CultureInfo.InvariantCulture)), "settleState");
                    }
                    if (rightsState != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(rightsState, System.Globalization.CultureInfo.InvariantCulture)), "rightsState");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCpsTradeBillListResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCpsTradeBillListResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>批量生成联盟推广url点击信息
        /// 批量生成联盟推广url点击信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.genClickUrl-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.genClickUrl&amp;v=1</summary>
        /// <param name="type">转链接类型(店铺、商品、活动)</param>
        /// <param name="mediaId">媒体id</param>
        /// <param name="mediaZoneId">媒体推广位id</param>
        /// <param name="objectValueList">推广实体</param>
        /// <param name="ext">其他自定义参数，查询订单会返回该参数</param>
        /// <returns>结构体返回 ErrorCode 的错误信息
        /// 99993	- 业务参数不能为空
        /// 150008	- 无效生成点击实体类型
        /// 88804	- 请求的数据页条数超过系统限制1-200
        /// 88807	- 请求的数据起始页码为1</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response4 AlibabaCpsGenClickUrl(int type, long mediaId, long mediaZoneId, System.Collections.Generic.IEnumerable<string> objectValueList, string ext = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCpsGenClickUrlAsync(type, mediaId, mediaZoneId, objectValueList, ext, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>批量生成联盟推广url点击信息
        /// 批量生成联盟推广url点击信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.genClickUrl-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.genClickUrl&amp;v=1</summary>
        /// <param name="type">转链接类型(店铺、商品、活动)</param>
        /// <param name="mediaId">媒体id</param>
        /// <param name="mediaZoneId">媒体推广位id</param>
        /// <param name="objectValueList">推广实体</param>
        /// <param name="ext">其他自定义参数，查询订单会返回该参数</param>
        /// <returns>结构体返回 ErrorCode 的错误信息
        /// 99993	- 业务参数不能为空
        /// 150008	- 无效生成点击实体类型
        /// 88804	- 请求的数据页条数超过系统限制1-200
        /// 88807	- 请求的数据起始页码为1</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response4> AlibabaCpsGenClickUrlAsync(int type, long mediaId, long mediaZoneId, System.Collections.Generic.IEnumerable<string> objectValueList, string ext = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cps.genClickUrl/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (type == null)
                        throw new System.ArgumentNullException("type");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture)), "type");
                    }
                    if (mediaId == null)
                        throw new System.ArgumentNullException("mediaId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(mediaId, System.Globalization.CultureInfo.InvariantCulture)), "mediaId");
                    }
                    if (mediaZoneId == null)
                        throw new System.ArgumentNullException("mediaZoneId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(mediaZoneId, System.Globalization.CultureInfo.InvariantCulture)), "mediaZoneId");
                    }
                    if (objectValueList == null)
                        throw new System.ArgumentNullException("objectValueList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(objectValueList, System.Globalization.CultureInfo.InvariantCulture)), "objectValueList");
                    }
                    if (ext != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(ext, System.Globalization.CultureInfo.InvariantCulture)), "ext");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response4);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取媒体推广位信息
        /// 获取用户媒体及推广位信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listMediaInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listMediaInfo&amp;v=1</summary>
        /// <param name="mediaId">媒体id</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 150009	- 无效媒体id</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response4 AlibabaCpsListMediaInfo(long? mediaId = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCpsListMediaInfoAsync(mediaId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取媒体推广位信息
        /// 获取用户媒体及推广位信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listMediaInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listMediaInfo&amp;v=1</summary>
        /// <param name="mediaId">媒体id</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 150009	- 无效媒体id</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response4> AlibabaCpsListMediaInfoAsync(long? mediaId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cps.listMediaInfo/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (mediaId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(mediaId, System.Globalization.CultureInfo.InvariantCulture)), "mediaId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response4);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>查询实时uv，muv接口
        /// 查询实时uv，muv接口
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.queryRealtimeVisitor-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.queryRealtimeVisitor&amp;v=1</summary>
        /// <param name="bizDate">指定查询日13位时间戳，只能在30天内</param>
        /// <param name="mediaZoneId">媒体推广位id</param>
        /// <returns>结果返回 ErrorCode 的错误信息
        /// 88803	- 缺少参数</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response4 AlibabaCpsQueryRealtimeVisitor(long bizDate, long? mediaZoneId = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCpsQueryRealtimeVisitorAsync(bizDate, mediaZoneId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询实时uv，muv接口
        /// 查询实时uv，muv接口
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.queryRealtimeVisitor-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.queryRealtimeVisitor&amp;v=1</summary>
        /// <param name="bizDate">指定查询日13位时间戳，只能在30天内</param>
        /// <param name="mediaZoneId">媒体推广位id</param>
        /// <returns>结果返回 ErrorCode 的错误信息
        /// 88803	- 缺少参数</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response4> AlibabaCpsQueryRealtimeVisitorAsync(long bizDate, long? mediaZoneId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cps.queryRealtimeVisitor/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (bizDate == null)
                        throw new System.ArgumentNullException("bizDate");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(bizDate, System.Globalization.CultureInfo.InvariantCulture)), "bizDate");
                    }
                    if (mediaZoneId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(mediaZoneId, System.Globalization.CultureInfo.InvariantCulture)), "mediaZoneId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response4);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取联盟offer列表
        /// 获取联盟offer列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listOfferPageQuery-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listOfferPageQuery&amp;v=1</summary>
        /// <param name="pageNo">页号</param>
        /// <param name="pageSize">页大小</param>
        /// <param name="categoryId">类目id
        /// 类目id和feedInfo至少输入一项</param>
        /// <param name="feedInfo">关键词或offerId
        /// 类目id和feedInfo至少输入一项</param>
        /// <param name="defineTags">属性标签，属性间以逗号分隔</param>
        /// <param name="filterMinPrice">售价下限</param>
        /// <param name="filterMaxPrice">售价上限</param>
        /// <param name="filterQuantityBeginMin">起批量下限</param>
        /// <param name="filterQuantityBeginMax">起批量上限</param>
        /// <param name="filterSaleQuantityMin">销量下限</param>
        /// <param name="filterSaleQuantityMax">销量上限</param>
        /// <param name="filterRatioMin">佣金比例下限</param>
        /// <param name="filterRatioMax">佣金比例上限</param>
        /// <param name="sortField">排序字段(desc降序，asc升序)</param>
        /// <param name="filterOldBuyerRatio">老买家佣金比例筛选，注意这里与ratio格式不同，用~分割上下区间，如0.1~:表示大于等于0.1;~0.2:表于小于等于0.2;0.2~0.3:表示0.2到0.3</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 88804	- 请求的数据页条数超过系统限制1-200
        /// 88807	- 请求的数据起始页码为1
        /// 99993	- 缺少必须输入参数项(类目id和feedInfo信息至少输入一项)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCpsListOfferPageQueryResult AlibabaCpsListOfferPageQuery(int pageNo, int pageSize, long? categoryId = null, string feedInfo = null, string defineTags = null, double? filterMinPrice = null, double? filterMaxPrice = null, int? filterQuantityBeginMin = null, int? filterQuantityBeginMax = null, int? filterSaleQuantityMin = null, int? filterSaleQuantityMax = null, double? filterRatioMin = null, double? filterRatioMax = null, string sortField = null, string filterOldBuyerRatio = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCpsListOfferPageQueryAsync(pageNo, pageSize, categoryId, feedInfo, defineTags, filterMinPrice, filterMaxPrice, filterQuantityBeginMin, filterQuantityBeginMax, filterSaleQuantityMin, filterSaleQuantityMax, filterRatioMin, filterRatioMax, sortField, filterOldBuyerRatio, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取联盟offer列表
        /// 获取联盟offer列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.listOfferPageQuery-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.listOfferPageQuery&amp;v=1</summary>
        /// <param name="pageNo">页号</param>
        /// <param name="pageSize">页大小</param>
        /// <param name="categoryId">类目id
        /// 类目id和feedInfo至少输入一项</param>
        /// <param name="feedInfo">关键词或offerId
        /// 类目id和feedInfo至少输入一项</param>
        /// <param name="defineTags">属性标签，属性间以逗号分隔</param>
        /// <param name="filterMinPrice">售价下限</param>
        /// <param name="filterMaxPrice">售价上限</param>
        /// <param name="filterQuantityBeginMin">起批量下限</param>
        /// <param name="filterQuantityBeginMax">起批量上限</param>
        /// <param name="filterSaleQuantityMin">销量下限</param>
        /// <param name="filterSaleQuantityMax">销量上限</param>
        /// <param name="filterRatioMin">佣金比例下限</param>
        /// <param name="filterRatioMax">佣金比例上限</param>
        /// <param name="sortField">排序字段(desc降序，asc升序)</param>
        /// <param name="filterOldBuyerRatio">老买家佣金比例筛选，注意这里与ratio格式不同，用~分割上下区间，如0.1~:表示大于等于0.1;~0.2:表于小于等于0.2;0.2~0.3:表示0.2到0.3</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 88804	- 请求的数据页条数超过系统限制1-200
        /// 88807	- 请求的数据起始页码为1
        /// 99993	- 缺少必须输入参数项(类目id和feedInfo信息至少输入一项)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCpsListOfferPageQueryResult> AlibabaCpsListOfferPageQueryAsync(int pageNo, int pageSize, long? categoryId = null, string feedInfo = null, string defineTags = null, double? filterMinPrice = null, double? filterMaxPrice = null, int? filterQuantityBeginMin = null, int? filterQuantityBeginMax = null, int? filterSaleQuantityMin = null, int? filterSaleQuantityMax = null, double? filterRatioMin = null, double? filterRatioMax = null, string sortField = null, string filterOldBuyerRatio = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cps.listOfferPageQuery/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (pageNo == null)
                        throw new System.ArgumentNullException("pageNo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageNo, System.Globalization.CultureInfo.InvariantCulture)), "pageNo");
                    }
                    if (pageSize == null)
                        throw new System.ArgumentNullException("pageSize");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    if (categoryId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(categoryId, System.Globalization.CultureInfo.InvariantCulture)), "categoryId");
                    }
                    if (feedInfo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(feedInfo, System.Globalization.CultureInfo.InvariantCulture)), "feedInfo");
                    }
                    if (defineTags != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(defineTags, System.Globalization.CultureInfo.InvariantCulture)), "defineTags");
                    }
                    if (filterMinPrice != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filterMinPrice, System.Globalization.CultureInfo.InvariantCulture)), "filterMinPrice");
                    }
                    if (filterMaxPrice != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filterMaxPrice, System.Globalization.CultureInfo.InvariantCulture)), "filterMaxPrice");
                    }
                    if (filterQuantityBeginMin != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filterQuantityBeginMin, System.Globalization.CultureInfo.InvariantCulture)), "filterQuantityBeginMin");
                    }
                    if (filterQuantityBeginMax != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filterQuantityBeginMax, System.Globalization.CultureInfo.InvariantCulture)), "filterQuantityBeginMax");
                    }
                    if (filterSaleQuantityMin != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filterSaleQuantityMin, System.Globalization.CultureInfo.InvariantCulture)), "filterSaleQuantityMin");
                    }
                    if (filterSaleQuantityMax != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filterSaleQuantityMax, System.Globalization.CultureInfo.InvariantCulture)), "filterSaleQuantityMax");
                    }
                    if (filterRatioMin != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filterRatioMin, System.Globalization.CultureInfo.InvariantCulture)), "filterRatioMin");
                    }
                    if (filterRatioMax != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filterRatioMax, System.Globalization.CultureInfo.InvariantCulture)), "filterRatioMax");
                    }
                    if (sortField != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(sortField, System.Globalization.CultureInfo.InvariantCulture)), "sortField");
                    }
                    if (filterOldBuyerRatio != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filterOldBuyerRatio, System.Globalization.CultureInfo.InvariantCulture)), "filterOldBuyerRatio");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCpsListOfferPageQueryResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCpsListOfferPageQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取联盟结算摘要账单
        /// 获取联盟结算摘要账单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.getCPSSettleSummaryInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.getCPSSettleSummaryInfo&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCpsOpenCPSSettleSummaryDTO AlibabaCpsGetCPSSettleSummaryInfo()
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCpsGetCPSSettleSummaryInfoAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取联盟结算摘要账单
        /// 获取联盟结算摘要账单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.p4p:alibaba.cps.getCPSSettleSummaryInfo-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.p4p&amp;n=alibaba.cps.getCPSSettleSummaryInfo&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCpsOpenCPSSettleSummaryDTO> AlibabaCpsGetCPSSettleSummaryInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.p4p/alibaba.cps.getCPSSettleSummaryInfo/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCpsOpenCPSSettleSummaryDTO>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCpsOpenCPSSettleSummaryDTO);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>通过询价单id获取询价单
        /// 通过询价单id获取询价单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.buyOffer.getBuyOfferById-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.buyOffer.getBuyOfferById&amp;v=1</summary>
        /// <param name="buyOfferId">询价单ID</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// ISV.DATA_NOT_EXIST	- 数据不存在
        /// ISP.SYSTEM_ERROR	- 系统出错(请联系开发人员排查)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public ComAlibabaCaigouApiBuyOfferModelBuyOffer CaigouApiBuyOfferGetBuyOfferById(long buyOfferId)
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiBuyOfferGetBuyOfferByIdAsync(buyOfferId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>通过询价单id获取询价单
        /// 通过询价单id获取询价单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.buyOffer.getBuyOfferById-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.buyOffer.getBuyOfferById&amp;v=1</summary>
        /// <param name="buyOfferId">询价单ID</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// ISV.DATA_NOT_EXIST	- 数据不存在
        /// ISP.SYSTEM_ERROR	- 系统出错(请联系开发人员排查)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ComAlibabaCaigouApiBuyOfferModelBuyOffer> CaigouApiBuyOfferGetBuyOfferByIdAsync(long buyOfferId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.buyOffer.getBuyOfferById/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (buyOfferId == null)
                        throw new System.ArgumentNullException("buyOfferId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(buyOfferId, System.Globalization.CultureInfo.InvariantCulture)), "buyOfferId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ComAlibabaCaigouApiBuyOfferModelBuyOffer>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ComAlibabaCaigouApiBuyOfferModelBuyOffer);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>游标式获取失败的消息列表
        /// 游标式获取失败的消息列表，获取的消息会自动消费成功的确认。所以下次以相同条件调用获取的是剩下的数据，直至返回数据为空
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:push.cursor.messageList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=push.cursor.messageList&amp;v=1</summary>
        /// <param name="createStartTime">消息创建时间查找范围开始</param>
        /// <param name="createEndTime">消息创建时间查找范围结束</param>
        /// <param name="quantity">每次取的数据量，范围20-200，默认20</param>
        /// <param name="type">消息类型</param>
        /// <param name="userInfo">用户Id</param>
        /// <returns>推送消息列表</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response25 PushCursorMessageList(System.DateTimeOffset? createStartTime = null, System.DateTimeOffset? createEndTime = null, int? quantity = null, string type = null, string userInfo = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await PushCursorMessageListAsync(createStartTime, createEndTime, quantity, type, userInfo, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>游标式获取失败的消息列表
        /// 游标式获取失败的消息列表，获取的消息会自动消费成功的确认。所以下次以相同条件调用获取的是剩下的数据，直至返回数据为空
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:push.cursor.messageList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=push.cursor.messageList&amp;v=1</summary>
        /// <param name="createStartTime">消息创建时间查找范围开始</param>
        /// <param name="createEndTime">消息创建时间查找范围结束</param>
        /// <param name="quantity">每次取的数据量，范围20-200，默认20</param>
        /// <param name="type">消息类型</param>
        /// <param name="userInfo">用户Id</param>
        /// <returns>推送消息列表</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response25> PushCursorMessageListAsync(System.DateTimeOffset? createStartTime = null, System.DateTimeOffset? createEndTime = null, int? quantity = null, string type = null, string userInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/push.cursor.messageList/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (createStartTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(createStartTime, System.Globalization.CultureInfo.InvariantCulture)), "createStartTime");
                    }
                    if (createEndTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(createEndTime, System.Globalization.CultureInfo.InvariantCulture)), "createEndTime");
                    }
                    if (quantity != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture)), "quantity");
                    }
                    if (type != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture)), "type");
                    }
                    if (userInfo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(userInfo, System.Globalization.CultureInfo.InvariantCulture)), "userInfo");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response25>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response25);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>批量新增/修改erp物料
        /// 批量新增/修改erp物料，不存在则新增，存在则更新
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.batchAddOrUpdateErpProducts-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.batchAddOrUpdateErpProducts&amp;v=1</summary>
        /// <param name="coopParams">添加或更新的erp物料参数</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCaigouProductResultData AlibabaCaigouProductBatchAddOrUpdateErpProducts(System.Collections.Generic.IEnumerable<AlibabaCaigouProductAddOrUpdateErpProductCoopParam> coopParams)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCaigouProductBatchAddOrUpdateErpProductsAsync(coopParams, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>批量新增/修改erp物料
        /// 批量新增/修改erp物料，不存在则新增，存在则更新
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.batchAddOrUpdateErpProducts-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.batchAddOrUpdateErpProducts&amp;v=1</summary>
        /// <param name="coopParams">添加或更新的erp物料参数</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCaigouProductResultData> AlibabaCaigouProductBatchAddOrUpdateErpProductsAsync(System.Collections.Generic.IEnumerable<AlibabaCaigouProductAddOrUpdateErpProductCoopParam> coopParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.caigou.product.batchAddOrUpdateErpProducts/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (coopParams == null)
                        throw new System.ArgumentNullException("coopParams");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(coopParams, System.Globalization.CultureInfo.InvariantCulture)), "coopParams");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCaigouProductResultData>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCaigouProductResultData);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>根据系统域编码、erp物料编码和memberId批量删除erp物料信息
        /// 根据系统域编码、erp物料编码和memberId批量删除erp物料信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.removeErpProducts-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.removeErpProducts&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public CnAlibabaOpenAlibabaCaigouProductRemoveErpProductsAlibabaCaigouProductResultData AlibabaCaigouProductRemoveErpProducts(System.Collections.Generic.IEnumerable<AlibabaCaigouProductErpProductCoopParam> erpProductCoopParamList)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCaigouProductRemoveErpProductsAsync(erpProductCoopParamList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据系统域编码、erp物料编码和memberId批量删除erp物料信息
        /// 根据系统域编码、erp物料编码和memberId批量删除erp物料信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.removeErpProducts-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.removeErpProducts&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CnAlibabaOpenAlibabaCaigouProductRemoveErpProductsAlibabaCaigouProductResultData> AlibabaCaigouProductRemoveErpProductsAsync(System.Collections.Generic.IEnumerable<AlibabaCaigouProductErpProductCoopParam> erpProductCoopParamList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.caigou.product.removeErpProducts/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (erpProductCoopParamList == null)
                        throw new System.ArgumentNullException("erpProductCoopParamList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(erpProductCoopParamList, System.Globalization.CultureInfo.InvariantCulture)), "erpProductCoopParamList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CnAlibabaOpenAlibabaCaigouProductRemoveErpProductsAlibabaCaigouProductResultData>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CnAlibabaOpenAlibabaCaigouProductRemoveErpProductsAlibabaCaigouProductResultData);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>查询erp物料
        /// 根据系统域编码、物料编码、会员ID查询erp物料
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.getErpProductByErpProductCode-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.getErpProductByErpProductCode&amp;v=1</summary>
        /// <param name="systemDomainCode">系统域编码</param>
        /// <param name="erpProductCode">erp物料编码</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public CnAlibabaOpenAlibabaCaigouProductGetErpProductByErpProductCodeAlibabaCaigouProductResultData AlibabaCaigouProductGetErpProductByErpProductCode(string systemDomainCode, string erpProductCode)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCaigouProductGetErpProductByErpProductCodeAsync(systemDomainCode, erpProductCode, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询erp物料
        /// 根据系统域编码、物料编码、会员ID查询erp物料
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.getErpProductByErpProductCode-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.getErpProductByErpProductCode&amp;v=1</summary>
        /// <param name="systemDomainCode">系统域编码</param>
        /// <param name="erpProductCode">erp物料编码</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CnAlibabaOpenAlibabaCaigouProductGetErpProductByErpProductCodeAlibabaCaigouProductResultData> AlibabaCaigouProductGetErpProductByErpProductCodeAsync(string systemDomainCode, string erpProductCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.caigou.product.getErpProductByErpProductCode/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (systemDomainCode == null)
                        throw new System.ArgumentNullException("systemDomainCode");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(systemDomainCode, System.Globalization.CultureInfo.InvariantCulture)), "systemDomainCode");
                    }
                    if (erpProductCode == null)
                        throw new System.ArgumentNullException("erpProductCode");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(erpProductCode, System.Globalization.CultureInfo.InvariantCulture)), "erpProductCode");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CnAlibabaOpenAlibabaCaigouProductGetErpProductByErpProductCodeAlibabaCaigouProductResultData>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CnAlibabaOpenAlibabaCaigouProductGetErpProductByErpProductCodeAlibabaCaigouProductResultData);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>创建子帐号
        /// 用户在免登和接口调用的时候都需要使用1688上对应的操作员帐号，一般情况下企业系统中都没有1688上对应的子帐号ID，可以通过这个接口为某个操作员快速创建一个子帐号，同时记录到接入商系统内部，便于下次使用。
        /// 注意：如果对应子帐号已经建立过了，则直接返回已经建立的子帐号ID，调用此接口前，需要主帐号登陆过旺旺（至少一次），并且已经领用了子帐号，领用页面：http://mai.taobao.com/subaccount/index.htm
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.account.createSubAccount-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.account.createSubAccount&amp;v=1</summary>
        /// <param name="employeeId">需要创建的子帐号在接入商系统内部唯一编号或者ID</param>
        /// <param name="name">需要创建的子帐号的姓名</param>
        /// <param name="mobileNo">需要创建的子帐号的手机号，如果为空的话将来无法收到来自1688的采购业务提醒</param>
        /// <param name="email">需要创建的子帐号的邮箱，如果为空则无法收到来自1688采购业务的邮件提醒</param>
        /// <param name="sex">需要创建的子帐号的性别，枚举值：1或者2；1表示男，2表示女</param>
        /// <param name="department">需要创建的子帐号所属部门，多级部门用&amp;quot;-&amp;quot;分割，最多三级；如果为空，系统默认会在主帐号下面创建一个“我的团队”这个部门，所有没有传部门的子帐号都会归属到这个默认部门下面去。</param>
        /// <param name="role">需要创建的子帐号在1688的岗位，例如：1688采购员、采购经理、财务，如果为空的话这个子帐号就没有相关采购寻源的权限或者采购的权限</param>
        /// <param name="authCompanies">授权公司编码，多个用英文分号分隔</param>
        /// <param name="authFactories">授权工厂编码，多个用英文分号分隔</param>
        /// <param name="authPurchaseCenters">授权采购中心编码，多个用英文分号分隔</param>
        /// <param name="authCostCenters">授权成本中心，格式：公司编码|成本中心编码   多个成本中心用英文分号分隔</param>
        /// <param name="authAreas">授权区域名称，多个用英文分号分隔</param>
        /// <param name="authCategories">授权类目编码，多个用英文分号分隔</param>
        /// <returns>创建成功的子帐号ID或者是已经与接入商系统内部employeeId绑定的子帐号ID返回 ErrorCode 的错误信息
        /// ISV.CONFLICT_MEMBER	- 主帐号存在同名帐号，这个是由于alibaba帐号体系合并导致还有很少一部分会员存在用户名冲突问题，新注册的不存在这个问题，如果主帐号冲突的话就不能使用子帐号相关功能，所以当发现这个问题后。(请修改自己的帐号名或者联系采购运营服务同学。)
        /// ISV.INVALID_PARAM	- 接口传入参数不合法(请按接口参数说明检查传入的param参数，确保param对象中的employeeId,buyerMemberId,name,departmend是合法有效的)
        /// ISV.DATA_PRIVILEGE_ILLEGAL	- 您无权调用此api接口，此接口只对与采购平台合作采购商才能提供这个接口服务(请先与采购平台进行合作，可联系采购运营服务同学进行咨询)
        /// ISP.SYSTEM_ERROR	- ISP系统繁忙(请确认主帐号已经登陆过旺旺（至少一次），并且已经领用了子帐号；请稍等片刻，在进行尝试；通知采购运营服务同学告知问题。)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response26 CaigouApiAccountCreateSubAccount(string employeeId, string name, string mobileNo = null, string email = null, string sex = null, string department = null, string role = null, string authCompanies = null, string authFactories = null, string authPurchaseCenters = null, string authCostCenters = null, string authAreas = null, string authCategories = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiAccountCreateSubAccountAsync(employeeId, name, mobileNo, email, sex, department, role, authCompanies, authFactories, authPurchaseCenters, authCostCenters, authAreas, authCategories, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建子帐号
        /// 用户在免登和接口调用的时候都需要使用1688上对应的操作员帐号，一般情况下企业系统中都没有1688上对应的子帐号ID，可以通过这个接口为某个操作员快速创建一个子帐号，同时记录到接入商系统内部，便于下次使用。
        /// 注意：如果对应子帐号已经建立过了，则直接返回已经建立的子帐号ID，调用此接口前，需要主帐号登陆过旺旺（至少一次），并且已经领用了子帐号，领用页面：http://mai.taobao.com/subaccount/index.htm
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.account.createSubAccount-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.account.createSubAccount&amp;v=1</summary>
        /// <param name="employeeId">需要创建的子帐号在接入商系统内部唯一编号或者ID</param>
        /// <param name="name">需要创建的子帐号的姓名</param>
        /// <param name="mobileNo">需要创建的子帐号的手机号，如果为空的话将来无法收到来自1688的采购业务提醒</param>
        /// <param name="email">需要创建的子帐号的邮箱，如果为空则无法收到来自1688采购业务的邮件提醒</param>
        /// <param name="sex">需要创建的子帐号的性别，枚举值：1或者2；1表示男，2表示女</param>
        /// <param name="department">需要创建的子帐号所属部门，多级部门用&amp;quot;-&amp;quot;分割，最多三级；如果为空，系统默认会在主帐号下面创建一个“我的团队”这个部门，所有没有传部门的子帐号都会归属到这个默认部门下面去。</param>
        /// <param name="role">需要创建的子帐号在1688的岗位，例如：1688采购员、采购经理、财务，如果为空的话这个子帐号就没有相关采购寻源的权限或者采购的权限</param>
        /// <param name="authCompanies">授权公司编码，多个用英文分号分隔</param>
        /// <param name="authFactories">授权工厂编码，多个用英文分号分隔</param>
        /// <param name="authPurchaseCenters">授权采购中心编码，多个用英文分号分隔</param>
        /// <param name="authCostCenters">授权成本中心，格式：公司编码|成本中心编码   多个成本中心用英文分号分隔</param>
        /// <param name="authAreas">授权区域名称，多个用英文分号分隔</param>
        /// <param name="authCategories">授权类目编码，多个用英文分号分隔</param>
        /// <returns>创建成功的子帐号ID或者是已经与接入商系统内部employeeId绑定的子帐号ID返回 ErrorCode 的错误信息
        /// ISV.CONFLICT_MEMBER	- 主帐号存在同名帐号，这个是由于alibaba帐号体系合并导致还有很少一部分会员存在用户名冲突问题，新注册的不存在这个问题，如果主帐号冲突的话就不能使用子帐号相关功能，所以当发现这个问题后。(请修改自己的帐号名或者联系采购运营服务同学。)
        /// ISV.INVALID_PARAM	- 接口传入参数不合法(请按接口参数说明检查传入的param参数，确保param对象中的employeeId,buyerMemberId,name,departmend是合法有效的)
        /// ISV.DATA_PRIVILEGE_ILLEGAL	- 您无权调用此api接口，此接口只对与采购平台合作采购商才能提供这个接口服务(请先与采购平台进行合作，可联系采购运营服务同学进行咨询)
        /// ISP.SYSTEM_ERROR	- ISP系统繁忙(请确认主帐号已经登陆过旺旺（至少一次），并且已经领用了子帐号；请稍等片刻，在进行尝试；通知采购运营服务同学告知问题。)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response26> CaigouApiAccountCreateSubAccountAsync(string employeeId, string name, string mobileNo = null, string email = null, string sex = null, string department = null, string role = null, string authCompanies = null, string authFactories = null, string authPurchaseCenters = null, string authCostCenters = null, string authAreas = null, string authCategories = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.account.createSubAccount/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (employeeId == null)
                        throw new System.ArgumentNullException("employeeId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(employeeId, System.Globalization.CultureInfo.InvariantCulture)), "employeeId");
                    }
                    if (name == null)
                        throw new System.ArgumentNullException("name");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)), "name");
                    }
                    if (mobileNo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(mobileNo, System.Globalization.CultureInfo.InvariantCulture)), "mobileNo");
                    }
                    if (email != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture)), "email");
                    }
                    if (sex != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(sex, System.Globalization.CultureInfo.InvariantCulture)), "sex");
                    }
                    if (department != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(department, System.Globalization.CultureInfo.InvariantCulture)), "department");
                    }
                    if (role != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture)), "role");
                    }
                    if (authCompanies != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(authCompanies, System.Globalization.CultureInfo.InvariantCulture)), "authCompanies");
                    }
                    if (authFactories != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(authFactories, System.Globalization.CultureInfo.InvariantCulture)), "authFactories");
                    }
                    if (authPurchaseCenters != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(authPurchaseCenters, System.Globalization.CultureInfo.InvariantCulture)), "authPurchaseCenters");
                    }
                    if (authCostCenters != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(authCostCenters, System.Globalization.CultureInfo.InvariantCulture)), "authCostCenters");
                    }
                    if (authAreas != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(authAreas, System.Globalization.CultureInfo.InvariantCulture)), "authAreas");
                    }
                    if (authCategories != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(authCategories, System.Globalization.CultureInfo.InvariantCulture)), "authCategories");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response26>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response26);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>分页查询采购单列表
        /// 寻源单列表分页查询接口，包括询价单、竞价单、招标单等
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.buyoffer.queryList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.buyoffer.queryList&amp;v=1</summary>
        /// <param name="buyerUserId">采购商的userId：若无，则当主账号查询；否则，按照子账号查询</param>
        /// <param name="subject">采购单的标题，支持模糊查询</param>
        /// <param name="statuses">采购单状态，可以一次查询多个，值为：等待审核：pending，审核不通过：tbd，接受报名中：sent，报价截止：end，撤销：cancel</param>
        /// <param name="bizTypes">业务类型；招投标：bidding，询报价：buyoffer，竞价：auction，招应募：recruitment</param>
        /// <param name="startGmtCreate">查询采购单的创建时间大于等于该时间</param>
        /// <param name="endGmtCreate">查询采购单的创建时间小于等于该时间</param>
        /// <param name="needPurchaseItem">是否需要采购单item信息，默认为false</param>
        /// <param name="needSuplierRequirment">是否需要供应商要求信息，默认为false</param>
        /// <param name="needDetail">是否需要detail信息，默认为false</param>
        /// <param name="needAttachment">是否需要附件，默认为false</param>
        /// <param name="needBuyerContact">是否需要买家联系方式，默认为false</param>
        /// <param name="needTradeRequirement">是否需要交易条件，默认为false</param>
        /// <param name="needRemarkInfo">是否需要备注信息，默认为false</param>
        /// <param name="pageStart">当前页数，不传则默认为第一页，每次限定查询10行。</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// ISV.DATA_NOT_EXIST	- 数据不存在
        /// ISP.SYSTEM_ERROR	- 系统出错(请联系开发人员排查)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public CnAlibabaOpenCaigouApiBuyofferQueryListComAlibabaCaigouApiBuyOfferModelBuyOffer CaigouApiBuyofferQueryList(long? buyerUserId = null, string subject = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.Collections.Generic.IEnumerable<string> bizTypes = null, System.DateTimeOffset? startGmtCreate = null, System.DateTimeOffset? endGmtCreate = null, bool? needPurchaseItem = null, bool? needSuplierRequirment = null, bool? needDetail = null, bool? needAttachment = null, bool? needBuyerContact = null, bool? needTradeRequirement = null, bool? needRemarkInfo = null, int? pageStart = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiBuyofferQueryListAsync(buyerUserId, subject, statuses, bizTypes, startGmtCreate, endGmtCreate, needPurchaseItem, needSuplierRequirment, needDetail, needAttachment, needBuyerContact, needTradeRequirement, needRemarkInfo, pageStart, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>分页查询采购单列表
        /// 寻源单列表分页查询接口，包括询价单、竞价单、招标单等
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.buyoffer.queryList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.buyoffer.queryList&amp;v=1</summary>
        /// <param name="buyerUserId">采购商的userId：若无，则当主账号查询；否则，按照子账号查询</param>
        /// <param name="subject">采购单的标题，支持模糊查询</param>
        /// <param name="statuses">采购单状态，可以一次查询多个，值为：等待审核：pending，审核不通过：tbd，接受报名中：sent，报价截止：end，撤销：cancel</param>
        /// <param name="bizTypes">业务类型；招投标：bidding，询报价：buyoffer，竞价：auction，招应募：recruitment</param>
        /// <param name="startGmtCreate">查询采购单的创建时间大于等于该时间</param>
        /// <param name="endGmtCreate">查询采购单的创建时间小于等于该时间</param>
        /// <param name="needPurchaseItem">是否需要采购单item信息，默认为false</param>
        /// <param name="needSuplierRequirment">是否需要供应商要求信息，默认为false</param>
        /// <param name="needDetail">是否需要detail信息，默认为false</param>
        /// <param name="needAttachment">是否需要附件，默认为false</param>
        /// <param name="needBuyerContact">是否需要买家联系方式，默认为false</param>
        /// <param name="needTradeRequirement">是否需要交易条件，默认为false</param>
        /// <param name="needRemarkInfo">是否需要备注信息，默认为false</param>
        /// <param name="pageStart">当前页数，不传则默认为第一页，每次限定查询10行。</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// ISV.DATA_NOT_EXIST	- 数据不存在
        /// ISP.SYSTEM_ERROR	- 系统出错(请联系开发人员排查)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CnAlibabaOpenCaigouApiBuyofferQueryListComAlibabaCaigouApiBuyOfferModelBuyOffer> CaigouApiBuyofferQueryListAsync(long? buyerUserId = null, string subject = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.Collections.Generic.IEnumerable<string> bizTypes = null, System.DateTimeOffset? startGmtCreate = null, System.DateTimeOffset? endGmtCreate = null, bool? needPurchaseItem = null, bool? needSuplierRequirment = null, bool? needDetail = null, bool? needAttachment = null, bool? needBuyerContact = null, bool? needTradeRequirement = null, bool? needRemarkInfo = null, int? pageStart = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.buyoffer.queryList/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (buyerUserId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(buyerUserId, System.Globalization.CultureInfo.InvariantCulture)), "buyerUserId");
                    }
                    if (subject != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(subject, System.Globalization.CultureInfo.InvariantCulture)), "subject");
                    }
                    if (statuses != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(statuses, System.Globalization.CultureInfo.InvariantCulture)), "statuses");
                    }
                    if (bizTypes != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(bizTypes, System.Globalization.CultureInfo.InvariantCulture)), "bizTypes");
                    }
                    if (startGmtCreate != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(startGmtCreate, System.Globalization.CultureInfo.InvariantCulture)), "startGmtCreate");
                    }
                    if (endGmtCreate != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endGmtCreate, System.Globalization.CultureInfo.InvariantCulture)), "endGmtCreate");
                    }
                    if (needPurchaseItem != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(needPurchaseItem, System.Globalization.CultureInfo.InvariantCulture)), "needPurchaseItem");
                    }
                    if (needSuplierRequirment != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(needSuplierRequirment, System.Globalization.CultureInfo.InvariantCulture)), "needSuplierRequirment");
                    }
                    if (needDetail != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(needDetail, System.Globalization.CultureInfo.InvariantCulture)), "needDetail");
                    }
                    if (needAttachment != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(needAttachment, System.Globalization.CultureInfo.InvariantCulture)), "needAttachment");
                    }
                    if (needBuyerContact != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(needBuyerContact, System.Globalization.CultureInfo.InvariantCulture)), "needBuyerContact");
                    }
                    if (needTradeRequirement != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(needTradeRequirement, System.Globalization.CultureInfo.InvariantCulture)), "needTradeRequirement");
                    }
                    if (needRemarkInfo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(needRemarkInfo, System.Globalization.CultureInfo.InvariantCulture)), "needRemarkInfo");
                    }
                    if (pageStart != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageStart, System.Globalization.CultureInfo.InvariantCulture)), "pageStart");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CnAlibabaOpenCaigouApiBuyofferQueryListComAlibabaCaigouApiBuyOfferModelBuyOffer>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CnAlibabaOpenCaigouApiBuyofferQueryListComAlibabaCaigouApiBuyOfferModelBuyOffer);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>查询子账号详情
        /// 根据子账号登录名查询子账号userId
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.open.caigou.api.account.querySubAcccounts-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.open.caigou.api.account.querySubAcccounts&amp;v=1</summary>
        /// <param name="loginId">子账号登录名</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaOpenCaigouApiAccountQuerySubAcccountsResult AlibabaOpenCaigouApiAccountQuerySubAcccounts(string loginId = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaOpenCaigouApiAccountQuerySubAcccountsAsync(loginId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询子账号详情
        /// 根据子账号登录名查询子账号userId
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.open.caigou.api.account.querySubAcccounts-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.open.caigou.api.account.querySubAcccounts&amp;v=1</summary>
        /// <param name="loginId">子账号登录名</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaOpenCaigouApiAccountQuerySubAcccountsResult> AlibabaOpenCaigouApiAccountQuerySubAcccountsAsync(string loginId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.open.caigou.api.account.querySubAcccounts/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (loginId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(loginId, System.Globalization.CultureInfo.InvariantCulture)), "loginId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaOpenCaigouApiAccountQuerySubAcccountsResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaOpenCaigouApiAccountQuerySubAcccountsResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>采购商获取报价详情
        /// 通过报价单ID获取报价详情接口
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.quotation.buyerGetQuotationDetail-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.quotation.buyerGetQuotationDetail&amp;v=1</summary>
        /// <param name="quotationId">报价单ID</param>
        /// <returns>报价详情返回 ErrorCode 的错误信息
        /// ISV.DATA_NOT_EXIST	- 数据不存在(重新输入正确的参数)
        /// ISV.NO_PERMISSION	- 无权限(确认此报价单是否当前用户的报价单)
        /// ISP.SYSTEM_ERROR	- 系统出错(请联系开发人员排查)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public ComAlibabaCaigouApiQuotationModelQuotation CaigouApiQuotationBuyerGetQuotationDetail(long quotationId)
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiQuotationBuyerGetQuotationDetailAsync(quotationId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>采购商获取报价详情
        /// 通过报价单ID获取报价详情接口
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.quotation.buyerGetQuotationDetail-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.quotation.buyerGetQuotationDetail&amp;v=1</summary>
        /// <param name="quotationId">报价单ID</param>
        /// <returns>报价详情返回 ErrorCode 的错误信息
        /// ISV.DATA_NOT_EXIST	- 数据不存在(重新输入正确的参数)
        /// ISV.NO_PERMISSION	- 无权限(确认此报价单是否当前用户的报价单)
        /// ISP.SYSTEM_ERROR	- 系统出错(请联系开发人员排查)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ComAlibabaCaigouApiQuotationModelQuotation> CaigouApiQuotationBuyerGetQuotationDetailAsync(long quotationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.quotation.buyerGetQuotationDetail/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (quotationId == null)
                        throw new System.ArgumentNullException("quotationId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(quotationId, System.Globalization.CultureInfo.InvariantCulture)), "quotationId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ComAlibabaCaigouApiQuotationModelQuotation>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ComAlibabaCaigouApiQuotationModelQuotation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>内部商城ERP预算校验
        /// 内部商城ERP预算校验
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.mall.budgetVerification-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.mall.budgetVerification&amp;v=1</summary>
        /// <param name="buyerMemberId">买家buyermemberId</param>
        /// <param name="goodsList">商品列表</param>
        /// <param name="appKey">第三方appkey</param>
        /// <param name="appSecret">第三方appSecret</param>
        /// <param name="sign">加密值</param>
        /// <param name="loginId">登录账号</param>
        /// <returns>返回信息返回 ErrorCode 的错误信息
        /// 	-</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public BaiyaoMallBudgetVerificationCheckMallBudgetInvokerResult AlibabaCaigouMallBudgetVerification(string buyerMemberId, System.Collections.Generic.IEnumerable<AlibabaCaigouMallPurchaseOrderGoodsModel> goodsList, string appKey, string appSecret, string sign, string loginId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCaigouMallBudgetVerificationAsync(buyerMemberId, goodsList, appKey, appSecret, sign, loginId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>内部商城ERP预算校验
        /// 内部商城ERP预算校验
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.mall.budgetVerification-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.mall.budgetVerification&amp;v=1</summary>
        /// <param name="buyerMemberId">买家buyermemberId</param>
        /// <param name="goodsList">商品列表</param>
        /// <param name="appKey">第三方appkey</param>
        /// <param name="appSecret">第三方appSecret</param>
        /// <param name="sign">加密值</param>
        /// <param name="loginId">登录账号</param>
        /// <returns>返回信息返回 ErrorCode 的错误信息
        /// 	-</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BaiyaoMallBudgetVerificationCheckMallBudgetInvokerResult> AlibabaCaigouMallBudgetVerificationAsync(string buyerMemberId, System.Collections.Generic.IEnumerable<AlibabaCaigouMallPurchaseOrderGoodsModel> goodsList, string appKey, string appSecret, string sign, string loginId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.caigou.mall.budgetVerification/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (buyerMemberId == null)
                        throw new System.ArgumentNullException("buyerMemberId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(buyerMemberId, System.Globalization.CultureInfo.InvariantCulture)), "buyerMemberId");
                    }
                    if (goodsList == null)
                        throw new System.ArgumentNullException("goodsList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(goodsList, System.Globalization.CultureInfo.InvariantCulture)), "goodsList");
                    }
                    if (appKey == null)
                        throw new System.ArgumentNullException("appKey");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(appKey, System.Globalization.CultureInfo.InvariantCulture)), "appKey");
                    }
                    if (appSecret == null)
                        throw new System.ArgumentNullException("appSecret");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(appSecret, System.Globalization.CultureInfo.InvariantCulture)), "appSecret");
                    }
                    if (sign == null)
                        throw new System.ArgumentNullException("sign");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture)), "sign");
                    }
                    if (loginId == null)
                        throw new System.ArgumentNullException("loginId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(loginId, System.Globalization.CultureInfo.InvariantCulture)), "loginId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BaiyaoMallBudgetVerificationCheckMallBudgetInvokerResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BaiyaoMallBudgetVerificationCheckMallBudgetInvokerResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>采购订单确认收货
        /// 采购订单确认收货
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.procurement.order.confirmGoods-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.procurement.order.confirmGoods&amp;v=1</summary>
        /// <param name="confirmCode">本次确认收货唯一编号</param>
        /// <param name="confirmGoodsInfos">本次确认收货详情</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCaigouProcurementOrderConfirmGoodsResult AlibabaCaigouProcurementOrderConfirmGoods(string confirmCode, System.Collections.Generic.IEnumerable<AlibabaProcurementConfirmGoodsInfo> confirmGoodsInfos)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCaigouProcurementOrderConfirmGoodsAsync(confirmCode, confirmGoodsInfos, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>采购订单确认收货
        /// 采购订单确认收货
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.procurement.order.confirmGoods-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.procurement.order.confirmGoods&amp;v=1</summary>
        /// <param name="confirmCode">本次确认收货唯一编号</param>
        /// <param name="confirmGoodsInfos">本次确认收货详情</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCaigouProcurementOrderConfirmGoodsResult> AlibabaCaigouProcurementOrderConfirmGoodsAsync(string confirmCode, System.Collections.Generic.IEnumerable<AlibabaProcurementConfirmGoodsInfo> confirmGoodsInfos, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.caigou.procurement.order.confirmGoods/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (confirmCode == null)
                        throw new System.ArgumentNullException("confirmCode");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(confirmCode, System.Globalization.CultureInfo.InvariantCulture)), "confirmCode");
                    }
                    if (confirmGoodsInfos == null)
                        throw new System.ArgumentNullException("confirmGoodsInfos");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(confirmGoodsInfos, System.Globalization.CultureInfo.InvariantCulture)), "confirmGoodsInfos");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCaigouProcurementOrderConfirmGoodsResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCaigouProcurementOrderConfirmGoodsResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>根据采购单维度审核采购单
        /// 根据采购单维度审核采购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.purchaseOrder.updateStatusByPurchase-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.purchaseOrder.updateStatusByPurchase&amp;v=1</summary>
        /// <param name="purchaseOrderId">采购单ID</param>
        /// <param name="isApproved">是否通过</param>
        /// <param name="approvedMemo">审批理由</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCaigouPurchaseOrderUpdateStatusByPurchaseResult AlibabaCaigouPurchaseOrderUpdateStatusByPurchase(long purchaseOrderId, bool isApproved, string approvedMemo = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCaigouPurchaseOrderUpdateStatusByPurchaseAsync(purchaseOrderId, isApproved, approvedMemo, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据采购单维度审核采购单
        /// 根据采购单维度审核采购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.purchaseOrder.updateStatusByPurchase-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.purchaseOrder.updateStatusByPurchase&amp;v=1</summary>
        /// <param name="purchaseOrderId">采购单ID</param>
        /// <param name="isApproved">是否通过</param>
        /// <param name="approvedMemo">审批理由</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCaigouPurchaseOrderUpdateStatusByPurchaseResult> AlibabaCaigouPurchaseOrderUpdateStatusByPurchaseAsync(long purchaseOrderId, bool isApproved, string approvedMemo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.caigou.purchaseOrder.updateStatusByPurchase/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (purchaseOrderId == null)
                        throw new System.ArgumentNullException("purchaseOrderId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(purchaseOrderId, System.Globalization.CultureInfo.InvariantCulture)), "purchaseOrderId");
                    }
                    if (isApproved == null)
                        throw new System.ArgumentNullException("isApproved");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(isApproved, System.Globalization.CultureInfo.InvariantCulture)), "isApproved");
                    }
                    if (approvedMemo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(approvedMemo, System.Globalization.CultureInfo.InvariantCulture)), "approvedMemo");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCaigouPurchaseOrderUpdateStatusByPurchaseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCaigouPurchaseOrderUpdateStatusByPurchaseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取子账号清单
        /// 获取主账号下所有的子账号绑定信息
        /// 注意：调用此接口前，需要主帐号登陆过旺旺（至少一次），并且已经领用了子帐号，领用页面：http://mai.taobao.com/subaccount/index.htm
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.account.listSubAcccounts-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.account.listSubAcccounts&amp;v=1</summary>
        /// <returns>返回列表</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response27 CaigouApiAccountListSubAcccounts()
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiAccountListSubAcccountsAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取子账号清单
        /// 获取主账号下所有的子账号绑定信息
        /// 注意：调用此接口前，需要主帐号登陆过旺旺（至少一次），并且已经领用了子帐号，领用页面：http://mai.taobao.com/subaccount/index.htm
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.account.listSubAcccounts-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.account.listSubAcccounts&amp;v=1</summary>
        /// <returns>返回列表</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response27> CaigouApiAccountListSubAcccountsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.account.listSubAcccounts/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response27>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response27);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>关闭询价单
        /// 关闭询价单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.buyoffer.closeBuyOffer-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.buyoffer.closeBuyOffer&amp;v=1</summary>
        /// <param name="buyOfferId">询价单id，为创建询价单api的返回值</param>
        /// <param name="closeReason">关闭询价单原因【不要超过20个字符】</param>
        /// <param name="closeDesc">关闭询价单的详细描述【不要超过40个字符】</param>
        /// <returns>是否执行成功</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response28 CaigouApiBuyofferCloseBuyOffer(long buyOfferId, string closeReason, string closeDesc = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiBuyofferCloseBuyOfferAsync(buyOfferId, closeReason, closeDesc, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>关闭询价单
        /// 关闭询价单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.buyoffer.closeBuyOffer-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.buyoffer.closeBuyOffer&amp;v=1</summary>
        /// <param name="buyOfferId">询价单id，为创建询价单api的返回值</param>
        /// <param name="closeReason">关闭询价单原因【不要超过20个字符】</param>
        /// <param name="closeDesc">关闭询价单的详细描述【不要超过40个字符】</param>
        /// <returns>是否执行成功</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response28> CaigouApiBuyofferCloseBuyOfferAsync(long buyOfferId, string closeReason, string closeDesc = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.buyoffer.closeBuyOffer/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (buyOfferId == null)
                        throw new System.ArgumentNullException("buyOfferId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(buyOfferId, System.Globalization.CultureInfo.InvariantCulture)), "buyOfferId");
                    }
                    if (closeReason == null)
                        throw new System.ArgumentNullException("closeReason");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(closeReason, System.Globalization.CultureInfo.InvariantCulture)), "closeReason");
                    }
                    if (closeDesc != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(closeDesc, System.Globalization.CultureInfo.InvariantCulture)), "closeDesc");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response28>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response28);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>采购执行买家取消付款
        /// 采购执行买家取消付款
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.procurement.BuyerPayService.cancelPayNote-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.procurement.BuyerPayService.cancelPayNote&amp;v=1</summary>
        /// <param name="payId">付款单id</param>
        /// <returns>取消结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaProcurementApiIntegrationResultResultData ComAlibabaProcurementBuyerPayServiceCancelPayNote(long payId)
        {
            return System.Threading.Tasks.Task.Run(async () => await ComAlibabaProcurementBuyerPayServiceCancelPayNoteAsync(payId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>采购执行买家取消付款
        /// 采购执行买家取消付款
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.procurement.BuyerPayService.cancelPayNote-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.procurement.BuyerPayService.cancelPayNote&amp;v=1</summary>
        /// <param name="payId">付款单id</param>
        /// <returns>取消结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaProcurementApiIntegrationResultResultData> ComAlibabaProcurementBuyerPayServiceCancelPayNoteAsync(long payId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/com.alibaba.procurement.BuyerPayService.cancelPayNote/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (payId == null)
                        throw new System.ArgumentNullException("payId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(payId, System.Globalization.CultureInfo.InvariantCulture)), "payId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaProcurementApiIntegrationResultResultData>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaProcurementApiIntegrationResultResultData);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>内部商城同步创建交易订单
        /// 内部商城同步创建交易订单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.mall.createTradeOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.mall.createTradeOrder&amp;v=1</summary>
        /// <param name="openTradeOrderParam">内部商城下单参数</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCaigouMallCreateTradeOrderResult AlibabaCaigouMallCreateTradeOrder(AlibabaCaigouMallOpenTradeOrderParam openTradeOrderParam)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCaigouMallCreateTradeOrderAsync(openTradeOrderParam, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>内部商城同步创建交易订单
        /// 内部商城同步创建交易订单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.mall.createTradeOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.mall.createTradeOrder&amp;v=1</summary>
        /// <param name="openTradeOrderParam">内部商城下单参数</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCaigouMallCreateTradeOrderResult> AlibabaCaigouMallCreateTradeOrderAsync(AlibabaCaigouMallOpenTradeOrderParam openTradeOrderParam, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.caigou.mall.createTradeOrder/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (openTradeOrderParam == null)
                        throw new System.ArgumentNullException("openTradeOrderParam");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(openTradeOrderParam, System.Globalization.CultureInfo.InvariantCulture)), "openTradeOrderParam");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCaigouMallCreateTradeOrderResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCaigouMallCreateTradeOrderResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>查询所有的erp类目
        /// 查询所有的erp类目
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.category.queryAllErpCategory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.category.queryAllErpCategory&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response29 AlibabaCaigouCategoryQueryAllErpCategory()
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCaigouCategoryQueryAllErpCategoryAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询所有的erp类目
        /// 查询所有的erp类目
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.category.queryAllErpCategory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.category.queryAllErpCategory&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response29> AlibabaCaigouCategoryQueryAllErpCategoryAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.caigou.category.queryAllErpCategory/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response29>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response29);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>供应商信息导入
        /// 供应商信息导入.(供应商memberID、公司名、固话、邮箱、手机至少填写一项)
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.supplier.import-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.supplier.import&amp;v=1</summary>
        /// <param name="list">参数类型是json类型的list字符串.包含字段:
        /// &amp;quot;buyerMemberId&amp;quot; 采购商memberId
        /// &amp;quot;supplierCompanyName&amp;quot; 供应商公司名
        /// &amp;quot;supplierEmail&amp;quot; 供应商电子邮箱
        /// &amp;quot;supplierMemberId&amp;quot; 供应商memberId
        /// &amp;quot;supplierMobile&amp;quot; 供应商手机
        /// &amp;quot;supplierPhone&amp;quot; 供应商电话
        /// &amp;quot;externalId&amp;quot; (必填)
        /// 
        /// 其中供应商memberID、公司名、固话、邮箱、手机至少填写一项</param>
        /// <returns>返回导入失败的数据.全部成功返回的list长度为0.
        /// 外部系统对应当前supplierMember的唯一id. 比如:采购商A.导入一条供应商B的数据.externalId表示供应商B在采购商A所属的外部系统中定义的唯一Id.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response30 CaigouApiSupplierImport(System.Collections.Generic.IEnumerable<string> list)
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiSupplierImportAsync(list, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>供应商信息导入
        /// 供应商信息导入.(供应商memberID、公司名、固话、邮箱、手机至少填写一项)
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.supplier.import-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.supplier.import&amp;v=1</summary>
        /// <param name="list">参数类型是json类型的list字符串.包含字段:
        /// &amp;quot;buyerMemberId&amp;quot; 采购商memberId
        /// &amp;quot;supplierCompanyName&amp;quot; 供应商公司名
        /// &amp;quot;supplierEmail&amp;quot; 供应商电子邮箱
        /// &amp;quot;supplierMemberId&amp;quot; 供应商memberId
        /// &amp;quot;supplierMobile&amp;quot; 供应商手机
        /// &amp;quot;supplierPhone&amp;quot; 供应商电话
        /// &amp;quot;externalId&amp;quot; (必填)
        /// 
        /// 其中供应商memberID、公司名、固话、邮箱、手机至少填写一项</param>
        /// <returns>返回导入失败的数据.全部成功返回的list长度为0.
        /// 外部系统对应当前supplierMember的唯一id. 比如:采购商A.导入一条供应商B的数据.externalId表示供应商B在采购商A所属的外部系统中定义的唯一Id.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response30> CaigouApiSupplierImportAsync(System.Collections.Generic.IEnumerable<string> list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.supplier.import/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (list == null)
                        throw new System.ArgumentNullException("list");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(list, System.Globalization.CultureInfo.InvariantCulture)), "list");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response30>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response30);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>根据prId查询询价单列表
        /// 根据prId查询询价单列表（限制：返回条数100，否则舍弃）
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.buyOffer.queryBuyOfferByPrId-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.buyOffer.queryBuyOfferByPrId&amp;v=1</summary>
        /// <param name="prId">外部系统prId</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// ISV.DATA_NOT_EXIST	- 数据不存在
        /// ISP.SYSTEM_ERROR	- 系统出错(请联系开发人员排查)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response31 CaigouApiBuyOfferQueryBuyOfferByPrId(string prId)
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiBuyOfferQueryBuyOfferByPrIdAsync(prId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据prId查询询价单列表
        /// 根据prId查询询价单列表（限制：返回条数100，否则舍弃）
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.buyOffer.queryBuyOfferByPrId-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.buyOffer.queryBuyOfferByPrId&amp;v=1</summary>
        /// <param name="prId">外部系统prId</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// ISV.DATA_NOT_EXIST	- 数据不存在
        /// ISP.SYSTEM_ERROR	- 系统出错(请联系开发人员排查)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response31> CaigouApiBuyOfferQueryBuyOfferByPrIdAsync(string prId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.buyOffer.queryBuyOfferByPrId/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (prId == null)
                        throw new System.ArgumentNullException("prId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(prId, System.Globalization.CultureInfo.InvariantCulture)), "prId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response31>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response31);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>根据id删除产品
        /// 根据id删除产品
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.product.deleteProductById-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.product.deleteProductById&amp;v=1</summary>
        /// <param name="productId">产品在1688所属id</param>
        /// <returns>删除结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response32 CaigouApiProductDeleteProductById(long productId)
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiProductDeleteProductByIdAsync(productId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据id删除产品
        /// 根据id删除产品
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.product.deleteProductById-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.product.deleteProductById&amp;v=1</summary>
        /// <param name="productId">产品在1688所属id</param>
        /// <returns>删除结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response32> CaigouApiProductDeleteProductByIdAsync(long productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.product.deleteProductById/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (productId == null)
                        throw new System.ArgumentNullException("productId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture)), "productId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response32>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response32);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>更新产品信息
        /// 更新产品信息，根据产品编号更新产品，操作人员编号需要绑定后才能操作
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.product.modifyProduct-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.product.modifyProduct&amp;v=1</summary>
        /// <param name="productId">产品在1688的id</param>
        /// <param name="productCode">产品编号</param>
        /// <param name="title">产品名</param>
        /// <param name="unit">单位</param>
        /// <param name="remark">补充信息</param>
        /// <param name="productAttributes">产品属性列表</param>
        /// <param name="instruction">产品说明，副标题</param>
        /// <param name="picUrlList">产品图片，最多10张，需要调用图片上传接口</param>
        /// <param name="attachmentList">产品附件，最多3个附件，需调用附件上传接口</param>
        /// <param name="referencePrice">产品参考价(单位是分)</param>
        /// <param name="userCategoryId">用户在1688的自定义类目id，必须是叶子类目id</param>
        /// <returns>操作结果返回 ErrorCode 的错误信息
        /// ISV.INVALID_PARAM	- 参数不合法
        /// ISV.SYSTEM_ERROR	- 系统出错
        /// ISV.DATA_NOT_EXIST	- 您要修改的数据不存在(请检查productId是否是1688的主键，再检查该产品是否已被删除)
        /// ISV.NO_PERMISSION	- 无权限修改(请检查该产品归属人是否是您的账号)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response28 CaigouApiProductModifyProduct(long productId, string productCode = null, string title = null, string unit = null, string remark = null, System.Collections.Generic.IEnumerable<string> productAttributes = null, string instruction = null, System.Collections.Generic.IEnumerable<string> picUrlList = null, System.Collections.Generic.IEnumerable<string> attachmentList = null, long? referencePrice = null, long? userCategoryId = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiProductModifyProductAsync(productId, productCode, title, unit, remark, productAttributes, instruction, picUrlList, attachmentList, referencePrice, userCategoryId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>更新产品信息
        /// 更新产品信息，根据产品编号更新产品，操作人员编号需要绑定后才能操作
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.product.modifyProduct-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.product.modifyProduct&amp;v=1</summary>
        /// <param name="productId">产品在1688的id</param>
        /// <param name="productCode">产品编号</param>
        /// <param name="title">产品名</param>
        /// <param name="unit">单位</param>
        /// <param name="remark">补充信息</param>
        /// <param name="productAttributes">产品属性列表</param>
        /// <param name="instruction">产品说明，副标题</param>
        /// <param name="picUrlList">产品图片，最多10张，需要调用图片上传接口</param>
        /// <param name="attachmentList">产品附件，最多3个附件，需调用附件上传接口</param>
        /// <param name="referencePrice">产品参考价(单位是分)</param>
        /// <param name="userCategoryId">用户在1688的自定义类目id，必须是叶子类目id</param>
        /// <returns>操作结果返回 ErrorCode 的错误信息
        /// ISV.INVALID_PARAM	- 参数不合法
        /// ISV.SYSTEM_ERROR	- 系统出错
        /// ISV.DATA_NOT_EXIST	- 您要修改的数据不存在(请检查productId是否是1688的主键，再检查该产品是否已被删除)
        /// ISV.NO_PERMISSION	- 无权限修改(请检查该产品归属人是否是您的账号)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response28> CaigouApiProductModifyProductAsync(long productId, string productCode = null, string title = null, string unit = null, string remark = null, System.Collections.Generic.IEnumerable<string> productAttributes = null, string instruction = null, System.Collections.Generic.IEnumerable<string> picUrlList = null, System.Collections.Generic.IEnumerable<string> attachmentList = null, long? referencePrice = null, long? userCategoryId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.product.modifyProduct/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (productId == null)
                        throw new System.ArgumentNullException("productId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture)), "productId");
                    }
                    if (productCode != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture)), "productCode");
                    }
                    if (title != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)), "title");
                    }
                    if (unit != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(unit, System.Globalization.CultureInfo.InvariantCulture)), "unit");
                    }
                    if (remark != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(remark, System.Globalization.CultureInfo.InvariantCulture)), "remark");
                    }
                    if (productAttributes != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productAttributes, System.Globalization.CultureInfo.InvariantCulture)), "productAttributes");
                    }
                    if (instruction != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(instruction, System.Globalization.CultureInfo.InvariantCulture)), "instruction");
                    }
                    if (picUrlList != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(picUrlList, System.Globalization.CultureInfo.InvariantCulture)), "picUrlList");
                    }
                    if (attachmentList != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(attachmentList, System.Globalization.CultureInfo.InvariantCulture)), "attachmentList");
                    }
                    if (referencePrice != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(referencePrice, System.Globalization.CultureInfo.InvariantCulture)), "referencePrice");
                    }
                    if (userCategoryId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(userCategoryId, System.Globalization.CultureInfo.InvariantCulture)), "userCategoryId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response28>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response28);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>根据请购单ID获取请购单详情
        /// 根据请购单ID获取请购单详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.requisition.getDetail-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.requisition.getDetail&amp;v=1</summary>
        /// <param name="requisitionId">请购单ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCaigouRequisitionGetDetailResult AlibabaCaigouRequisitionGetDetail(long requisitionId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCaigouRequisitionGetDetailAsync(requisitionId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据请购单ID获取请购单详情
        /// 根据请购单ID获取请购单详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.requisition.getDetail-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.requisition.getDetail&amp;v=1</summary>
        /// <param name="requisitionId">请购单ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCaigouRequisitionGetDetailResult> AlibabaCaigouRequisitionGetDetailAsync(long requisitionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.caigou.requisition.getDetail/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (requisitionId == null)
                        throw new System.ArgumentNullException("requisitionId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(requisitionId, System.Globalization.CultureInfo.InvariantCulture)), "requisitionId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCaigouRequisitionGetDetailResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCaigouRequisitionGetDetailResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>采购商获取报价详情列表
        /// 通过询价单ID获取下面报价单详情列表。该列表中的报价单为审核通过的且是采购商未删除的报价单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.quotation.buyerGetQuotationListByBuyOfferId-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.quotation.buyerGetQuotationListByBuyOfferId&amp;v=1</summary>
        /// <param name="buyofferId">询价单id</param>
        /// <returns>报价返回 ErrorCode 的错误信息
        /// ISV.INVALID_PARAM	- 参数错误(isv端确认参数是否传输正确)
        /// ISP.SYSTEM_ERROR	- 系统错误(isv联系isp进行问题排查)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response33 CaigouApiQuotationBuyerGetQuotationListByBuyOfferId(long buyofferId)
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiQuotationBuyerGetQuotationListByBuyOfferIdAsync(buyofferId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>采购商获取报价详情列表
        /// 通过询价单ID获取下面报价单详情列表。该列表中的报价单为审核通过的且是采购商未删除的报价单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.quotation.buyerGetQuotationListByBuyOfferId-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.quotation.buyerGetQuotationListByBuyOfferId&amp;v=1</summary>
        /// <param name="buyofferId">询价单id</param>
        /// <returns>报价返回 ErrorCode 的错误信息
        /// ISV.INVALID_PARAM	- 参数错误(isv端确认参数是否传输正确)
        /// ISP.SYSTEM_ERROR	- 系统错误(isv联系isp进行问题排查)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response33> CaigouApiQuotationBuyerGetQuotationListByBuyOfferIdAsync(long buyofferId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.quotation.buyerGetQuotationListByBuyOfferId/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (buyofferId == null)
                        throw new System.ArgumentNullException("buyofferId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(buyofferId, System.Globalization.CultureInfo.InvariantCulture)), "buyofferId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response33>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response33);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>发布询价单
        /// 发布询价单(系统对接)
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.buyoffer.postBuyoffer-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.buyoffer.postBuyoffer&amp;v=1</summary>
        /// <param name="subject">询价单标题【不能超过80个字符】</param>
        /// <param name="items">询价单清单。每个item项包括：subject(采购单条目的标题,String类型,不能为空，最大字符长度300), brandName(品牌,String类型,最大字符长度128), unit(单位,String类型,不能为空，最大字符长度10),purchaseAmount(采购数量,Long类型，不能为空)，productCode(对应的产品的code,String类型，最大字符长度64)，prItemId（pr的item项目的行号，string类型，最大长度为64），desc（询价项目的描述，String类型，最大字符长度2000），attachmentIdList（附件id列表，附件的id来源于上传附件接口）</param>
        /// <param name="contact">联系人【不能超过20个字符】</param>
        /// <param name="phone">手机【不能超过40个字符】</param>
        /// <param name="gmtQuotationExpire">报价截止日期</param>
        /// <param name="subUserId">买家子账号id.这个id同创建子账号接口的返回值。如果不创建子账号，可以不传值！</param>
        /// <param name="description">询价单描述【不能超过10000个字符】</param>
        /// <param name="receiveAddressProvince">收货地省(国标)【6个字符】</param>
        /// <param name="receiveAddressCity">收货地市(国标)【6个字符】</param>
        /// <param name="receiveAddressCounty">收货地区(国标)【6个字符】</param>
        /// <param name="expectedSupplierAreas">供应商要求：供应商所在地要求(国标)</param>
        /// <param name="invoiceRequirement">供应商要求：需要的发票类型.ordinary(普通发票),vat(增值税发票),none(无需发票)</param>
        /// <param name="supportAlipayGuaranteeTrade">供应商要求：是否支持支付宝担保交易</param>
        /// <param name="certificateIds">供应商证书要求。具体值如下：1(营业执照), 2(税务登记证), 3(组织机构代码证), 12(国际和国内的产品认证证书), 37(环境管理体系认证证书), 38(企业质量管理体系认证证书), 4(外商投资企业批准证书(外资企业必须)), 103(其他), 400(税务登记证副本（加盖增值税一般纳税人印章）), 5(食品生产许可证 ), 6(酒类生产许可证), 7(化妆品生产许可证), 8(药品生产许可证), 25(安全生产许可证 ), 26(医疗器械生产企业许可证), 27(制造计量器具许可证), 28(特种设备制造许可证（包括压力容器）), 29(建筑业企业资质证书), 30(排放污染物许可证 ), 31(烟草专卖许可证), 32(药品经营许可证), 33(危险化学品经营许可证), 34(烟花爆竹零售经营许可), 35(食品经营许可证), 36(餐饮服务许可证), 39(其他), 101(道路运输经营许可证), 102(印刷经营许可证), 201(食品流通许可证), 202(食品卫生许可证), 203(酒类流通备案登记表), 204(酒类商品批发许可证), 205(酒类商品零售许可证), 206(酒类产销许可证), 207(进口货物报关单), 208(商品出入境检验检疫合格证明), 209(出入境检验检疫卫生证书), 9(产品质量监督检查证书), 10(品牌授权书(如驰名商标、行业知名品牌)), 11(区域代理授权书), 16(纺织品生态标签发明专利、外观设计专利、实用新型外观设计类证书), 17(商标注册证), 19(其他), 20(荣誉证书，如消费者协会荣誉证书、行业协会荣誉证书、重合同守信用证书), 21(银行资信类证书、银行评级证明), 22(开户许可证), 23(公司证明、人事证明、纳税证明)</param>
        /// <param name="otherCertificateNames">供应商要求：其他证书名称【不能超过165个字符】</param>
        /// <param name="regCapital">供应商要求：注册资金。单位万元</param>
        /// <param name="prId">外部系统的采购需求的id （prId）【不要大于64个英文或数字字符】</param>
        /// <param name="attachmentIdList">附件id的列表。附件id来源于上传附件的接口。</param>
        /// <param name="visibleAfterEndQuote">未到截止日期不可查看报价</param>
        /// <param name="includeTax">需要包含税价</param>
        /// <param name="quoteHasPostFee">报价需要包含运费价</param>
        /// <param name="allowPartOffer">允许对询价单商品部分报价</param>
        /// <param name="open">公开询价单</param>
        /// <param name="openToPortal">公开到portal</param>
        /// <param name="processTemplateCode">交易方式</param>
        /// <param name="transToolType">支付方式</param>
        /// <param name="supplierAreas">经营地址</param>
        /// <param name="needSignAgreement">是否需要签署保密协议</param>
        /// <param name="subBizType">采购类型：
        /// singlepurchase:单次采购
        /// priceprotocol:长期采购</param>
        /// <param name="sourceMethodType">询价方式：
        /// open：对1688公开征集供应商
        /// allmysupplier：对所有合格供应商公开询价
        /// selectedmysupplier：只允许我邀请的供应商报价</param>
        /// <param name="supplierMemberIds">邀请供应商</param>
        /// <param name="gmtProtocolStart">价格有效期开始</param>
        /// <param name="gmtProtocolEnd">价格有效期结束</param>
        /// <param name="receiveStreetAddress">收货街道地址</param>
        /// <param name="onlineShoppingDesc">网购文件描述说明</param>
        /// <param name="onlineShoppingAttachList">网购文件附件附件id的列表id来源于上传附件的接口。</param>
        /// <param name="gmtReceiveBeginDate">期望收货开始时间</param>
        /// <param name="gmtReceive">期望收货结束日期</param>
        /// <param name="supplierLoginIds">供应商loginIds</param>
        /// <param name="purchaseNoteType">采购单类型</param>
        /// <param name="deliveryPeriod">交货期</param>
        /// <param name="balanceDateType">账期类型，是否指定结算日</param>
        /// <param name="balanceDateValue">结算日期或结算周期</param>
        /// <param name="allmysupplier">是否邀请所有合格供应商</param>
        /// <param name="selectedmysupplier">是否指定供应商</param>
        /// <param name="openContact2All">是否公开联系方式</param>
        /// <param name="needAudit4OpenContact">联系方式是否需要授权</param>
        /// <param name="openContactBeforeQuote">报价前是否公开联系方式</param>
        /// <param name="invoiceSubType">专票子类型 self 自行开票 agent 税务代开</param>
        /// <param name="supplierCanModifyQuantity">供应商报价可改数量</param>
        /// <param name="supplierCantModifyProtocalDate">供应商不可改价格有效期</param>
        /// <returns>发布成功的询价单id。如果发布失败则为空，具体的看错误码返回 ErrorCode 的错误信息
        /// ISV.EXCEED_BUYOFFER_LIMIT_AMOUNT	- 超过每天发布询价单数目
        /// ISV.INVALID_PARAM	- 非法参数
        /// ISV.OPERATION_PRIVILEGE_ILLEGAL	- 没有发布询价单的权限
        /// ISV.USER_IN_BLACK_LIST	- 该会员被举报，加入了黑名单
        /// ISP.SYSTEM_ERROR	- 系统错误(请联系采购平台)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response34 CaigouApiBuyofferPostBuyoffer(string subject, System.Collections.Generic.IEnumerable<string> items, string contact, string phone, System.DateTimeOffset gmtQuotationExpire, long? subUserId = null, string description = null, string receiveAddressProvince = null, string receiveAddressCity = null, string receiveAddressCounty = null, System.Collections.Generic.IEnumerable<string> expectedSupplierAreas = null, string invoiceRequirement = null, bool? supportAlipayGuaranteeTrade = null, System.Collections.Generic.IEnumerable<string> certificateIds = null, System.Collections.Generic.IEnumerable<string> otherCertificateNames = null, long? regCapital = null, string prId = null, System.Collections.Generic.IEnumerable<string> attachmentIdList = null, bool? visibleAfterEndQuote = null, bool? includeTax = null, bool? quoteHasPostFee = null, bool? allowPartOffer = null, bool? open = null, bool? openToPortal = null, string processTemplateCode = null, string transToolType = null, System.Collections.Generic.IEnumerable<string> supplierAreas = null, string needSignAgreement = null, string subBizType = null, string sourceMethodType = null, System.Collections.Generic.IEnumerable<string> supplierMemberIds = null, System.DateTimeOffset? gmtProtocolStart = null, System.DateTimeOffset? gmtProtocolEnd = null, string receiveStreetAddress = null, string onlineShoppingDesc = null, System.Collections.Generic.IEnumerable<string> onlineShoppingAttachList = null, System.DateTimeOffset? gmtReceiveBeginDate = null, System.DateTimeOffset? gmtReceive = null, System.Collections.Generic.IEnumerable<string> supplierLoginIds = null, string purchaseNoteType = null, int? deliveryPeriod = null, string balanceDateType = null, string balanceDateValue = null, bool? allmysupplier = null, bool? selectedmysupplier = null, bool? openContact2All = null, bool? needAudit4OpenContact = null, bool? openContactBeforeQuote = null, string invoiceSubType = null, bool? supplierCanModifyQuantity = null, bool? supplierCantModifyProtocalDate = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiBuyofferPostBuyofferAsync(subject, items, contact, phone, gmtQuotationExpire, subUserId, description, receiveAddressProvince, receiveAddressCity, receiveAddressCounty, expectedSupplierAreas, invoiceRequirement, supportAlipayGuaranteeTrade, certificateIds, otherCertificateNames, regCapital, prId, attachmentIdList, visibleAfterEndQuote, includeTax, quoteHasPostFee, allowPartOffer, open, openToPortal, processTemplateCode, transToolType, supplierAreas, needSignAgreement, subBizType, sourceMethodType, supplierMemberIds, gmtProtocolStart, gmtProtocolEnd, receiveStreetAddress, onlineShoppingDesc, onlineShoppingAttachList, gmtReceiveBeginDate, gmtReceive, supplierLoginIds, purchaseNoteType, deliveryPeriod, balanceDateType, balanceDateValue, allmysupplier, selectedmysupplier, openContact2All, needAudit4OpenContact, openContactBeforeQuote, invoiceSubType, supplierCanModifyQuantity, supplierCantModifyProtocalDate, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>发布询价单
        /// 发布询价单(系统对接)
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.buyoffer.postBuyoffer-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.buyoffer.postBuyoffer&amp;v=1</summary>
        /// <param name="subject">询价单标题【不能超过80个字符】</param>
        /// <param name="items">询价单清单。每个item项包括：subject(采购单条目的标题,String类型,不能为空，最大字符长度300), brandName(品牌,String类型,最大字符长度128), unit(单位,String类型,不能为空，最大字符长度10),purchaseAmount(采购数量,Long类型，不能为空)，productCode(对应的产品的code,String类型，最大字符长度64)，prItemId（pr的item项目的行号，string类型，最大长度为64），desc（询价项目的描述，String类型，最大字符长度2000），attachmentIdList（附件id列表，附件的id来源于上传附件接口）</param>
        /// <param name="contact">联系人【不能超过20个字符】</param>
        /// <param name="phone">手机【不能超过40个字符】</param>
        /// <param name="gmtQuotationExpire">报价截止日期</param>
        /// <param name="subUserId">买家子账号id.这个id同创建子账号接口的返回值。如果不创建子账号，可以不传值！</param>
        /// <param name="description">询价单描述【不能超过10000个字符】</param>
        /// <param name="receiveAddressProvince">收货地省(国标)【6个字符】</param>
        /// <param name="receiveAddressCity">收货地市(国标)【6个字符】</param>
        /// <param name="receiveAddressCounty">收货地区(国标)【6个字符】</param>
        /// <param name="expectedSupplierAreas">供应商要求：供应商所在地要求(国标)</param>
        /// <param name="invoiceRequirement">供应商要求：需要的发票类型.ordinary(普通发票),vat(增值税发票),none(无需发票)</param>
        /// <param name="supportAlipayGuaranteeTrade">供应商要求：是否支持支付宝担保交易</param>
        /// <param name="certificateIds">供应商证书要求。具体值如下：1(营业执照), 2(税务登记证), 3(组织机构代码证), 12(国际和国内的产品认证证书), 37(环境管理体系认证证书), 38(企业质量管理体系认证证书), 4(外商投资企业批准证书(外资企业必须)), 103(其他), 400(税务登记证副本（加盖增值税一般纳税人印章）), 5(食品生产许可证 ), 6(酒类生产许可证), 7(化妆品生产许可证), 8(药品生产许可证), 25(安全生产许可证 ), 26(医疗器械生产企业许可证), 27(制造计量器具许可证), 28(特种设备制造许可证（包括压力容器）), 29(建筑业企业资质证书), 30(排放污染物许可证 ), 31(烟草专卖许可证), 32(药品经营许可证), 33(危险化学品经营许可证), 34(烟花爆竹零售经营许可), 35(食品经营许可证), 36(餐饮服务许可证), 39(其他), 101(道路运输经营许可证), 102(印刷经营许可证), 201(食品流通许可证), 202(食品卫生许可证), 203(酒类流通备案登记表), 204(酒类商品批发许可证), 205(酒类商品零售许可证), 206(酒类产销许可证), 207(进口货物报关单), 208(商品出入境检验检疫合格证明), 209(出入境检验检疫卫生证书), 9(产品质量监督检查证书), 10(品牌授权书(如驰名商标、行业知名品牌)), 11(区域代理授权书), 16(纺织品生态标签发明专利、外观设计专利、实用新型外观设计类证书), 17(商标注册证), 19(其他), 20(荣誉证书，如消费者协会荣誉证书、行业协会荣誉证书、重合同守信用证书), 21(银行资信类证书、银行评级证明), 22(开户许可证), 23(公司证明、人事证明、纳税证明)</param>
        /// <param name="otherCertificateNames">供应商要求：其他证书名称【不能超过165个字符】</param>
        /// <param name="regCapital">供应商要求：注册资金。单位万元</param>
        /// <param name="prId">外部系统的采购需求的id （prId）【不要大于64个英文或数字字符】</param>
        /// <param name="attachmentIdList">附件id的列表。附件id来源于上传附件的接口。</param>
        /// <param name="visibleAfterEndQuote">未到截止日期不可查看报价</param>
        /// <param name="includeTax">需要包含税价</param>
        /// <param name="quoteHasPostFee">报价需要包含运费价</param>
        /// <param name="allowPartOffer">允许对询价单商品部分报价</param>
        /// <param name="open">公开询价单</param>
        /// <param name="openToPortal">公开到portal</param>
        /// <param name="processTemplateCode">交易方式</param>
        /// <param name="transToolType">支付方式</param>
        /// <param name="supplierAreas">经营地址</param>
        /// <param name="needSignAgreement">是否需要签署保密协议</param>
        /// <param name="subBizType">采购类型：
        /// singlepurchase:单次采购
        /// priceprotocol:长期采购</param>
        /// <param name="sourceMethodType">询价方式：
        /// open：对1688公开征集供应商
        /// allmysupplier：对所有合格供应商公开询价
        /// selectedmysupplier：只允许我邀请的供应商报价</param>
        /// <param name="supplierMemberIds">邀请供应商</param>
        /// <param name="gmtProtocolStart">价格有效期开始</param>
        /// <param name="gmtProtocolEnd">价格有效期结束</param>
        /// <param name="receiveStreetAddress">收货街道地址</param>
        /// <param name="onlineShoppingDesc">网购文件描述说明</param>
        /// <param name="onlineShoppingAttachList">网购文件附件附件id的列表id来源于上传附件的接口。</param>
        /// <param name="gmtReceiveBeginDate">期望收货开始时间</param>
        /// <param name="gmtReceive">期望收货结束日期</param>
        /// <param name="supplierLoginIds">供应商loginIds</param>
        /// <param name="purchaseNoteType">采购单类型</param>
        /// <param name="deliveryPeriod">交货期</param>
        /// <param name="balanceDateType">账期类型，是否指定结算日</param>
        /// <param name="balanceDateValue">结算日期或结算周期</param>
        /// <param name="allmysupplier">是否邀请所有合格供应商</param>
        /// <param name="selectedmysupplier">是否指定供应商</param>
        /// <param name="openContact2All">是否公开联系方式</param>
        /// <param name="needAudit4OpenContact">联系方式是否需要授权</param>
        /// <param name="openContactBeforeQuote">报价前是否公开联系方式</param>
        /// <param name="invoiceSubType">专票子类型 self 自行开票 agent 税务代开</param>
        /// <param name="supplierCanModifyQuantity">供应商报价可改数量</param>
        /// <param name="supplierCantModifyProtocalDate">供应商不可改价格有效期</param>
        /// <returns>发布成功的询价单id。如果发布失败则为空，具体的看错误码返回 ErrorCode 的错误信息
        /// ISV.EXCEED_BUYOFFER_LIMIT_AMOUNT	- 超过每天发布询价单数目
        /// ISV.INVALID_PARAM	- 非法参数
        /// ISV.OPERATION_PRIVILEGE_ILLEGAL	- 没有发布询价单的权限
        /// ISV.USER_IN_BLACK_LIST	- 该会员被举报，加入了黑名单
        /// ISP.SYSTEM_ERROR	- 系统错误(请联系采购平台)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response34> CaigouApiBuyofferPostBuyofferAsync(string subject, System.Collections.Generic.IEnumerable<string> items, string contact, string phone, System.DateTimeOffset gmtQuotationExpire, long? subUserId = null, string description = null, string receiveAddressProvince = null, string receiveAddressCity = null, string receiveAddressCounty = null, System.Collections.Generic.IEnumerable<string> expectedSupplierAreas = null, string invoiceRequirement = null, bool? supportAlipayGuaranteeTrade = null, System.Collections.Generic.IEnumerable<string> certificateIds = null, System.Collections.Generic.IEnumerable<string> otherCertificateNames = null, long? regCapital = null, string prId = null, System.Collections.Generic.IEnumerable<string> attachmentIdList = null, bool? visibleAfterEndQuote = null, bool? includeTax = null, bool? quoteHasPostFee = null, bool? allowPartOffer = null, bool? open = null, bool? openToPortal = null, string processTemplateCode = null, string transToolType = null, System.Collections.Generic.IEnumerable<string> supplierAreas = null, string needSignAgreement = null, string subBizType = null, string sourceMethodType = null, System.Collections.Generic.IEnumerable<string> supplierMemberIds = null, System.DateTimeOffset? gmtProtocolStart = null, System.DateTimeOffset? gmtProtocolEnd = null, string receiveStreetAddress = null, string onlineShoppingDesc = null, System.Collections.Generic.IEnumerable<string> onlineShoppingAttachList = null, System.DateTimeOffset? gmtReceiveBeginDate = null, System.DateTimeOffset? gmtReceive = null, System.Collections.Generic.IEnumerable<string> supplierLoginIds = null, string purchaseNoteType = null, int? deliveryPeriod = null, string balanceDateType = null, string balanceDateValue = null, bool? allmysupplier = null, bool? selectedmysupplier = null, bool? openContact2All = null, bool? needAudit4OpenContact = null, bool? openContactBeforeQuote = null, string invoiceSubType = null, bool? supplierCanModifyQuantity = null, bool? supplierCantModifyProtocalDate = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.buyoffer.postBuyoffer/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (subject == null)
                        throw new System.ArgumentNullException("subject");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(subject, System.Globalization.CultureInfo.InvariantCulture)), "subject");
                    }
                    if (items == null)
                        throw new System.ArgumentNullException("items");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(items, System.Globalization.CultureInfo.InvariantCulture)), "items");
                    }
                    if (contact == null)
                        throw new System.ArgumentNullException("contact");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(contact, System.Globalization.CultureInfo.InvariantCulture)), "contact");
                    }
                    if (phone == null)
                        throw new System.ArgumentNullException("phone");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(phone, System.Globalization.CultureInfo.InvariantCulture)), "phone");
                    }
                    if (gmtQuotationExpire == null)
                        throw new System.ArgumentNullException("gmtQuotationExpire");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(gmtQuotationExpire, System.Globalization.CultureInfo.InvariantCulture)), "gmtQuotationExpire");
                    }
                    if (subUserId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(subUserId, System.Globalization.CultureInfo.InvariantCulture)), "subUserId");
                    }
                    if (description != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture)), "description");
                    }
                    if (receiveAddressProvince != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(receiveAddressProvince, System.Globalization.CultureInfo.InvariantCulture)), "receiveAddressProvince");
                    }
                    if (receiveAddressCity != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(receiveAddressCity, System.Globalization.CultureInfo.InvariantCulture)), "receiveAddressCity");
                    }
                    if (receiveAddressCounty != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(receiveAddressCounty, System.Globalization.CultureInfo.InvariantCulture)), "receiveAddressCounty");
                    }
                    if (expectedSupplierAreas != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(expectedSupplierAreas, System.Globalization.CultureInfo.InvariantCulture)), "expectedSupplierAreas");
                    }
                    if (invoiceRequirement != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(invoiceRequirement, System.Globalization.CultureInfo.InvariantCulture)), "invoiceRequirement");
                    }
                    if (supportAlipayGuaranteeTrade != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(supportAlipayGuaranteeTrade, System.Globalization.CultureInfo.InvariantCulture)), "supportAlipayGuaranteeTrade");
                    }
                    if (certificateIds != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(certificateIds, System.Globalization.CultureInfo.InvariantCulture)), "certificateIds");
                    }
                    if (otherCertificateNames != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(otherCertificateNames, System.Globalization.CultureInfo.InvariantCulture)), "otherCertificateNames");
                    }
                    if (regCapital != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(regCapital, System.Globalization.CultureInfo.InvariantCulture)), "regCapital");
                    }
                    if (prId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(prId, System.Globalization.CultureInfo.InvariantCulture)), "prId");
                    }
                    if (attachmentIdList != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(attachmentIdList, System.Globalization.CultureInfo.InvariantCulture)), "attachmentIdList");
                    }
                    if (visibleAfterEndQuote != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(visibleAfterEndQuote, System.Globalization.CultureInfo.InvariantCulture)), "visibleAfterEndQuote");
                    }
                    if (includeTax != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(includeTax, System.Globalization.CultureInfo.InvariantCulture)), "includeTax");
                    }
                    if (quoteHasPostFee != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(quoteHasPostFee, System.Globalization.CultureInfo.InvariantCulture)), "quoteHasPostFee");
                    }
                    if (allowPartOffer != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(allowPartOffer, System.Globalization.CultureInfo.InvariantCulture)), "allowPartOffer");
                    }
                    if (open != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(open, System.Globalization.CultureInfo.InvariantCulture)), "open");
                    }
                    if (openToPortal != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(openToPortal, System.Globalization.CultureInfo.InvariantCulture)), "openToPortal");
                    }
                    if (processTemplateCode != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(processTemplateCode, System.Globalization.CultureInfo.InvariantCulture)), "processTemplateCode");
                    }
                    if (transToolType != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(transToolType, System.Globalization.CultureInfo.InvariantCulture)), "transToolType");
                    }
                    if (supplierAreas != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(supplierAreas, System.Globalization.CultureInfo.InvariantCulture)), "supplierAreas");
                    }
                    if (needSignAgreement != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(needSignAgreement, System.Globalization.CultureInfo.InvariantCulture)), "needSignAgreement");
                    }
                    if (subBizType != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(subBizType, System.Globalization.CultureInfo.InvariantCulture)), "subBizType");
                    }
                    if (sourceMethodType != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(sourceMethodType, System.Globalization.CultureInfo.InvariantCulture)), "sourceMethodType");
                    }
                    if (supplierMemberIds != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(supplierMemberIds, System.Globalization.CultureInfo.InvariantCulture)), "supplierMemberIds");
                    }
                    if (gmtProtocolStart != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(gmtProtocolStart, System.Globalization.CultureInfo.InvariantCulture)), "gmtProtocolStart");
                    }
                    if (gmtProtocolEnd != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(gmtProtocolEnd, System.Globalization.CultureInfo.InvariantCulture)), "gmtProtocolEnd");
                    }
                    if (receiveStreetAddress != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(receiveStreetAddress, System.Globalization.CultureInfo.InvariantCulture)), "receiveStreetAddress");
                    }
                    if (onlineShoppingDesc != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(onlineShoppingDesc, System.Globalization.CultureInfo.InvariantCulture)), "onlineShoppingDesc");
                    }
                    if (onlineShoppingAttachList != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(onlineShoppingAttachList, System.Globalization.CultureInfo.InvariantCulture)), "onlineShoppingAttachList");
                    }
                    if (gmtReceiveBeginDate != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(gmtReceiveBeginDate, System.Globalization.CultureInfo.InvariantCulture)), "gmtReceiveBeginDate");
                    }
                    if (gmtReceive != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(gmtReceive, System.Globalization.CultureInfo.InvariantCulture)), "gmtReceive");
                    }
                    if (supplierLoginIds != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(supplierLoginIds, System.Globalization.CultureInfo.InvariantCulture)), "supplierLoginIds");
                    }
                    if (purchaseNoteType != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(purchaseNoteType, System.Globalization.CultureInfo.InvariantCulture)), "purchaseNoteType");
                    }
                    if (deliveryPeriod != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(deliveryPeriod, System.Globalization.CultureInfo.InvariantCulture)), "deliveryPeriod");
                    }
                    if (balanceDateType != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(balanceDateType, System.Globalization.CultureInfo.InvariantCulture)), "balanceDateType");
                    }
                    if (balanceDateValue != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(balanceDateValue, System.Globalization.CultureInfo.InvariantCulture)), "balanceDateValue");
                    }
                    if (allmysupplier != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(allmysupplier, System.Globalization.CultureInfo.InvariantCulture)), "allmysupplier");
                    }
                    if (selectedmysupplier != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(selectedmysupplier, System.Globalization.CultureInfo.InvariantCulture)), "selectedmysupplier");
                    }
                    if (openContact2All != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(openContact2All, System.Globalization.CultureInfo.InvariantCulture)), "openContact2All");
                    }
                    if (needAudit4OpenContact != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(needAudit4OpenContact, System.Globalization.CultureInfo.InvariantCulture)), "needAudit4OpenContact");
                    }
                    if (openContactBeforeQuote != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(openContactBeforeQuote, System.Globalization.CultureInfo.InvariantCulture)), "openContactBeforeQuote");
                    }
                    if (invoiceSubType != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(invoiceSubType, System.Globalization.CultureInfo.InvariantCulture)), "invoiceSubType");
                    }
                    if (supplierCanModifyQuantity != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(supplierCanModifyQuantity, System.Globalization.CultureInfo.InvariantCulture)), "supplierCanModifyQuantity");
                    }
                    if (supplierCantModifyProtocalDate != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(supplierCantModifyProtocalDate, System.Globalization.CultureInfo.InvariantCulture)), "supplierCantModifyProtocalDate");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response34>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response34);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>上传图片
        /// 上传图片
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.image.upload-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.image.upload&amp;v=1</summary>
        /// <param name="name">图片名称，最长30个字符,如果超长则截取前30个字符.</param>
        /// <param name="fileBytes">图片的二进制数据，向服务端提交文件即可 (fileBytes这个参数不能签名)。使用 enctype=&amp;quot;multipart/form-data&amp;quot; 的POST文件上传方式提交数据，最大只支持5M的文件图片</param>
        /// <param name="description">图片描述，最长2000个字符,如果超长则截取前2000个字符</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// PARAM_MISS	- 参数丢失(确认参数传送按照要求)
        /// NOT_SUPPORT_SOURCE	- 上传来源不支持(联系管理员)
        /// FILE_NOT_SUPPORT	- 文件格式不支持(该文件不支持上传)
        /// SYS_ERROR	- 系统错误(联系管理员)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public CaigouApiImageUploadResult CaigouApiImageUpload(string name, byte[] fileBytes, string description = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiImageUploadAsync(name, fileBytes, description, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>上传图片
        /// 上传图片
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.image.upload-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.image.upload&amp;v=1</summary>
        /// <param name="name">图片名称，最长30个字符,如果超长则截取前30个字符.</param>
        /// <param name="fileBytes">图片的二进制数据，向服务端提交文件即可 (fileBytes这个参数不能签名)。使用 enctype=&amp;quot;multipart/form-data&amp;quot; 的POST文件上传方式提交数据，最大只支持5M的文件图片</param>
        /// <param name="description">图片描述，最长2000个字符,如果超长则截取前2000个字符</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// PARAM_MISS	- 参数丢失(确认参数传送按照要求)
        /// NOT_SUPPORT_SOURCE	- 上传来源不支持(联系管理员)
        /// FILE_NOT_SUPPORT	- 文件格式不支持(该文件不支持上传)
        /// SYS_ERROR	- 系统错误(联系管理员)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaigouApiImageUploadResult> CaigouApiImageUploadAsync(string name, byte[] fileBytes, string description = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.image.upload/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (name == null)
                        throw new System.ArgumentNullException("name");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)), "name");
                    }
                    if (fileBytes == null)
                        throw new System.ArgumentNullException("fileBytes");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(fileBytes, System.Globalization.CultureInfo.InvariantCulture)), "fileBytes");
                    }
                    if (description != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture)), "description");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaigouApiImageUploadResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CaigouApiImageUploadResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>创建商城请购单
        /// 创建商城请购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.caigou.biz.api.cooper.service.OpenRequisitionService.createMallRequisition-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.caigou.biz.api.cooper.service.OpenRequisitionService.createMallRequisition&amp;v=1</summary>
        /// <param name="openCreateRequisitionParam">参考文档</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public ComAlibabaCaigouBizApiCooperServiceOpenRequisitionServiceCreateMallRequisitionResult ComAlibabaCaigouBizApiCooperServiceOpenRequisitionServiceCreateMallRequisition(AlibabaCaigouBizApiCooperParamOpenCreateRequisitionParam openCreateRequisitionParam = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await ComAlibabaCaigouBizApiCooperServiceOpenRequisitionServiceCreateMallRequisitionAsync(openCreateRequisitionParam, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建商城请购单
        /// 创建商城请购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.caigou.biz.api.cooper.service.OpenRequisitionService.createMallRequisition-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.caigou.biz.api.cooper.service.OpenRequisitionService.createMallRequisition&amp;v=1</summary>
        /// <param name="openCreateRequisitionParam">参考文档</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ComAlibabaCaigouBizApiCooperServiceOpenRequisitionServiceCreateMallRequisitionResult> ComAlibabaCaigouBizApiCooperServiceOpenRequisitionServiceCreateMallRequisitionAsync(AlibabaCaigouBizApiCooperParamOpenCreateRequisitionParam openCreateRequisitionParam = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/com.alibaba.caigou.biz.api.cooper.service.OpenRequisitionService.createMallRequisition/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (openCreateRequisitionParam != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(openCreateRequisitionParam, System.Globalization.CultureInfo.InvariantCulture)), "openCreateRequisitionParam");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ComAlibabaCaigouBizApiCooperServiceOpenRequisitionServiceCreateMallRequisitionResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ComAlibabaCaigouBizApiCooperServiceOpenRequisitionServiceCreateMallRequisitionResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>内部商城根据商品ID获取商品详情
        /// 内部商城根据商品ID获取商品详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.mall.getMallGoods-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.mall.getMallGoods&amp;v=1</summary>
        /// <param name="goodsId">商品ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCaigouMallGetMallGoodsResult AlibabaCaigouMallGetMallGoods(long goodsId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCaigouMallGetMallGoodsAsync(goodsId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>内部商城根据商品ID获取商品详情
        /// 内部商城根据商品ID获取商品详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.mall.getMallGoods-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.mall.getMallGoods&amp;v=1</summary>
        /// <param name="goodsId">商品ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCaigouMallGetMallGoodsResult> AlibabaCaigouMallGetMallGoodsAsync(long goodsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.caigou.mall.getMallGoods/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (goodsId == null)
                        throw new System.ArgumentNullException("goodsId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(goodsId, System.Globalization.CultureInfo.InvariantCulture)), "goodsId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCaigouMallGetMallGoodsResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCaigouMallGetMallGoodsResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>查询唯一物料工厂
        /// 查询唯一物料工厂
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.getProductFactory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.getProductFactory&amp;v=1</summary>
        /// <param name="systemDomainCode">系统域编码</param>
        /// <param name="productCode">物料编码</param>
        /// <param name="factoryCode">工厂编码</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public CnAlibabaOpenAlibabaCaigouProductGetProductFactoryAlibabaCaigouProductResultData AlibabaCaigouProductGetProductFactory(string systemDomainCode, string productCode, string factoryCode)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCaigouProductGetProductFactoryAsync(systemDomainCode, productCode, factoryCode, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询唯一物料工厂
        /// 查询唯一物料工厂
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.getProductFactory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.getProductFactory&amp;v=1</summary>
        /// <param name="systemDomainCode">系统域编码</param>
        /// <param name="productCode">物料编码</param>
        /// <param name="factoryCode">工厂编码</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CnAlibabaOpenAlibabaCaigouProductGetProductFactoryAlibabaCaigouProductResultData> AlibabaCaigouProductGetProductFactoryAsync(string systemDomainCode, string productCode, string factoryCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.caigou.product.getProductFactory/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (systemDomainCode == null)
                        throw new System.ArgumentNullException("systemDomainCode");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(systemDomainCode, System.Globalization.CultureInfo.InvariantCulture)), "systemDomainCode");
                    }
                    if (productCode == null)
                        throw new System.ArgumentNullException("productCode");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture)), "productCode");
                    }
                    if (factoryCode == null)
                        throw new System.ArgumentNullException("factoryCode");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(factoryCode, System.Globalization.CultureInfo.InvariantCulture)), "factoryCode");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CnAlibabaOpenAlibabaCaigouProductGetProductFactoryAlibabaCaigouProductResultData>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CnAlibabaOpenAlibabaCaigouProductGetProductFactoryAlibabaCaigouProductResultData);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>创建请购单
        /// 创建请购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.caigou.biz.api.cooper.service.OpenRequisitionService-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.caigou.biz.api.cooper.service.OpenRequisitionService&amp;v=1</summary>
        /// <param name="openCreateRequisitionParam">创建请购单参数模型</param>
        /// <returns>返回模型返回 ErrorCode 的错误信息
        /// 参数错误	- invalidParam(根据对接文档检查参数)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCaigouBizApiCommonModelResultData ComAlibabaCaigouBizApiCooperServiceOpenRequisitionService(CnAlibabaOpenComAlibabaCaigouBizApiCooperServiceOpenRequisitionServiceAlibabaCaigouBizApiCooperParamOpenCreateRequisitionParam openCreateRequisitionParam = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await ComAlibabaCaigouBizApiCooperServiceOpenRequisitionServiceAsync(openCreateRequisitionParam, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建请购单
        /// 创建请购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.caigou.biz.api.cooper.service.OpenRequisitionService-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.caigou.biz.api.cooper.service.OpenRequisitionService&amp;v=1</summary>
        /// <param name="openCreateRequisitionParam">创建请购单参数模型</param>
        /// <returns>返回模型返回 ErrorCode 的错误信息
        /// 参数错误	- invalidParam(根据对接文档检查参数)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCaigouBizApiCommonModelResultData> ComAlibabaCaigouBizApiCooperServiceOpenRequisitionServiceAsync(CnAlibabaOpenComAlibabaCaigouBizApiCooperServiceOpenRequisitionServiceAlibabaCaigouBizApiCooperParamOpenCreateRequisitionParam openCreateRequisitionParam = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/com.alibaba.caigou.biz.api.cooper.service.OpenRequisitionService/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (openCreateRequisitionParam != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(openCreateRequisitionParam, System.Globalization.CultureInfo.InvariantCulture)), "openCreateRequisitionParam");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCaigouBizApiCommonModelResultData>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCaigouBizApiCommonModelResultData);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>查询所有自定义类目
        /// 查询所有d 自定义类目
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.category.queryAll-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.category.queryAll&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response29 CaigouApiCategoryQueryAll()
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiCategoryQueryAllAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询所有自定义类目
        /// 查询所有d 自定义类目
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.category.queryAll-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.category.queryAll&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response29> CaigouApiCategoryQueryAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.category.queryAll/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response29>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response29);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>采购-买家查询结算单
        /// 采购-买家查询结算单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.procurement.BuyerSettlementService.querySettlementNote-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.procurement.BuyerSettlementService.querySettlementNote&amp;v=1</summary>
        /// <param name="settlementNoteId">结算单ID</param>
        /// <param name="needEntryExtendsData">是否需要扩展数据</param>
        /// <returns>Result返回 ErrorCode 的错误信息
        /// invalid_param	- 无效参数(检查参数)
        /// no_permission	- 无权限(检查是否有权限操作该单)
        /// system_error	- 系统错误(联系服务提供方)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public CnAlibabaOpenComAlibabaProcurementBuyerSettlementServiceQuerySettlementNoteAlibabaProcurementApiIntegrationResultResultData ComAlibabaProcurementBuyerSettlementServiceQuerySettlementNote(long settlementNoteId, bool? needEntryExtendsData = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await ComAlibabaProcurementBuyerSettlementServiceQuerySettlementNoteAsync(settlementNoteId, needEntryExtendsData, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>采购-买家查询结算单
        /// 采购-买家查询结算单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.procurement.BuyerSettlementService.querySettlementNote-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.procurement.BuyerSettlementService.querySettlementNote&amp;v=1</summary>
        /// <param name="settlementNoteId">结算单ID</param>
        /// <param name="needEntryExtendsData">是否需要扩展数据</param>
        /// <returns>Result返回 ErrorCode 的错误信息
        /// invalid_param	- 无效参数(检查参数)
        /// no_permission	- 无权限(检查是否有权限操作该单)
        /// system_error	- 系统错误(联系服务提供方)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CnAlibabaOpenComAlibabaProcurementBuyerSettlementServiceQuerySettlementNoteAlibabaProcurementApiIntegrationResultResultData> ComAlibabaProcurementBuyerSettlementServiceQuerySettlementNoteAsync(long settlementNoteId, bool? needEntryExtendsData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/com.alibaba.procurement.BuyerSettlementService.querySettlementNote/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (settlementNoteId == null)
                        throw new System.ArgumentNullException("settlementNoteId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(settlementNoteId, System.Globalization.CultureInfo.InvariantCulture)), "settlementNoteId");
                    }
                    if (needEntryExtendsData != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(needEntryExtendsData, System.Globalization.CultureInfo.InvariantCulture)), "needEntryExtendsData");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CnAlibabaOpenComAlibabaProcurementBuyerSettlementServiceQuerySettlementNoteAlibabaProcurementApiIntegrationResultResultData>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CnAlibabaOpenComAlibabaProcurementBuyerSettlementServiceQuerySettlementNoteAlibabaProcurementApiIntegrationResultResultData);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取采购单详情
        /// 根据ID获取采购单详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.getPurcharseOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.getPurcharseOrder&amp;v=1</summary>
        /// <param name="purchaseOrderId">采购单ID</param>
        /// <returns>返回值</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCaigousharedApiCommonModelResultData AlibabaCaigouGetPurcharseOrder(long purchaseOrderId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCaigouGetPurcharseOrderAsync(purchaseOrderId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取采购单详情
        /// 根据ID获取采购单详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.getPurcharseOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.getPurcharseOrder&amp;v=1</summary>
        /// <param name="purchaseOrderId">采购单ID</param>
        /// <returns>返回值</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCaigousharedApiCommonModelResultData> AlibabaCaigouGetPurcharseOrderAsync(long purchaseOrderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.caigou.getPurcharseOrder/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (purchaseOrderId == null)
                        throw new System.ArgumentNullException("purchaseOrderId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(purchaseOrderId, System.Globalization.CultureInfo.InvariantCulture)), "purchaseOrderId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCaigousharedApiCommonModelResultData>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCaigousharedApiCommonModelResultData);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>查询式获取失败的消息列表
        /// 查询式获取发送的消息列表，获取的消息不会自动确认，需要调用方手动调用确认api来确认消费状态。需注意，确认后，会影响分页返回的数据
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:push.query.messageList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=push.query.messageList&amp;v=1</summary>
        /// <param name="createStartTime">消息创建时间查找开始范围</param>
        /// <param name="createEndTime">消息创建时间查找结束范围</param>
        /// <param name="page">当前数据页，默认为1</param>
        /// <param name="pageSize">每次分页取的数据量，范围20-200，默认20</param>
        /// <returns>分页数据</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response35 PushQueryMessageList(System.DateTimeOffset? createStartTime = null, System.DateTimeOffset? createEndTime = null, int? page = null, int? pageSize = null, string type = null, string userInfo = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await PushQueryMessageListAsync(createStartTime, createEndTime, page, pageSize, type, userInfo, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询式获取失败的消息列表
        /// 查询式获取发送的消息列表，获取的消息不会自动确认，需要调用方手动调用确认api来确认消费状态。需注意，确认后，会影响分页返回的数据
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:push.query.messageList-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=push.query.messageList&amp;v=1</summary>
        /// <param name="createStartTime">消息创建时间查找开始范围</param>
        /// <param name="createEndTime">消息创建时间查找结束范围</param>
        /// <param name="page">当前数据页，默认为1</param>
        /// <param name="pageSize">每次分页取的数据量，范围20-200，默认20</param>
        /// <returns>分页数据</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response35> PushQueryMessageListAsync(System.DateTimeOffset? createStartTime = null, System.DateTimeOffset? createEndTime = null, int? page = null, int? pageSize = null, string type = null, string userInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/push.query.messageList/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (createStartTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(createStartTime, System.Globalization.CultureInfo.InvariantCulture)), "createStartTime");
                    }
                    if (createEndTime != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(createEndTime, System.Globalization.CultureInfo.InvariantCulture)), "createEndTime");
                    }
                    if (page != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture)), "page");
                    }
                    if (pageSize != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    if (type != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture)), "type");
                    }
                    if (userInfo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(userInfo, System.Globalization.CultureInfo.InvariantCulture)), "userInfo");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response35>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response35);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>根据id获取类目信息
        /// 根据id获取类目信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.category.getById-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.category.getById&amp;v=1</summary>
        /// <param name="categoryId">类目在1688上的id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public CaigouDomainCategoryTopCategory CaigouApiCategoryGetById(long categoryId)
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiCategoryGetByIdAsync(categoryId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据id获取类目信息
        /// 根据id获取类目信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.category.getById-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.category.getById&amp;v=1</summary>
        /// <param name="categoryId">类目在1688上的id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaigouDomainCategoryTopCategory> CaigouApiCategoryGetByIdAsync(long categoryId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.category.getById/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (categoryId == null)
                        throw new System.ArgumentNullException("categoryId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(categoryId, System.Globalization.CultureInfo.InvariantCulture)), "categoryId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaigouDomainCategoryTopCategory>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CaigouDomainCategoryTopCategory);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>批量添加或修改物料工厂(没有则新增，存在则修改)
        /// 批量添加或修改物料工厂(没有则新增，存在则修改)
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.batchAddOrUpdateProductFactory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.batchAddOrUpdateProductFactory&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public CnAlibabaOpenAlibabaCaigouProductBatchAddOrUpdateProductFactoryAlibabaCaigouProductResultData AlibabaCaigouProductBatchAddOrUpdateProductFactory(System.Collections.Generic.IEnumerable<AlibabaCaigouProductAddUpdateProductFactoryParam> addUpdateProductFactoryParams)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCaigouProductBatchAddOrUpdateProductFactoryAsync(addUpdateProductFactoryParams, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>批量添加或修改物料工厂(没有则新增，存在则修改)
        /// 批量添加或修改物料工厂(没有则新增，存在则修改)
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.batchAddOrUpdateProductFactory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.batchAddOrUpdateProductFactory&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CnAlibabaOpenAlibabaCaigouProductBatchAddOrUpdateProductFactoryAlibabaCaigouProductResultData> AlibabaCaigouProductBatchAddOrUpdateProductFactoryAsync(System.Collections.Generic.IEnumerable<AlibabaCaigouProductAddUpdateProductFactoryParam> addUpdateProductFactoryParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.caigou.product.batchAddOrUpdateProductFactory/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (addUpdateProductFactoryParams == null)
                        throw new System.ArgumentNullException("addUpdateProductFactoryParams");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(addUpdateProductFactoryParams, System.Globalization.CultureInfo.InvariantCulture)), "addUpdateProductFactoryParams");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CnAlibabaOpenAlibabaCaigouProductBatchAddOrUpdateProductFactoryAlibabaCaigouProductResultData>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CnAlibabaOpenAlibabaCaigouProductBatchAddOrUpdateProductFactoryAlibabaCaigouProductResultData);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>采购执行买家付款
        /// 采购执行买家付款
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.procurement.BuyerPayService.createPayNote-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.procurement.BuyerPayService.createPayNote&amp;v=1</summary>
        /// <param name="param">param</param>
        /// <returns>result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public CnAlibabaOpenComAlibabaProcurementBuyerPayServiceCreatePayNoteAlibabaProcurementApiIntegrationResultResultData ComAlibabaProcurementBuyerPayServiceCreatePayNote(AlibabaProcurementApiSettlementIntegrationParamCreatePayParam param)
        {
            return System.Threading.Tasks.Task.Run(async () => await ComAlibabaProcurementBuyerPayServiceCreatePayNoteAsync(param, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>采购执行买家付款
        /// 采购执行买家付款
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.procurement.BuyerPayService.createPayNote-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.procurement.BuyerPayService.createPayNote&amp;v=1</summary>
        /// <param name="param">param</param>
        /// <returns>result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CnAlibabaOpenComAlibabaProcurementBuyerPayServiceCreatePayNoteAlibabaProcurementApiIntegrationResultResultData> ComAlibabaProcurementBuyerPayServiceCreatePayNoteAsync(AlibabaProcurementApiSettlementIntegrationParamCreatePayParam param, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/com.alibaba.procurement.BuyerPayService.createPayNote/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (param == null)
                        throw new System.ArgumentNullException("param");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(param, System.Globalization.CultureInfo.InvariantCulture)), "param");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CnAlibabaOpenComAlibabaProcurementBuyerPayServiceCreatePayNoteAlibabaProcurementApiIntegrationResultResultData>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CnAlibabaOpenComAlibabaProcurementBuyerPayServiceCreatePayNoteAlibabaProcurementApiIntegrationResultResultData);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>提交电票接口
        /// 提交电票接口
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.procurement.BuyerETicketService.submitETicket-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.procurement.BuyerETicketService.submitETicket&amp;v=1</summary>
        /// <param name="arg0">入参</param>
        /// <returns>结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaProcurementApiIntegrationResultResultData ComAlibabaProcurementBuyerETicketServiceSubmitETicket(AlibabaProcurementApiSettlementIntegrationParamETicketSubmitIntegrationParam arg0)
        {
            return System.Threading.Tasks.Task.Run(async () => await ComAlibabaProcurementBuyerETicketServiceSubmitETicketAsync(arg0, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>提交电票接口
        /// 提交电票接口
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.procurement.BuyerETicketService.submitETicket-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.procurement.BuyerETicketService.submitETicket&amp;v=1</summary>
        /// <param name="arg0">入参</param>
        /// <returns>结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaProcurementApiIntegrationResultResultData> ComAlibabaProcurementBuyerETicketServiceSubmitETicketAsync(AlibabaProcurementApiSettlementIntegrationParamETicketSubmitIntegrationParam arg0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/com.alibaba.procurement.BuyerETicketService.submitETicket/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (arg0 == null)
                        throw new System.ArgumentNullException("arg0");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(arg0, System.Globalization.CultureInfo.InvariantCulture)), "arg0");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaProcurementApiIntegrationResultResultData>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaProcurementApiIntegrationResultResultData);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>采购商上架内部商城商品
        /// 采购商上架内部商城商品
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.buyerPublishMallGoods-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.buyerPublishMallGoods&amp;v=1</summary>
        /// <param name="goodsId">商品id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCaigouBuyerPublishMallGoodsResult AlibabaCaigouBuyerPublishMallGoods(long goodsId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCaigouBuyerPublishMallGoodsAsync(goodsId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>采购商上架内部商城商品
        /// 采购商上架内部商城商品
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.buyerPublishMallGoods-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.buyerPublishMallGoods&amp;v=1</summary>
        /// <param name="goodsId">商品id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCaigouBuyerPublishMallGoodsResult> AlibabaCaigouBuyerPublishMallGoodsAsync(long goodsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.caigou.buyerPublishMallGoods/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (goodsId == null)
                        throw new System.ArgumentNullException("goodsId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(goodsId, System.Globalization.CultureInfo.InvariantCulture)), "goodsId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCaigouBuyerPublishMallGoodsResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCaigouBuyerPublishMallGoodsResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>新增自定义类目
        /// 新增自定义类目，采购使用
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.category.addUserCategory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.category.addUserCategory&amp;v=1</summary>
        /// <param name="categoryList">Json串，包含字段：categoryName：类目名称，categoryId：类目在外部业务的主键编码，parentId：父节点在外部系统的业务编码。</param>
        /// <returns>返回结果为Map，key为外部系统的类目id，value为1688平台的类目id</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response36 CaigouApiCategoryAddUserCategory(System.Collections.Generic.IEnumerable<string> categoryList)
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiCategoryAddUserCategoryAsync(categoryList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>新增自定义类目
        /// 新增自定义类目，采购使用
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.category.addUserCategory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.category.addUserCategory&amp;v=1</summary>
        /// <param name="categoryList">Json串，包含字段：categoryName：类目名称，categoryId：类目在外部业务的主键编码，parentId：父节点在外部系统的业务编码。</param>
        /// <returns>返回结果为Map，key为外部系统的类目id，value为1688平台的类目id</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response36> CaigouApiCategoryAddUserCategoryAsync(System.Collections.Generic.IEnumerable<string> categoryList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.category.addUserCategory/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (categoryList == null)
                        throw new System.ArgumentNullException("categoryList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(categoryList, System.Globalization.CultureInfo.InvariantCulture)), "categoryList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response36>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response36);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>删除自定义类目
        /// 删除自定义类目，只能删除没有叶子节点的类目，如果有叶子节点，要先把叶子节点删除，再删除该类目
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.category.deleteUserCategory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.category.deleteUserCategory&amp;v=1</summary>
        /// <param name="categoryIds">需要删除的类目在1688平台的id列表</param>
        /// <returns>操作结果返回 ErrorCode 的错误信息
        /// CATEGORY_FAILED_HAS_CHILDREN	- 所删类目中，存在有叶子类目的类目(先删除叶子类目，再删除父类目)
        /// SYSTEM_ERROR	- 系统异常(联系开发同学)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response28 CaigouApiCategoryDeleteUserCategory(System.Collections.Generic.IEnumerable<string> categoryIds)
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiCategoryDeleteUserCategoryAsync(categoryIds, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>删除自定义类目
        /// 删除自定义类目，只能删除没有叶子节点的类目，如果有叶子节点，要先把叶子节点删除，再删除该类目
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.category.deleteUserCategory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.category.deleteUserCategory&amp;v=1</summary>
        /// <param name="categoryIds">需要删除的类目在1688平台的id列表</param>
        /// <returns>操作结果返回 ErrorCode 的错误信息
        /// CATEGORY_FAILED_HAS_CHILDREN	- 所删类目中，存在有叶子类目的类目(先删除叶子类目，再删除父类目)
        /// SYSTEM_ERROR	- 系统异常(联系开发同学)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response28> CaigouApiCategoryDeleteUserCategoryAsync(System.Collections.Generic.IEnumerable<string> categoryIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.category.deleteUserCategory/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (categoryIds == null)
                        throw new System.ArgumentNullException("categoryIds");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(categoryIds, System.Globalization.CultureInfo.InvariantCulture)), "categoryIds");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response28>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response28);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>通过产品id获取产品
        /// 通过产品id获取产品详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.product.queryProductById-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.product.queryProductById&amp;v=1</summary>
        /// <param name="productId">产品在1688所属id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public CaigouDomainProductProductCoop CaigouApiProductQueryProductById(long productId)
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiProductQueryProductByIdAsync(productId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>通过产品id获取产品
        /// 通过产品id获取产品详情
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.product.queryProductById-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.product.queryProductById&amp;v=1</summary>
        /// <param name="productId">产品在1688所属id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaigouDomainProductProductCoop> CaigouApiProductQueryProductByIdAsync(long productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.product.queryProductById/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (productId == null)
                        throw new System.ArgumentNullException("productId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture)), "productId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaigouDomainProductProductCoop>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CaigouDomainProductProductCoop);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>查询退货单接口
        /// 查询退货单接口
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.procurement.BuyerReturnGoodsService.queryReturnGoodsNote-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.procurement.BuyerReturnGoodsService.queryReturnGoodsNote&amp;v=1</summary>
        /// <param name="id">退货单ID</param>
        /// <returns>返回结果模型</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public CnAlibabaOpenComAlibabaProcurementBuyerReturnGoodsServiceQueryReturnGoodsNoteAlibabaProcurementApiIntegrationResultResultData ComAlibabaProcurementBuyerReturnGoodsServiceQueryReturnGoodsNote(long id)
        {
            return System.Threading.Tasks.Task.Run(async () => await ComAlibabaProcurementBuyerReturnGoodsServiceQueryReturnGoodsNoteAsync(id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询退货单接口
        /// 查询退货单接口
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:com.alibaba.procurement.BuyerReturnGoodsService.queryReturnGoodsNote-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=com.alibaba.procurement.BuyerReturnGoodsService.queryReturnGoodsNote&amp;v=1</summary>
        /// <param name="id">退货单ID</param>
        /// <returns>返回结果模型</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CnAlibabaOpenComAlibabaProcurementBuyerReturnGoodsServiceQueryReturnGoodsNoteAlibabaProcurementApiIntegrationResultResultData> ComAlibabaProcurementBuyerReturnGoodsServiceQueryReturnGoodsNoteAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/com.alibaba.procurement.BuyerReturnGoodsService.queryReturnGoodsNote/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (id == null)
                        throw new System.ArgumentNullException("id");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)), "id");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CnAlibabaOpenComAlibabaProcurementBuyerReturnGoodsServiceQueryReturnGoodsNoteAlibabaProcurementApiIntegrationResultResultData>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CnAlibabaOpenComAlibabaProcurementBuyerReturnGoodsServiceQueryReturnGoodsNoteAlibabaProcurementApiIntegrationResultResultData);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>采购商上架商品确认价格协议
        /// 对于上架商品，如果这个时候供应商通过推品工具或者直接上传价格表，需要采购商进行价格协议的确认
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.approvalPrice-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.approvalPrice&amp;v=1</summary>
        /// <param name="goodsId">商品ID</param>
        /// <param name="isPass">是否通过</param>
        /// <param name="remark">意见</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCaigouApprovalPriceResult AlibabaCaigouApprovalPrice(long goodsId, bool isPass, string remark = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCaigouApprovalPriceAsync(goodsId, isPass, remark, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>采购商上架商品确认价格协议
        /// 对于上架商品，如果这个时候供应商通过推品工具或者直接上传价格表，需要采购商进行价格协议的确认
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.approvalPrice-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.approvalPrice&amp;v=1</summary>
        /// <param name="goodsId">商品ID</param>
        /// <param name="isPass">是否通过</param>
        /// <param name="remark">意见</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCaigouApprovalPriceResult> AlibabaCaigouApprovalPriceAsync(long goodsId, bool isPass, string remark = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.caigou.approvalPrice/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (goodsId == null)
                        throw new System.ArgumentNullException("goodsId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(goodsId, System.Globalization.CultureInfo.InvariantCulture)), "goodsId");
                    }
                    if (isPass == null)
                        throw new System.ArgumentNullException("isPass");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(isPass, System.Globalization.CultureInfo.InvariantCulture)), "isPass");
                    }
                    if (remark != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(remark, System.Globalization.CultureInfo.InvariantCulture)), "remark");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCaigouApprovalPriceResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCaigouApprovalPriceResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>供应商信息获取
        /// 根据供应商memberId获取供应商信息.每次返回一条关于该账号的数据信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.supplier.getSupplier-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.supplier.getSupplier&amp;v=1</summary>
        /// <param name="memberId">供应商memberId</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Supplier CaigouApiSupplierGetSupplier(string memberId)
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiSupplierGetSupplierAsync(memberId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>供应商信息获取
        /// 根据供应商memberId获取供应商信息.每次返回一条关于该账号的数据信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.supplier.getSupplier-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.supplier.getSupplier&amp;v=1</summary>
        /// <param name="memberId">供应商memberId</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Supplier> CaigouApiSupplierGetSupplierAsync(string memberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.supplier.getSupplier/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (memberId == null)
                        throw new System.ArgumentNullException("memberId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(memberId, System.Globalization.CultureInfo.InvariantCulture)), "memberId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Supplier>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Supplier);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>修改自定义类目
        /// 修改自定义类目
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.category.modifyUserCategory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.category.modifyUserCategory&amp;v=1</summary>
        /// <param name="categoryList">Json串，包含字段：categoryName：类目名称，categoryId：必填，类目在1688的主键编码，parentId：父类目在1688的业务编码。</param>
        /// <returns>修改结果返回 ErrorCode 的错误信息
        /// CATEGORY_FAILED	- 同步自定义类目失败(请重新尝试，确保所传类目存在)
        /// SYSTEM_ERROR	- 系统异常(联系开发同学)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response28 CaigouApiCategoryModifyUserCategory(System.Collections.Generic.IEnumerable<string> categoryList)
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiCategoryModifyUserCategoryAsync(categoryList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>修改自定义类目
        /// 修改自定义类目
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.category.modifyUserCategory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.category.modifyUserCategory&amp;v=1</summary>
        /// <param name="categoryList">Json串，包含字段：categoryName：类目名称，categoryId：必填，类目在1688的主键编码，parentId：父类目在1688的业务编码。</param>
        /// <returns>修改结果返回 ErrorCode 的错误信息
        /// CATEGORY_FAILED	- 同步自定义类目失败(请重新尝试，确保所传类目存在)
        /// SYSTEM_ERROR	- 系统异常(联系开发同学)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response28> CaigouApiCategoryModifyUserCategoryAsync(System.Collections.Generic.IEnumerable<string> categoryList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.category.modifyUserCategory/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (categoryList == null)
                        throw new System.ArgumentNullException("categoryList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(categoryList, System.Globalization.CultureInfo.InvariantCulture)), "categoryList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response28>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response28);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>采购商驳回内部商城商品
        /// 采购商驳回内部商城商品
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.buyerRejectUnPublishGoods-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.buyerRejectUnPublishGoods&amp;v=1</summary>
        /// <param name="goodsId">商品Id</param>
        /// <param name="memo">驳回信息</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCaigouBuyerRejectUnPublishGoodsResult AlibabaCaigouBuyerRejectUnPublishGoods(long goodsId, string memo = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCaigouBuyerRejectUnPublishGoodsAsync(goodsId, memo, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>采购商驳回内部商城商品
        /// 采购商驳回内部商城商品
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.buyerRejectUnPublishGoods-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.buyerRejectUnPublishGoods&amp;v=1</summary>
        /// <param name="goodsId">商品Id</param>
        /// <param name="memo">驳回信息</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCaigouBuyerRejectUnPublishGoodsResult> AlibabaCaigouBuyerRejectUnPublishGoodsAsync(long goodsId, string memo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.caigou.buyerRejectUnPublishGoods/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (goodsId == null)
                        throw new System.ArgumentNullException("goodsId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(goodsId, System.Globalization.CultureInfo.InvariantCulture)), "goodsId");
                    }
                    if (memo != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(memo, System.Globalization.CultureInfo.InvariantCulture)), "memo");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCaigouBuyerRejectUnPublishGoodsResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCaigouBuyerRejectUnPublishGoodsResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>批量冻结物料工厂
        /// 批量冻结物料工厂
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.batchFreezeProductFactory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.batchFreezeProductFactory&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public CnAlibabaOpenAlibabaCaigouProductBatchFreezeProductFactoryAlibabaCaigouProductResultData AlibabaCaigouProductBatchFreezeProductFactory(System.Collections.Generic.IEnumerable<AlibabaCaigouProductFreezeProductFactoryParam> freezeProductFactoryParams)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCaigouProductBatchFreezeProductFactoryAsync(freezeProductFactoryParams, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>批量冻结物料工厂
        /// 批量冻结物料工厂
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.batchFreezeProductFactory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.batchFreezeProductFactory&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CnAlibabaOpenAlibabaCaigouProductBatchFreezeProductFactoryAlibabaCaigouProductResultData> AlibabaCaigouProductBatchFreezeProductFactoryAsync(System.Collections.Generic.IEnumerable<AlibabaCaigouProductFreezeProductFactoryParam> freezeProductFactoryParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.caigou.product.batchFreezeProductFactory/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (freezeProductFactoryParams == null)
                        throw new System.ArgumentNullException("freezeProductFactoryParams");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(freezeProductFactoryParams, System.Globalization.CultureInfo.InvariantCulture)), "freezeProductFactoryParams");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CnAlibabaOpenAlibabaCaigouProductBatchFreezeProductFactoryAlibabaCaigouProductResultData>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CnAlibabaOpenAlibabaCaigouProductBatchFreezeProductFactoryAlibabaCaigouProductResultData);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>冻结物料工厂
        /// 冻结物料工厂
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.freezeProductFactory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.freezeProductFactory&amp;v=1</summary>
        /// <param name="systemDomainCode">系统域编码</param>
        /// <param name="productCode">物料编码</param>
        /// <param name="factoryCode">工厂编码</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public CnAlibabaOpenAlibabaCaigouProductFreezeProductFactoryAlibabaCaigouProductResultData AlibabaCaigouProductFreezeProductFactory(string systemDomainCode, string productCode, string factoryCode)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCaigouProductFreezeProductFactoryAsync(systemDomainCode, productCode, factoryCode, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>冻结物料工厂
        /// 冻结物料工厂
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.product.freezeProductFactory-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.product.freezeProductFactory&amp;v=1</summary>
        /// <param name="systemDomainCode">系统域编码</param>
        /// <param name="productCode">物料编码</param>
        /// <param name="factoryCode">工厂编码</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CnAlibabaOpenAlibabaCaigouProductFreezeProductFactoryAlibabaCaigouProductResultData> AlibabaCaigouProductFreezeProductFactoryAsync(string systemDomainCode, string productCode, string factoryCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.caigou.product.freezeProductFactory/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (systemDomainCode == null)
                        throw new System.ArgumentNullException("systemDomainCode");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(systemDomainCode, System.Globalization.CultureInfo.InvariantCulture)), "systemDomainCode");
                    }
                    if (productCode == null)
                        throw new System.ArgumentNullException("productCode");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture)), "productCode");
                    }
                    if (factoryCode == null)
                        throw new System.ArgumentNullException("factoryCode");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(factoryCode, System.Globalization.CultureInfo.InvariantCulture)), "factoryCode");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CnAlibabaOpenAlibabaCaigouProductFreezeProductFactoryAlibabaCaigouProductResultData>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CnAlibabaOpenAlibabaCaigouProductFreezeProductFactoryAlibabaCaigouProductResultData);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>根据订单维度审核采购单
        /// 根据订单维度审核采购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.purchaseOrder.updateStatusByOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.purchaseOrder.updateStatusByOrder&amp;v=1</summary>
        /// <param name="orderId">订单ID</param>
        /// <param name="noPassEntryIds">审核未通过的子订单ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCaigouPurchaseOrderUpdateStatusByOrderResult AlibabaCaigouPurchaseOrderUpdateStatusByOrder(long orderId, System.Collections.Generic.IEnumerable<string> noPassEntryIds = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCaigouPurchaseOrderUpdateStatusByOrderAsync(orderId, noPassEntryIds, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>根据订单维度审核采购单
        /// 根据订单维度审核采购单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.purchaseOrder.updateStatusByOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.purchaseOrder.updateStatusByOrder&amp;v=1</summary>
        /// <param name="orderId">订单ID</param>
        /// <param name="noPassEntryIds">审核未通过的子订单ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCaigouPurchaseOrderUpdateStatusByOrderResult> AlibabaCaigouPurchaseOrderUpdateStatusByOrderAsync(long orderId, System.Collections.Generic.IEnumerable<string> noPassEntryIds = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.caigou.purchaseOrder.updateStatusByOrder/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orderId == null)
                        throw new System.ArgumentNullException("orderId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)), "orderId");
                    }
                    if (noPassEntryIds != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(noPassEntryIds, System.Globalization.CultureInfo.InvariantCulture)), "noPassEntryIds");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCaigouPurchaseOrderUpdateStatusByOrderResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCaigouPurchaseOrderUpdateStatusByOrderResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>请购单行分派
        /// 请购单行分派
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.requisition.assignRequisition-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.requisition.assignRequisition&amp;v=1</summary>
        /// <param name="paramList">分派参数</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCaigouRequisitionAssignRequisitionResult AlibabaCaigouRequisitionAssignRequisition(System.Collections.Generic.IEnumerable<AlibabaCaigouRequisitionOpenAssignRequisitionParam> paramList)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCaigouRequisitionAssignRequisitionAsync(paramList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>请购单行分派
        /// 请购单行分派
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.requisition.assignRequisition-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.requisition.assignRequisition&amp;v=1</summary>
        /// <param name="paramList">分派参数</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCaigouRequisitionAssignRequisitionResult> AlibabaCaigouRequisitionAssignRequisitionAsync(System.Collections.Generic.IEnumerable<AlibabaCaigouRequisitionOpenAssignRequisitionParam> paramList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.caigou.requisition.assignRequisition/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (paramList == null)
                        throw new System.ArgumentNullException("paramList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(paramList, System.Globalization.CultureInfo.InvariantCulture)), "paramList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCaigouRequisitionAssignRequisitionResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCaigouRequisitionAssignRequisitionResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>通过询价单id获取询价单（规范输出参数）
        /// 通过询价单id获取询价单（规范输出参数），含有succes,resultCode,message
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.open.caigou.api.buyOffer.getBuyOfferById-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.open.caigou.api.buyOffer.getBuyOfferById&amp;v=1</summary>
        /// <param name="buyOfferId">询价单ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaOpenComAlibabaCaigouApiBuyOfferModelBuyOfferForWH AlibabaOpenCaigouApiBuyOfferGetBuyOfferById(long buyOfferId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaOpenCaigouApiBuyOfferGetBuyOfferByIdAsync(buyOfferId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>通过询价单id获取询价单（规范输出参数）
        /// 通过询价单id获取询价单（规范输出参数），含有succes,resultCode,message
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.open.caigou.api.buyOffer.getBuyOfferById-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.open.caigou.api.buyOffer.getBuyOfferById&amp;v=1</summary>
        /// <param name="buyOfferId">询价单ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaOpenComAlibabaCaigouApiBuyOfferModelBuyOfferForWH> AlibabaOpenCaigouApiBuyOfferGetBuyOfferByIdAsync(long buyOfferId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.open.caigou.api.buyOffer.getBuyOfferById/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (buyOfferId == null)
                        throw new System.ArgumentNullException("buyOfferId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(buyOfferId, System.Globalization.CultureInfo.InvariantCulture)), "buyOfferId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaOpenComAlibabaCaigouApiBuyOfferModelBuyOfferForWH>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaOpenComAlibabaCaigouApiBuyOfferModelBuyOfferForWH);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>上传附件
        /// 上传附件
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.attachment.upload-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.attachment.upload&amp;v=1</summary>
        /// <param name="name">文件名。最大字符为64个英文和汉子字符或者21个汉字。超过部分会被强制截断.</param>
        /// <param name="fileBytes">附件的二进制数据，向服务端提交文件即可 (fileBytes这个参数不能签名)。使用 enctype=&amp;quot;multipart/form-data&amp;quot; 的POST文件上传方式提交数据</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// PARAM_MISS	- 参数丢失(确认参数传送按照要求)
        /// NOT_SUPPORT_SOURCE	- 上传来源不支持(联系管理员)
        /// FILE_NOT_SUPPORT	- 文件格式不支持(该文件不支持上传)
        /// SYS_ERROR	- 系统错误(联系管理员)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public CaigouApiAttachmentUploadResult CaigouApiAttachmentUpload(string name = null, byte[] fileBytes = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiAttachmentUploadAsync(name, fileBytes, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>上传附件
        /// 上传附件
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.attachment.upload-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.attachment.upload&amp;v=1</summary>
        /// <param name="name">文件名。最大字符为64个英文和汉子字符或者21个汉字。超过部分会被强制截断.</param>
        /// <param name="fileBytes">附件的二进制数据，向服务端提交文件即可 (fileBytes这个参数不能签名)。使用 enctype=&amp;quot;multipart/form-data&amp;quot; 的POST文件上传方式提交数据</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// PARAM_MISS	- 参数丢失(确认参数传送按照要求)
        /// NOT_SUPPORT_SOURCE	- 上传来源不支持(联系管理员)
        /// FILE_NOT_SUPPORT	- 文件格式不支持(该文件不支持上传)
        /// SYS_ERROR	- 系统错误(联系管理员)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaigouApiAttachmentUploadResult> CaigouApiAttachmentUploadAsync(string name = null, byte[] fileBytes = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.attachment.upload/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (name != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)), "name");
                    }
                    if (fileBytes != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(fileBytes, System.Globalization.CultureInfo.InvariantCulture)), "fileBytes");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaigouApiAttachmentUploadResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CaigouApiAttachmentUploadResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>请购单审核
        /// 请购单审核，根据传入的请购单单项进行审核
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.requisition.approvalRequisition-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.requisition.approvalRequisition&amp;v=1</summary>
        /// <param name="paramList">审批参数</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCaigouRequisitionApprovalRequisitionResult AlibabaCaigouRequisitionApprovalRequisition(System.Collections.Generic.IEnumerable<AlibabaCaigouRequisitionOpenApprovalRequisitionParam> paramList)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCaigouRequisitionApprovalRequisitionAsync(paramList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>请购单审核
        /// 请购单审核，根据传入的请购单单项进行审核
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.caigou.requisition.approvalRequisition-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.caigou.requisition.approvalRequisition&amp;v=1</summary>
        /// <param name="paramList">审批参数</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCaigouRequisitionApprovalRequisitionResult> AlibabaCaigouRequisitionApprovalRequisitionAsync(System.Collections.Generic.IEnumerable<AlibabaCaigouRequisitionOpenApprovalRequisitionParam> paramList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.caigou.requisition.approvalRequisition/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (paramList == null)
                        throw new System.ArgumentNullException("paramList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(paramList, System.Globalization.CultureInfo.InvariantCulture)), "paramList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCaigouRequisitionApprovalRequisitionResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCaigouRequisitionApprovalRequisitionResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>发布产品信息
        /// 发布产品信息，多次发布同一个产品不会产生重复数据，操作人员编号需要绑定后才能操作
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.product.addProduct-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.product.addProduct&amp;v=1</summary>
        /// <param name="productCode">产品编号，物料编码，代表产品在外部系统的主键</param>
        /// <param name="title">产品名</param>
        /// <param name="unit">单位</param>
        /// <param name="remark">补充说明，可以为富文本。最多4000个字符</param>
        /// <param name="instruction">产品说明，副标题，最多200个字符</param>
        /// <param name="productAttributes">产品属性列表</param>
        /// <param name="picUrlList">产品图片，最多10张，先调用上传图片接口，获取到图片相对url</param>
        /// <param name="attachmentList">产品附件，最多3个附件，先调用上传附件接口获取到附件id</param>
        /// <param name="referencePrice">产品参考价(单位是分)</param>
        /// <param name="userCategoryId">用户在1688的自定义类目id</param>
        /// <param name="userId">操作员在1688上的子帐号ID，如果接入商有子账号，则可以通过子账号来发布产品；不传则系统会自动取主账号的userId作为默认值</param>
        /// <returns>产品在1688采购平台的主键id，如果发布失败则为空，具体的看错误码返回 ErrorCode 的错误信息
        /// ISV.INVALID_PARAM	- 参数不合法
        /// ISV.SYSTEM_ERROR	- 系统出错
        /// ISV.DUPLICATE_INSERT	- 重复插入</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response34 CaigouApiProductAddProduct(string productCode, string title, string unit, string remark = null, string instruction = null, System.Collections.Generic.IEnumerable<string> productAttributes = null, System.Collections.Generic.IEnumerable<string> picUrlList = null, System.Collections.Generic.IEnumerable<string> attachmentList = null, long? referencePrice = null, long? userCategoryId = null, long? userId = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await CaigouApiProductAddProductAsync(productCode, title, unit, remark, instruction, productAttributes, picUrlList, attachmentList, referencePrice, userCategoryId, userId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>发布产品信息
        /// 发布产品信息，多次发布同一个产品不会产生重复数据，操作人员编号需要绑定后才能操作
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:caigou.api.product.addProduct-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=caigou.api.product.addProduct&amp;v=1</summary>
        /// <param name="productCode">产品编号，物料编码，代表产品在外部系统的主键</param>
        /// <param name="title">产品名</param>
        /// <param name="unit">单位</param>
        /// <param name="remark">补充说明，可以为富文本。最多4000个字符</param>
        /// <param name="instruction">产品说明，副标题，最多200个字符</param>
        /// <param name="productAttributes">产品属性列表</param>
        /// <param name="picUrlList">产品图片，最多10张，先调用上传图片接口，获取到图片相对url</param>
        /// <param name="attachmentList">产品附件，最多3个附件，先调用上传附件接口获取到附件id</param>
        /// <param name="referencePrice">产品参考价(单位是分)</param>
        /// <param name="userCategoryId">用户在1688的自定义类目id</param>
        /// <param name="userId">操作员在1688上的子帐号ID，如果接入商有子账号，则可以通过子账号来发布产品；不传则系统会自动取主账号的userId作为默认值</param>
        /// <returns>产品在1688采购平台的主键id，如果发布失败则为空，具体的看错误码返回 ErrorCode 的错误信息
        /// ISV.INVALID_PARAM	- 参数不合法
        /// ISV.SYSTEM_ERROR	- 系统出错
        /// ISV.DUPLICATE_INSERT	- 重复插入</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response34> CaigouApiProductAddProductAsync(string productCode, string title, string unit, string remark = null, string instruction = null, System.Collections.Generic.IEnumerable<string> productAttributes = null, System.Collections.Generic.IEnumerable<string> picUrlList = null, System.Collections.Generic.IEnumerable<string> attachmentList = null, long? referencePrice = null, long? userCategoryId = null, long? userId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/caigou.api.product.addProduct/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (productCode == null)
                        throw new System.ArgumentNullException("productCode");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture)), "productCode");
                    }
                    if (title == null)
                        throw new System.ArgumentNullException("title");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)), "title");
                    }
                    if (unit == null)
                        throw new System.ArgumentNullException("unit");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(unit, System.Globalization.CultureInfo.InvariantCulture)), "unit");
                    }
                    if (remark != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(remark, System.Globalization.CultureInfo.InvariantCulture)), "remark");
                    }
                    if (instruction != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(instruction, System.Globalization.CultureInfo.InvariantCulture)), "instruction");
                    }
                    if (productAttributes != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productAttributes, System.Globalization.CultureInfo.InvariantCulture)), "productAttributes");
                    }
                    if (picUrlList != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(picUrlList, System.Globalization.CultureInfo.InvariantCulture)), "picUrlList");
                    }
                    if (attachmentList != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(attachmentList, System.Globalization.CultureInfo.InvariantCulture)), "attachmentList");
                    }
                    if (referencePrice != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(referencePrice, System.Globalization.CultureInfo.InvariantCulture)), "referencePrice");
                    }
                    if (userCategoryId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(userCategoryId, System.Globalization.CultureInfo.InvariantCulture)), "userCategoryId");
                    }
                    if (userId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)), "userId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response34>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response34);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>失败消息批量确认
        /// 手动调用确认api，确认消息已经被消费成功。仅当使用查询式获取失败消息的api时，才需要使用
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:push.message.confirm-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=push.message.confirm&amp;v=1</summary>
        /// <param name="msgIdList">待确认的消息id列表</param>
        /// <returns>操作是否成功</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response2 PushMessageConfirm(System.Collections.Generic.IEnumerable<string> msgIdList = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await PushMessageConfirmAsync(msgIdList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>失败消息批量确认
        /// 手动调用确认api，确认消息已经被消费成功。仅当使用查询式获取失败消息的api时，才需要使用
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:push.message.confirm-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=push.message.confirm&amp;v=1</summary>
        /// <param name="msgIdList">待确认的消息id列表</param>
        /// <returns>操作是否成功</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response2> PushMessageConfirmAsync(System.Collections.Generic.IEnumerable<string> msgIdList = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/push.message.confirm/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (msgIdList != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(msgIdList, System.Globalization.CultureInfo.InvariantCulture)), "msgIdList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response2);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>批量修改零售通商品的虚仓库存
        /// 传递商家账号、仓库信息、前端OfferID，可以更新零售通该商家（虚仓）的商品库存信息，直接覆盖现有库存
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.lst.item.setStock-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.lst.item.setStock&amp;v=1</summary>
        /// <param name="stockList">库存参数列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaLstItemSetStockResult AlibabaLstItemSetStock(System.Collections.Generic.IEnumerable<AlibabaLstItemStockInfo> stockList)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaLstItemSetStockAsync(stockList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>批量修改零售通商品的虚仓库存
        /// 传递商家账号、仓库信息、前端OfferID，可以更新零售通该商家（虚仓）的商品库存信息，直接覆盖现有库存
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.lst.item.setStock-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.lst.item.setStock&amp;v=1</summary>
        /// <param name="stockList">库存参数列表</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaLstItemSetStockResult> AlibabaLstItemSetStockAsync(System.Collections.Generic.IEnumerable<AlibabaLstItemStockInfo> stockList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.lst.item.setStock/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (stockList == null)
                        throw new System.ArgumentNullException("stockList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(stockList, System.Globalization.CultureInfo.InvariantCulture)), "stockList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaLstItemSetStockResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaLstItemSetStockResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>零售通关闭交易
        /// 零售通订单关闭交易
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.trade.lst.closeTrade-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.trade.lst.closeTrade&amp;v=1</summary>
        /// <param name="orderId">订单Id</param>
        /// <param name="closeOperateType">操作者角色</param>
        /// <param name="cancelReason">关闭订单原因</param>
        /// <param name="remark">备注</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeLstCloseTradeResult AlibabaTradeLstCloseTrade(long orderId, string closeOperateType, string cancelReason = null, string remark = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeLstCloseTradeAsync(orderId, closeOperateType, cancelReason, remark, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>零售通关闭交易
        /// 零售通订单关闭交易
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.trade.lst.closeTrade-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.trade.lst.closeTrade&amp;v=1</summary>
        /// <param name="orderId">订单Id</param>
        /// <param name="closeOperateType">操作者角色</param>
        /// <param name="cancelReason">关闭订单原因</param>
        /// <param name="remark">备注</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeLstCloseTradeResult> AlibabaTradeLstCloseTradeAsync(long orderId, string closeOperateType, string cancelReason = null, string remark = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.trade.lst.closeTrade/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orderId == null)
                        throw new System.ArgumentNullException("orderId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)), "orderId");
                    }
                    if (closeOperateType == null)
                        throw new System.ArgumentNullException("closeOperateType");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(closeOperateType, System.Globalization.CultureInfo.InvariantCulture)), "closeOperateType");
                    }
                    if (cancelReason != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(cancelReason, System.Globalization.CultureInfo.InvariantCulture)), "cancelReason");
                    }
                    if (remark != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(remark, System.Globalization.CultureInfo.InvariantCulture)), "remark");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeLstCloseTradeResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeLstCloseTradeResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>品牌商捡入
        /// 品牌商捡入
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.list.brandPickedEnterLeads-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.list.brandPickedEnterLeads&amp;v=1</summary>
        /// <param name="leadsBizId">零售店业务主键</param>
        /// <param name="operatorNo">品牌商拍档编码</param>
        /// <param name="spUserId">品牌商的userid</param>
        /// <param name="leadsType">品牌商的零售店的业务类型</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaLstOpenResult AlibabaListBrandPickedEnterLeads(long leadsBizId, string operatorNo, long spUserId, string leadsType)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaListBrandPickedEnterLeadsAsync(leadsBizId, operatorNo, spUserId, leadsType, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>品牌商捡入
        /// 品牌商捡入
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.list.brandPickedEnterLeads-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.list.brandPickedEnterLeads&amp;v=1</summary>
        /// <param name="leadsBizId">零售店业务主键</param>
        /// <param name="operatorNo">品牌商拍档编码</param>
        /// <param name="spUserId">品牌商的userid</param>
        /// <param name="leadsType">品牌商的零售店的业务类型</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaLstOpenResult> AlibabaListBrandPickedEnterLeadsAsync(long leadsBizId, string operatorNo, long spUserId, string leadsType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.list.brandPickedEnterLeads/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (leadsBizId == null)
                        throw new System.ArgumentNullException("leadsBizId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(leadsBizId, System.Globalization.CultureInfo.InvariantCulture)), "leadsBizId");
                    }
                    if (operatorNo == null)
                        throw new System.ArgumentNullException("operatorNo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(operatorNo, System.Globalization.CultureInfo.InvariantCulture)), "operatorNo");
                    }
                    if (spUserId == null)
                        throw new System.ArgumentNullException("spUserId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(spUserId, System.Globalization.CultureInfo.InvariantCulture)), "spUserId");
                    }
                    if (leadsType == null)
                        throw new System.ArgumentNullException("leadsType");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(leadsType, System.Globalization.CultureInfo.InvariantCulture)), "leadsType");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaLstOpenResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaLstOpenResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>业务员权限关闭
        /// 业务员权限关闭
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.lst.cancelSalesman-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.lst.cancelSalesman&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaLstOpenResult AlibabaLstCancelSalesman(string loginId, string lsSpBrandName)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaLstCancelSalesmanAsync(loginId, lsSpBrandName, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>业务员权限关闭
        /// 业务员权限关闭
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=cn.alibaba.open:alibaba.lst.cancelSalesman-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=cn.alibaba.open&amp;n=alibaba.lst.cancelSalesman&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaLstOpenResult> AlibabaLstCancelSalesmanAsync(string loginId, string lsSpBrandName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/cn.alibaba.open/alibaba.lst.cancelSalesman/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (loginId == null)
                        throw new System.ArgumentNullException("loginId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(loginId, System.Globalization.CultureInfo.InvariantCulture)), "loginId");
                    }
                    if (lsSpBrandName == null)
                        throw new System.ArgumentNullException("lsSpBrandName");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(lsSpBrandName, System.Globalization.CultureInfo.InvariantCulture)), "lsSpBrandName");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaLstOpenResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaLstOpenResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>跨境场景相似款搜索
        /// 按照已有商品进行线上相似款搜索，erp需要有跨境货源推荐的权限
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.cross.similar.product.search-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.cross.similar.product.search&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <param name="endUserId">erp内部的用户身份id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCrossSimilarProductSearchResult AlibabaCrossSimilarProductSearch(string orgId, string endUserId = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCrossSimilarProductSearchAsync(orgId, endUserId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>跨境场景相似款搜索
        /// 按照已有商品进行线上相似款搜索，erp需要有跨境货源推荐的权限
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.cross.similar.product.search-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.cross.similar.product.search&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <param name="endUserId">erp内部的用户身份id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCrossSimilarProductSearchResult> AlibabaCrossSimilarProductSearchAsync(string orgId, string endUserId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.linkplus/alibaba.cross.similar.product.search/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orgId == null)
                        throw new System.ArgumentNullException("orgId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orgId, System.Globalization.CultureInfo.InvariantCulture)), "orgId");
                    }
                    if (endUserId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endUserId, System.Globalization.CultureInfo.InvariantCulture)), "endUserId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCrossSimilarProductSearchResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCrossSimilarProductSearchResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>跨境清仓好货商品列表
        /// 跨境清仓好货商品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.crossboard.cleargoodspage-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.crossboard.cleargoodspage&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public void AlibabaCrossboardCleargoodspage()
        {
            System.Threading.Tasks.Task.Run(async () => await AlibabaCrossboardCleargoodspageAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>跨境清仓好货商品列表
        /// 跨境清仓好货商品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.crossboard.cleargoodspage-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.crossboard.cleargoodspage&amp;v=1</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AlibabaCrossboardCleargoodspageAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.linkplus/alibaba.crossboard.cleargoodspage/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>支付宝间连-1688产品推荐开放商品商城首页组件
        /// 支付宝间连ISV获取1688产品推荐开放页面-商城首页
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alipay.main.page-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alipay.main.page&amp;v=1</summary>
        /// <param name="endOrgId">ERP终端机构ID</param>
        /// <param name="endUserId">ERP终端用户ID</param>
        /// <param name="umidToken">设备码，通过阿里指定js获取</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public void AlipayMainPage(string endOrgId, string endUserId, string umidToken = null)
        {
            System.Threading.Tasks.Task.Run(async () => await AlipayMainPageAsync(endOrgId, endUserId, umidToken, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>支付宝间连-1688产品推荐开放商品商城首页组件
        /// 支付宝间连ISV获取1688产品推荐开放页面-商城首页
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alipay.main.page-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alipay.main.page&amp;v=1</summary>
        /// <param name="endOrgId">ERP终端机构ID</param>
        /// <param name="endUserId">ERP终端用户ID</param>
        /// <param name="umidToken">设备码，通过阿里指定js获取</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AlipayMainPageAsync(string endOrgId, string endUserId, string umidToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.linkplus/alipay.main.page/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (endOrgId == null)
                        throw new System.ArgumentNullException("endOrgId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endOrgId, System.Globalization.CultureInfo.InvariantCulture)), "endOrgId");
                    }
                    if (endUserId == null)
                        throw new System.ArgumentNullException("endUserId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endUserId, System.Globalization.CultureInfo.InvariantCulture)), "endUserId");
                    }
                    if (umidToken != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(umidToken, System.Globalization.CultureInfo.InvariantCulture)), "umidToken");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>通联商城
        /// 通联支付的商城api
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.allinpay.main.page-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.allinpay.main.page&amp;v=1</summary>
        /// <param name="endOrgId">ERP终端机构ID</param>
        /// <param name="endUserId">ERP终端用户ID</param>
        /// <param name="umidToken">设备码，通过阿里指定js获取</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public void AlibabaAllinpayMainPage(string endOrgId, string endUserId, string umidToken = null)
        {
            System.Threading.Tasks.Task.Run(async () => await AlibabaAllinpayMainPageAsync(endOrgId, endUserId, umidToken, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>通联商城
        /// 通联支付的商城api
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.allinpay.main.page-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.allinpay.main.page&amp;v=1</summary>
        /// <param name="endOrgId">ERP终端机构ID</param>
        /// <param name="endUserId">ERP终端用户ID</param>
        /// <param name="umidToken">设备码，通过阿里指定js获取</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AlibabaAllinpayMainPageAsync(string endOrgId, string endUserId, string umidToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.linkplus/alibaba.allinpay.main.page/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (endOrgId == null)
                        throw new System.ArgumentNullException("endOrgId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endOrgId, System.Globalization.CultureInfo.InvariantCulture)), "endOrgId");
                    }
                    if (endUserId == null)
                        throw new System.ArgumentNullException("endUserId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endUserId, System.Globalization.CultureInfo.InvariantCulture)), "endUserId");
                    }
                    if (umidToken != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(umidToken, System.Globalization.CultureInfo.InvariantCulture)), "umidToken");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>终端用户感兴趣类目
        /// ERP终端用户感兴趣的类目，类目目前接受1688类目传入或自定义类目传入。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:enduser.interesting.category.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=enduser.interesting.category.put&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <param name="endUserId">erp内部的用户身份id</param>
        /// <param name="categoryIds">感兴趣的1688类目id,逗号分隔。任意123级类目均可填写</param>
        /// <param name="categoryNames">感兴趣的1688类目名称,逗号分隔。任意123级类目均可填写</param>
        /// <param name="udfCategoryNames">感兴趣的自定义类目名称,逗号分隔</param>
        /// <returns>返回值</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Result EnduserInterestingCategoryPut(string orgId, string endUserId, string categoryIds = null, string categoryNames = null, string udfCategoryNames = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await EnduserInterestingCategoryPutAsync(orgId, endUserId, categoryIds, categoryNames, udfCategoryNames, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>终端用户感兴趣类目
        /// ERP终端用户感兴趣的类目，类目目前接受1688类目传入或自定义类目传入。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:enduser.interesting.category.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=enduser.interesting.category.put&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <param name="endUserId">erp内部的用户身份id</param>
        /// <param name="categoryIds">感兴趣的1688类目id,逗号分隔。任意123级类目均可填写</param>
        /// <param name="categoryNames">感兴趣的1688类目名称,逗号分隔。任意123级类目均可填写</param>
        /// <param name="udfCategoryNames">感兴趣的自定义类目名称,逗号分隔</param>
        /// <returns>返回值</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Result> EnduserInterestingCategoryPutAsync(string orgId, string endUserId, string categoryIds = null, string categoryNames = null, string udfCategoryNames = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.linkplus/enduser.interesting.category.put/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orgId == null)
                        throw new System.ArgumentNullException("orgId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orgId, System.Globalization.CultureInfo.InvariantCulture)), "orgId");
                    }
                    if (endUserId == null)
                        throw new System.ArgumentNullException("endUserId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endUserId, System.Globalization.CultureInfo.InvariantCulture)), "endUserId");
                    }
                    if (categoryIds != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(categoryIds, System.Globalization.CultureInfo.InvariantCulture)), "categoryIds");
                    }
                    if (categoryNames != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(categoryNames, System.Globalization.CultureInfo.InvariantCulture)), "categoryNames");
                    }
                    if (udfCategoryNames != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(udfCategoryNames, System.Globalization.CultureInfo.InvariantCulture)), "udfCategoryNames");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Result>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Result);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>ERP用户状态数据同步
        /// 同步ERP终端用户数据，即生成一份终端用户数据的镜像。对于多次调用，修改已存在的记录。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:enduser.info.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=enduser.info.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="orgName">机构名称</param>
        /// <param name="orgLocation">机构地址</param>
        /// <param name="orgIndustry">机构所属行业</param>
        /// <param name="orgMobile">机构联系方式</param>
        /// <param name="endUserId">终端用户ID</param>
        /// <param name="endUserName">终端用户名称</param>
        /// <param name="endUserMobile">终端用户手机</param>
        /// <param name="createTimeStamp">用户创建时间戳</param>
        /// <param name="modifyTimeStamp">用户修改时间戳</param>
        /// <param name="orgEmail">机构email联系方式</param>
        /// <param name="orgBindingAliLoginId">机构绑定阿里巴巴登录账号</param>
        /// <param name="endUserBindingAliLoginId">终端用户绑定阿里巴巴登录账号</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public EnduserInfoPutResult EnduserInfoPut(string orgid, string orgName, string orgLocation, string orgIndustry, string orgMobile, string endUserId, string endUserName, string endUserMobile, long createTimeStamp, long modifyTimeStamp, string orgEmail = null, string orgBindingAliLoginId = null, string endUserBindingAliLoginId = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await EnduserInfoPutAsync(orgid, orgName, orgLocation, orgIndustry, orgMobile, endUserId, endUserName, endUserMobile, createTimeStamp, modifyTimeStamp, orgEmail, orgBindingAliLoginId, endUserBindingAliLoginId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>ERP用户状态数据同步
        /// 同步ERP终端用户数据，即生成一份终端用户数据的镜像。对于多次调用，修改已存在的记录。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:enduser.info.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=enduser.info.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="orgName">机构名称</param>
        /// <param name="orgLocation">机构地址</param>
        /// <param name="orgIndustry">机构所属行业</param>
        /// <param name="orgMobile">机构联系方式</param>
        /// <param name="endUserId">终端用户ID</param>
        /// <param name="endUserName">终端用户名称</param>
        /// <param name="endUserMobile">终端用户手机</param>
        /// <param name="createTimeStamp">用户创建时间戳</param>
        /// <param name="modifyTimeStamp">用户修改时间戳</param>
        /// <param name="orgEmail">机构email联系方式</param>
        /// <param name="orgBindingAliLoginId">机构绑定阿里巴巴登录账号</param>
        /// <param name="endUserBindingAliLoginId">终端用户绑定阿里巴巴登录账号</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EnduserInfoPutResult> EnduserInfoPutAsync(string orgid, string orgName, string orgLocation, string orgIndustry, string orgMobile, string endUserId, string endUserName, string endUserMobile, long createTimeStamp, long modifyTimeStamp, string orgEmail = null, string orgBindingAliLoginId = null, string endUserBindingAliLoginId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.linkplus/enduser.info.put/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orgid == null)
                        throw new System.ArgumentNullException("orgid");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orgid, System.Globalization.CultureInfo.InvariantCulture)), "orgid");
                    }
                    if (orgName == null)
                        throw new System.ArgumentNullException("orgName");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orgName, System.Globalization.CultureInfo.InvariantCulture)), "orgName");
                    }
                    if (orgLocation == null)
                        throw new System.ArgumentNullException("orgLocation");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orgLocation, System.Globalization.CultureInfo.InvariantCulture)), "orgLocation");
                    }
                    if (orgIndustry == null)
                        throw new System.ArgumentNullException("orgIndustry");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orgIndustry, System.Globalization.CultureInfo.InvariantCulture)), "orgIndustry");
                    }
                    if (orgMobile == null)
                        throw new System.ArgumentNullException("orgMobile");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orgMobile, System.Globalization.CultureInfo.InvariantCulture)), "orgMobile");
                    }
                    if (endUserId == null)
                        throw new System.ArgumentNullException("endUserId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endUserId, System.Globalization.CultureInfo.InvariantCulture)), "endUserId");
                    }
                    if (endUserName == null)
                        throw new System.ArgumentNullException("endUserName");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endUserName, System.Globalization.CultureInfo.InvariantCulture)), "endUserName");
                    }
                    if (endUserMobile == null)
                        throw new System.ArgumentNullException("endUserMobile");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endUserMobile, System.Globalization.CultureInfo.InvariantCulture)), "endUserMobile");
                    }
                    if (createTimeStamp == null)
                        throw new System.ArgumentNullException("createTimeStamp");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(createTimeStamp, System.Globalization.CultureInfo.InvariantCulture)), "createTimeStamp");
                    }
                    if (modifyTimeStamp == null)
                        throw new System.ArgumentNullException("modifyTimeStamp");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(modifyTimeStamp, System.Globalization.CultureInfo.InvariantCulture)), "modifyTimeStamp");
                    }
                    if (orgEmail != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orgEmail, System.Globalization.CultureInfo.InvariantCulture)), "orgEmail");
                    }
                    if (orgBindingAliLoginId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orgBindingAliLoginId, System.Globalization.CultureInfo.InvariantCulture)), "orgBindingAliLoginId");
                    }
                    if (endUserBindingAliLoginId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endUserBindingAliLoginId, System.Globalization.CultureInfo.InvariantCulture)), "endUserBindingAliLoginId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EnduserInfoPutResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(EnduserInfoPutResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>支付宝间连-1688产品推荐开放商品扩展区组件
        /// 支付宝间连ISV获取1688产品推荐开放页面-商品区块部分
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alipay.inner.page-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alipay.inner.page&amp;v=1</summary>
        /// <param name="endOrgId">ERP终端机构ID</param>
        /// <param name="endUserId">ERP终端用户ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public void AlipayInnerPage(string endOrgId, string endUserId)
        {
            System.Threading.Tasks.Task.Run(async () => await AlipayInnerPageAsync(endOrgId, endUserId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>支付宝间连-1688产品推荐开放商品扩展区组件
        /// 支付宝间连ISV获取1688产品推荐开放页面-商品区块部分
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alipay.inner.page-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alipay.inner.page&amp;v=1</summary>
        /// <param name="endOrgId">ERP终端机构ID</param>
        /// <param name="endUserId">ERP终端用户ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AlipayInnerPageAsync(string endOrgId, string endUserId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.linkplus/alipay.inner.page/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (endOrgId == null)
                        throw new System.ArgumentNullException("endOrgId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endOrgId, System.Globalization.CultureInfo.InvariantCulture)), "endOrgId");
                    }
                    if (endUserId == null)
                        throw new System.ArgumentNullException("endUserId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endUserId, System.Globalization.CultureInfo.InvariantCulture)), "endUserId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>跨境场景企业维度新品搜索
        /// 按照企业维度给出新品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.cross.company.product.new.search-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.cross.company.product.new.search&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCrossCompanyProductNewSearchResult AlibabaCrossCompanyProductNewSearch(string orgId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCrossCompanyProductNewSearchAsync(orgId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>跨境场景企业维度新品搜索
        /// 按照企业维度给出新品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.cross.company.product.new.search-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.cross.company.product.new.search&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCrossCompanyProductNewSearchResult> AlibabaCrossCompanyProductNewSearchAsync(string orgId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.linkplus/alibaba.cross.company.product.new.search/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orgId == null)
                        throw new System.ArgumentNullException("orgId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orgId, System.Globalization.CultureInfo.InvariantCulture)), "orgId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCrossCompanyProductNewSearchResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCrossCompanyProductNewSearchResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>采购单记录采集同步
        /// ERP终端用户采购单记录采集同步
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:purchaseorder.record.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=purchaseorder.record.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="endUserId">终端用户ID</param>
        /// <param name="orderNo">订单号</param>
        /// <param name="orderLineNo">订单行号</param>
        /// <param name="orderLinePrice">订单行价格</param>
        /// <param name="orderTotalPrice">订单总价</param>
        /// <param name="productId">产品ID</param>
        /// <param name="productName">产品名称</param>
        /// <param name="productPrice">产品价格</param>
        /// <param name="productPriceWithTax">产品含税价格</param>
        /// <param name="productNum">产品个数</param>
        /// <param name="productModel">产品型号</param>
        /// <param name="createTimeStamp">创建时间戳</param>
        /// <param name="modifyTimeStamp">修改时间戳</param>
        /// <param name="productUnit">产品单位</param>
        /// <param name="productBrand">产品品牌</param>
        /// <param name="productSpec">产品规格</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public ComAlibabaLinkplusCollectResult PurchaseorderRecordPut(string orgid, string endUserId, string orderNo, string orderLineNo, double orderLinePrice, double orderTotalPrice, string productId, string productName, double productPrice, double productPriceWithTax, long productNum, string productModel, long createTimeStamp, long modifyTimeStamp, string productUnit = null, string productBrand = null, string productSpec = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await PurchaseorderRecordPutAsync(orgid, endUserId, orderNo, orderLineNo, orderLinePrice, orderTotalPrice, productId, productName, productPrice, productPriceWithTax, productNum, productModel, createTimeStamp, modifyTimeStamp, productUnit, productBrand, productSpec, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>采购单记录采集同步
        /// ERP终端用户采购单记录采集同步
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:purchaseorder.record.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=purchaseorder.record.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="endUserId">终端用户ID</param>
        /// <param name="orderNo">订单号</param>
        /// <param name="orderLineNo">订单行号</param>
        /// <param name="orderLinePrice">订单行价格</param>
        /// <param name="orderTotalPrice">订单总价</param>
        /// <param name="productId">产品ID</param>
        /// <param name="productName">产品名称</param>
        /// <param name="productPrice">产品价格</param>
        /// <param name="productPriceWithTax">产品含税价格</param>
        /// <param name="productNum">产品个数</param>
        /// <param name="productModel">产品型号</param>
        /// <param name="createTimeStamp">创建时间戳</param>
        /// <param name="modifyTimeStamp">修改时间戳</param>
        /// <param name="productUnit">产品单位</param>
        /// <param name="productBrand">产品品牌</param>
        /// <param name="productSpec">产品规格</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ComAlibabaLinkplusCollectResult> PurchaseorderRecordPutAsync(string orgid, string endUserId, string orderNo, string orderLineNo, double orderLinePrice, double orderTotalPrice, string productId, string productName, double productPrice, double productPriceWithTax, long productNum, string productModel, long createTimeStamp, long modifyTimeStamp, string productUnit = null, string productBrand = null, string productSpec = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.linkplus/purchaseorder.record.put/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orgid == null)
                        throw new System.ArgumentNullException("orgid");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orgid, System.Globalization.CultureInfo.InvariantCulture)), "orgid");
                    }
                    if (endUserId == null)
                        throw new System.ArgumentNullException("endUserId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endUserId, System.Globalization.CultureInfo.InvariantCulture)), "endUserId");
                    }
                    if (orderNo == null)
                        throw new System.ArgumentNullException("orderNo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderNo, System.Globalization.CultureInfo.InvariantCulture)), "orderNo");
                    }
                    if (orderLineNo == null)
                        throw new System.ArgumentNullException("orderLineNo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderLineNo, System.Globalization.CultureInfo.InvariantCulture)), "orderLineNo");
                    }
                    if (orderLinePrice == null)
                        throw new System.ArgumentNullException("orderLinePrice");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderLinePrice, System.Globalization.CultureInfo.InvariantCulture)), "orderLinePrice");
                    }
                    if (orderTotalPrice == null)
                        throw new System.ArgumentNullException("orderTotalPrice");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderTotalPrice, System.Globalization.CultureInfo.InvariantCulture)), "orderTotalPrice");
                    }
                    if (productId == null)
                        throw new System.ArgumentNullException("productId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture)), "productId");
                    }
                    if (productName == null)
                        throw new System.ArgumentNullException("productName");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productName, System.Globalization.CultureInfo.InvariantCulture)), "productName");
                    }
                    if (productPrice == null)
                        throw new System.ArgumentNullException("productPrice");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productPrice, System.Globalization.CultureInfo.InvariantCulture)), "productPrice");
                    }
                    if (productPriceWithTax == null)
                        throw new System.ArgumentNullException("productPriceWithTax");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productPriceWithTax, System.Globalization.CultureInfo.InvariantCulture)), "productPriceWithTax");
                    }
                    if (productNum == null)
                        throw new System.ArgumentNullException("productNum");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productNum, System.Globalization.CultureInfo.InvariantCulture)), "productNum");
                    }
                    if (productModel == null)
                        throw new System.ArgumentNullException("productModel");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productModel, System.Globalization.CultureInfo.InvariantCulture)), "productModel");
                    }
                    if (createTimeStamp == null)
                        throw new System.ArgumentNullException("createTimeStamp");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(createTimeStamp, System.Globalization.CultureInfo.InvariantCulture)), "createTimeStamp");
                    }
                    if (modifyTimeStamp == null)
                        throw new System.ArgumentNullException("modifyTimeStamp");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(modifyTimeStamp, System.Globalization.CultureInfo.InvariantCulture)), "modifyTimeStamp");
                    }
                    if (productUnit != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productUnit, System.Globalization.CultureInfo.InvariantCulture)), "productUnit");
                    }
                    if (productBrand != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productBrand, System.Globalization.CultureInfo.InvariantCulture)), "productBrand");
                    }
                    if (productSpec != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productSpec, System.Globalization.CultureInfo.InvariantCulture)), "productSpec");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ComAlibabaLinkplusCollectResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ComAlibabaLinkplusCollectResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>终端用户感兴趣商品
        /// ERP终端用户感兴趣的类目，类目目前接受1688类目传入，或自定义类目传入。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:enduser.interesting.category-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=enduser.interesting.category&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <param name="endUserId">erp内部的用户身份id</param>
        /// <param name="categoryIds">感兴趣的1688类目id,逗号分隔。任意123级类目均可填写</param>
        /// <param name="categoryNames">感兴趣的1688类目名称,逗号分隔。任意123级类目均可填写</param>
        /// <param name="udfCategoryNames">感兴趣的自定义类目名称,逗号分隔</param>
        /// <returns>返回值</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Result EnduserInterestingCategory(string orgId, string endUserId, string categoryIds = null, string categoryNames = null, string udfCategoryNames = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await EnduserInterestingCategoryAsync(orgId, endUserId, categoryIds, categoryNames, udfCategoryNames, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>终端用户感兴趣商品
        /// ERP终端用户感兴趣的类目，类目目前接受1688类目传入，或自定义类目传入。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:enduser.interesting.category-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=enduser.interesting.category&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <param name="endUserId">erp内部的用户身份id</param>
        /// <param name="categoryIds">感兴趣的1688类目id,逗号分隔。任意123级类目均可填写</param>
        /// <param name="categoryNames">感兴趣的1688类目名称,逗号分隔。任意123级类目均可填写</param>
        /// <param name="udfCategoryNames">感兴趣的自定义类目名称,逗号分隔</param>
        /// <returns>返回值</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Result> EnduserInterestingCategoryAsync(string orgId, string endUserId, string categoryIds = null, string categoryNames = null, string udfCategoryNames = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.linkplus/enduser.interesting.category/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orgId == null)
                        throw new System.ArgumentNullException("orgId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orgId, System.Globalization.CultureInfo.InvariantCulture)), "orgId");
                    }
                    if (endUserId == null)
                        throw new System.ArgumentNullException("endUserId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endUserId, System.Globalization.CultureInfo.InvariantCulture)), "endUserId");
                    }
                    if (categoryIds != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(categoryIds, System.Globalization.CultureInfo.InvariantCulture)), "categoryIds");
                    }
                    if (categoryNames != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(categoryNames, System.Globalization.CultureInfo.InvariantCulture)), "categoryNames");
                    }
                    if (udfCategoryNames != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(udfCategoryNames, System.Globalization.CultureInfo.InvariantCulture)), "udfCategoryNames");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Result>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Result);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>通联支付1688产品推荐开放页面
        /// 通联支付1688产品推荐开放页面
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:allinpay.product.recommend.page-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=allinpay.product.recommend.page&amp;v=1</summary>
        /// <param name="endOrgId">ERP终端机构ID</param>
        /// <param name="endUserId">ERP终端用户ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public void AllinpayProductRecommendPage(string endOrgId, string endUserId)
        {
            System.Threading.Tasks.Task.Run(async () => await AllinpayProductRecommendPageAsync(endOrgId, endUserId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>通联支付1688产品推荐开放页面
        /// 通联支付1688产品推荐开放页面
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:allinpay.product.recommend.page-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=allinpay.product.recommend.page&amp;v=1</summary>
        /// <param name="endOrgId">ERP终端机构ID</param>
        /// <param name="endUserId">ERP终端用户ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AllinpayProductRecommendPageAsync(string endOrgId, string endUserId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.linkplus/allinpay.product.recommend.page/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (endOrgId == null)
                        throw new System.ArgumentNullException("endOrgId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endOrgId, System.Globalization.CultureInfo.InvariantCulture)), "endOrgId");
                    }
                    if (endUserId == null)
                        throw new System.ArgumentNullException("endUserId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endUserId, System.Globalization.CultureInfo.InvariantCulture)), "endUserId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>销售单操作记录同步
        /// 销售单操作记录同步
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:sellorder.record.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=sellorder.record.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="endUserId">终端用户ID</param>
        /// <param name="orderNo">订单号</param>
        /// <param name="orderLineNo">订单行号</param>
        /// <param name="orderLinePrice">订单行价格</param>
        /// <param name="orderTotalPrice">订单总价</param>
        /// <param name="productId">产品ID</param>
        /// <param name="productName">产品名称</param>
        /// <param name="productPrice">产品价格</param>
        /// <param name="productPriceWithTax">产品含税价格</param>
        /// <param name="productModel">产品型号</param>
        /// <param name="productNum">产品个数</param>
        /// <param name="createTimeStamp">创建时间戳</param>
        /// <param name="modifyTimeStamp">修改时间戳</param>
        /// <param name="productUnit">产品单位</param>
        /// <param name="productBrand">产品品牌</param>
        /// <param name="productSpec">产品规格</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public ComAlibabaLinkplusCollectResult SellorderRecordPut(string orgid, string endUserId, string orderNo, string orderLineNo, double orderLinePrice, double orderTotalPrice, string productId, string productName, double productPrice, double productPriceWithTax, string productModel, long productNum, long createTimeStamp, long modifyTimeStamp, string productUnit = null, string productBrand = null, string productSpec = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await SellorderRecordPutAsync(orgid, endUserId, orderNo, orderLineNo, orderLinePrice, orderTotalPrice, productId, productName, productPrice, productPriceWithTax, productModel, productNum, createTimeStamp, modifyTimeStamp, productUnit, productBrand, productSpec, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>销售单操作记录同步
        /// 销售单操作记录同步
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:sellorder.record.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=sellorder.record.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="endUserId">终端用户ID</param>
        /// <param name="orderNo">订单号</param>
        /// <param name="orderLineNo">订单行号</param>
        /// <param name="orderLinePrice">订单行价格</param>
        /// <param name="orderTotalPrice">订单总价</param>
        /// <param name="productId">产品ID</param>
        /// <param name="productName">产品名称</param>
        /// <param name="productPrice">产品价格</param>
        /// <param name="productPriceWithTax">产品含税价格</param>
        /// <param name="productModel">产品型号</param>
        /// <param name="productNum">产品个数</param>
        /// <param name="createTimeStamp">创建时间戳</param>
        /// <param name="modifyTimeStamp">修改时间戳</param>
        /// <param name="productUnit">产品单位</param>
        /// <param name="productBrand">产品品牌</param>
        /// <param name="productSpec">产品规格</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ComAlibabaLinkplusCollectResult> SellorderRecordPutAsync(string orgid, string endUserId, string orderNo, string orderLineNo, double orderLinePrice, double orderTotalPrice, string productId, string productName, double productPrice, double productPriceWithTax, string productModel, long productNum, long createTimeStamp, long modifyTimeStamp, string productUnit = null, string productBrand = null, string productSpec = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.linkplus/sellorder.record.put/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orgid == null)
                        throw new System.ArgumentNullException("orgid");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orgid, System.Globalization.CultureInfo.InvariantCulture)), "orgid");
                    }
                    if (endUserId == null)
                        throw new System.ArgumentNullException("endUserId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endUserId, System.Globalization.CultureInfo.InvariantCulture)), "endUserId");
                    }
                    if (orderNo == null)
                        throw new System.ArgumentNullException("orderNo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderNo, System.Globalization.CultureInfo.InvariantCulture)), "orderNo");
                    }
                    if (orderLineNo == null)
                        throw new System.ArgumentNullException("orderLineNo");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderLineNo, System.Globalization.CultureInfo.InvariantCulture)), "orderLineNo");
                    }
                    if (orderLinePrice == null)
                        throw new System.ArgumentNullException("orderLinePrice");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderLinePrice, System.Globalization.CultureInfo.InvariantCulture)), "orderLinePrice");
                    }
                    if (orderTotalPrice == null)
                        throw new System.ArgumentNullException("orderTotalPrice");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderTotalPrice, System.Globalization.CultureInfo.InvariantCulture)), "orderTotalPrice");
                    }
                    if (productId == null)
                        throw new System.ArgumentNullException("productId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture)), "productId");
                    }
                    if (productName == null)
                        throw new System.ArgumentNullException("productName");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productName, System.Globalization.CultureInfo.InvariantCulture)), "productName");
                    }
                    if (productPrice == null)
                        throw new System.ArgumentNullException("productPrice");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productPrice, System.Globalization.CultureInfo.InvariantCulture)), "productPrice");
                    }
                    if (productPriceWithTax == null)
                        throw new System.ArgumentNullException("productPriceWithTax");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productPriceWithTax, System.Globalization.CultureInfo.InvariantCulture)), "productPriceWithTax");
                    }
                    if (productModel == null)
                        throw new System.ArgumentNullException("productModel");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productModel, System.Globalization.CultureInfo.InvariantCulture)), "productModel");
                    }
                    if (productNum == null)
                        throw new System.ArgumentNullException("productNum");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productNum, System.Globalization.CultureInfo.InvariantCulture)), "productNum");
                    }
                    if (createTimeStamp == null)
                        throw new System.ArgumentNullException("createTimeStamp");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(createTimeStamp, System.Globalization.CultureInfo.InvariantCulture)), "createTimeStamp");
                    }
                    if (modifyTimeStamp == null)
                        throw new System.ArgumentNullException("modifyTimeStamp");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(modifyTimeStamp, System.Globalization.CultureInfo.InvariantCulture)), "modifyTimeStamp");
                    }
                    if (productUnit != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productUnit, System.Globalization.CultureInfo.InvariantCulture)), "productUnit");
                    }
                    if (productBrand != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productBrand, System.Globalization.CultureInfo.InvariantCulture)), "productBrand");
                    }
                    if (productSpec != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(productSpec, System.Globalization.CultureInfo.InvariantCulture)), "productSpec");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ComAlibabaLinkplusCollectResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ComAlibabaLinkplusCollectResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>机构授权信息推送同步
        /// 终端机构授权ERP把自己的数据同步给网站时，需要把机构授权信息同步给网站
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:org.auth.info.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=org.auth.info.put&amp;v=1</summary>
        /// <param name="orgid">机构id</param>
        /// <param name="orgIsAuth">是否授权</param>
        /// <param name="modifyTimeStamp">授权修改时间</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public ComAlibabaLinkplusCollectResult OrgAuthInfoPut(string orgid, bool orgIsAuth, long modifyTimeStamp)
        {
            return System.Threading.Tasks.Task.Run(async () => await OrgAuthInfoPutAsync(orgid, orgIsAuth, modifyTimeStamp, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>机构授权信息推送同步
        /// 终端机构授权ERP把自己的数据同步给网站时，需要把机构授权信息同步给网站
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:org.auth.info.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=org.auth.info.put&amp;v=1</summary>
        /// <param name="orgid">机构id</param>
        /// <param name="orgIsAuth">是否授权</param>
        /// <param name="modifyTimeStamp">授权修改时间</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ComAlibabaLinkplusCollectResult> OrgAuthInfoPutAsync(string orgid, bool orgIsAuth, long modifyTimeStamp, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.linkplus/org.auth.info.put/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orgid == null)
                        throw new System.ArgumentNullException("orgid");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orgid, System.Globalization.CultureInfo.InvariantCulture)), "orgid");
                    }
                    if (orgIsAuth == null)
                        throw new System.ArgumentNullException("orgIsAuth");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orgIsAuth, System.Globalization.CultureInfo.InvariantCulture)), "orgIsAuth");
                    }
                    if (modifyTimeStamp == null)
                        throw new System.ArgumentNullException("modifyTimeStamp");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(modifyTimeStamp, System.Globalization.CultureInfo.InvariantCulture)), "modifyTimeStamp");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ComAlibabaLinkplusCollectResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ComAlibabaLinkplusCollectResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>跨境场景企业维度热销品搜索
        /// 按照企业维度给出热销品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.cross.company.product.hot.search-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.cross.company.product.hot.search&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCrossCompanyProductHotSearchResult AlibabaCrossCompanyProductHotSearch(string orgId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCrossCompanyProductHotSearchAsync(orgId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>跨境场景企业维度热销品搜索
        /// 按照企业维度给出热销品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.cross.company.product.hot.search-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.cross.company.product.hot.search&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCrossCompanyProductHotSearchResult> AlibabaCrossCompanyProductHotSearchAsync(string orgId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.linkplus/alibaba.cross.company.product.hot.search/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orgId == null)
                        throw new System.ArgumentNullException("orgId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orgId, System.Globalization.CultureInfo.InvariantCulture)), "orgId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCrossCompanyProductHotSearchResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCrossCompanyProductHotSearchResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>感兴趣关键词采集同步
        /// 当终端用户发起感兴趣的商品，比如搜索，点击时，ERP发起终端用户感兴趣商品名称或者关键字信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:interesting.keyword.record.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=interesting.keyword.record.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="endUserId">终端用户UserId</param>
        /// <param name="keywords">关键词</param>
        /// <param name="operateTimeStamp">发起时间</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public ComAlibabaLinkplusCollectResult InterestingKeywordRecordPut(string orgid, string endUserId, string keywords, long operateTimeStamp)
        {
            return System.Threading.Tasks.Task.Run(async () => await InterestingKeywordRecordPutAsync(orgid, endUserId, keywords, operateTimeStamp, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>感兴趣关键词采集同步
        /// 当终端用户发起感兴趣的商品，比如搜索，点击时，ERP发起终端用户感兴趣商品名称或者关键字信息
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:interesting.keyword.record.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=interesting.keyword.record.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="endUserId">终端用户UserId</param>
        /// <param name="keywords">关键词</param>
        /// <param name="operateTimeStamp">发起时间</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ComAlibabaLinkplusCollectResult> InterestingKeywordRecordPutAsync(string orgid, string endUserId, string keywords, long operateTimeStamp, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.linkplus/interesting.keyword.record.put/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orgid == null)
                        throw new System.ArgumentNullException("orgid");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orgid, System.Globalization.CultureInfo.InvariantCulture)), "orgid");
                    }
                    if (endUserId == null)
                        throw new System.ArgumentNullException("endUserId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endUserId, System.Globalization.CultureInfo.InvariantCulture)), "endUserId");
                    }
                    if (keywords == null)
                        throw new System.ArgumentNullException("keywords");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(keywords, System.Globalization.CultureInfo.InvariantCulture)), "keywords");
                    }
                    if (operateTimeStamp == null)
                        throw new System.ArgumentNullException("operateTimeStamp");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(operateTimeStamp, System.Globalization.CultureInfo.InvariantCulture)), "operateTimeStamp");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ComAlibabaLinkplusCollectResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ComAlibabaLinkplusCollectResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>工业品市场产品精准匹配开放页面接口
        /// 工业品市场产品精准匹配开放页面接口
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:industrialmarket.product.match.page-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=industrialmarket.product.match.page&amp;v=1</summary>
        /// <param name="batchId">业务批次ID</param>
        /// <param name="endOrgId">ERP终端机构ID</param>
        /// <param name="endUserId">ERP终端用户ID</param>
        /// <param name="erpWarehouse">仓库信息</param>
        /// <param name="erpPrePurchaseOrder">预采购订单列表</param>
        /// <param name="umidToken">设备码，通过阿里指定js获取</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public void IndustrialmarketProductMatchPage(string batchId, string endOrgId, string endUserId, ErpWarehouse erpWarehouse, System.Collections.Generic.IEnumerable<ErpPrePurchaseOrder> erpPrePurchaseOrder, string umidToken = null)
        {
            System.Threading.Tasks.Task.Run(async () => await IndustrialmarketProductMatchPageAsync(batchId, endOrgId, endUserId, erpWarehouse, erpPrePurchaseOrder, umidToken, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>工业品市场产品精准匹配开放页面接口
        /// 工业品市场产品精准匹配开放页面接口
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:industrialmarket.product.match.page-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=industrialmarket.product.match.page&amp;v=1</summary>
        /// <param name="batchId">业务批次ID</param>
        /// <param name="endOrgId">ERP终端机构ID</param>
        /// <param name="endUserId">ERP终端用户ID</param>
        /// <param name="erpWarehouse">仓库信息</param>
        /// <param name="erpPrePurchaseOrder">预采购订单列表</param>
        /// <param name="umidToken">设备码，通过阿里指定js获取</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task IndustrialmarketProductMatchPageAsync(string batchId, string endOrgId, string endUserId, ErpWarehouse erpWarehouse, System.Collections.Generic.IEnumerable<ErpPrePurchaseOrder> erpPrePurchaseOrder, string umidToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.linkplus/industrialmarket.product.match.page/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (batchId == null)
                        throw new System.ArgumentNullException("batchId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(batchId, System.Globalization.CultureInfo.InvariantCulture)), "batchId");
                    }
                    if (endOrgId == null)
                        throw new System.ArgumentNullException("endOrgId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endOrgId, System.Globalization.CultureInfo.InvariantCulture)), "endOrgId");
                    }
                    if (endUserId == null)
                        throw new System.ArgumentNullException("endUserId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endUserId, System.Globalization.CultureInfo.InvariantCulture)), "endUserId");
                    }
                    if (erpWarehouse == null)
                        throw new System.ArgumentNullException("erpWarehouse");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(erpWarehouse, System.Globalization.CultureInfo.InvariantCulture)), "erpWarehouse");
                    }
                    if (erpPrePurchaseOrder == null)
                        throw new System.ArgumentNullException("erpPrePurchaseOrder");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(erpPrePurchaseOrder, System.Globalization.CultureInfo.InvariantCulture)), "erpPrePurchaseOrder");
                    }
                    if (umidToken != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(umidToken, System.Globalization.CultureInfo.InvariantCulture)), "umidToken");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>跨境场景企业维度折扣品搜索
        /// 按照企业维度给出折扣品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.cross.company.product.discount.search-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.cross.company.product.discount.search&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCrossCompanyProductDiscountSearchResult AlibabaCrossCompanyProductDiscountSearch(string orgId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCrossCompanyProductDiscountSearchAsync(orgId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>跨境场景企业维度折扣品搜索
        /// 按照企业维度给出折扣品列表
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.cross.company.product.discount.search-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.cross.company.product.discount.search&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCrossCompanyProductDiscountSearchResult> AlibabaCrossCompanyProductDiscountSearchAsync(string orgId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.linkplus/alibaba.cross.company.product.discount.search/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orgId == null)
                        throw new System.ArgumentNullException("orgId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orgId, System.Globalization.CultureInfo.InvariantCulture)), "orgId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCrossCompanyProductDiscountSearchResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCrossCompanyProductDiscountSearchResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>ERP用户登录记录采集同步
        /// erp终端用户登录数据采集同步
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:enduser.login.record.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=enduser.login.record.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="endUserId">终端用户ID</param>
        /// <param name="realUrl">当前URL</param>
        /// <param name="loginTimeStamp">登录时间</param>
        /// <param name="ip">登录IP地址</param>
        /// <param name="countryName">国家名称</param>
        /// <param name="provinceName">省名称</param>
        /// <param name="cityName">城市名称</param>
        /// <param name="scr">分辨率</param>
        /// <param name="agent">浏览器</param>
        /// <param name="agentName">客户端信息串</param>
        /// <param name="platform">操作系统</param>
        /// <returns>返回结果值</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public ComAlibabaLinkplusCollectResult EnduserLoginRecordPut(string orgid, string endUserId, string realUrl, long loginTimeStamp, string ip = null, string countryName = null, string provinceName = null, string cityName = null, string scr = null, string agent = null, string agentName = null, string platform = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await EnduserLoginRecordPutAsync(orgid, endUserId, realUrl, loginTimeStamp, ip, countryName, provinceName, cityName, scr, agent, agentName, platform, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>ERP用户登录记录采集同步
        /// erp终端用户登录数据采集同步
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:enduser.login.record.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=enduser.login.record.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="endUserId">终端用户ID</param>
        /// <param name="realUrl">当前URL</param>
        /// <param name="loginTimeStamp">登录时间</param>
        /// <param name="ip">登录IP地址</param>
        /// <param name="countryName">国家名称</param>
        /// <param name="provinceName">省名称</param>
        /// <param name="cityName">城市名称</param>
        /// <param name="scr">分辨率</param>
        /// <param name="agent">浏览器</param>
        /// <param name="agentName">客户端信息串</param>
        /// <param name="platform">操作系统</param>
        /// <returns>返回结果值</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ComAlibabaLinkplusCollectResult> EnduserLoginRecordPutAsync(string orgid, string endUserId, string realUrl, long loginTimeStamp, string ip = null, string countryName = null, string provinceName = null, string cityName = null, string scr = null, string agent = null, string agentName = null, string platform = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.linkplus/enduser.login.record.put/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orgid == null)
                        throw new System.ArgumentNullException("orgid");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orgid, System.Globalization.CultureInfo.InvariantCulture)), "orgid");
                    }
                    if (endUserId == null)
                        throw new System.ArgumentNullException("endUserId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endUserId, System.Globalization.CultureInfo.InvariantCulture)), "endUserId");
                    }
                    if (realUrl == null)
                        throw new System.ArgumentNullException("realUrl");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(realUrl, System.Globalization.CultureInfo.InvariantCulture)), "realUrl");
                    }
                    if (loginTimeStamp == null)
                        throw new System.ArgumentNullException("loginTimeStamp");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(loginTimeStamp, System.Globalization.CultureInfo.InvariantCulture)), "loginTimeStamp");
                    }
                    if (ip != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(ip, System.Globalization.CultureInfo.InvariantCulture)), "ip");
                    }
                    if (countryName != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(countryName, System.Globalization.CultureInfo.InvariantCulture)), "countryName");
                    }
                    if (provinceName != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(provinceName, System.Globalization.CultureInfo.InvariantCulture)), "provinceName");
                    }
                    if (cityName != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(cityName, System.Globalization.CultureInfo.InvariantCulture)), "cityName");
                    }
                    if (scr != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(scr, System.Globalization.CultureInfo.InvariantCulture)), "scr");
                    }
                    if (agent != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(agent, System.Globalization.CultureInfo.InvariantCulture)), "agent");
                    }
                    if (agentName != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(agentName, System.Globalization.CultureInfo.InvariantCulture)), "agentName");
                    }
                    if (platform != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(platform, System.Globalization.CultureInfo.InvariantCulture)), "platform");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ComAlibabaLinkplusCollectResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ComAlibabaLinkplusCollectResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>跨境场景企业维度货源推荐页面转发
        /// 按照企业维度给出推荐的货源列表，erp需要有跨境货源推荐的权限，并且事先要上传企业数据
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.cross.company.product.recommend-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.cross.company.product.recommend&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id，如果是超级买家则使用超买内部系统用的企业身份id，如果没有就自定义一个标志性的名字</param>
        /// <param name="endUserId">erp内部的个人身份id，如果是超级买家则使用超买内部系统用的个人身份id，如果没有就自定义一个标志性的名字</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCrossCompanyProductRecommendResult AlibabaCrossCompanyProductRecommend(string orgId, string endUserId = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCrossCompanyProductRecommendAsync(orgId, endUserId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>跨境场景企业维度货源推荐页面转发
        /// 按照企业维度给出推荐的货源列表，erp需要有跨境货源推荐的权限，并且事先要上传企业数据
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:alibaba.cross.company.product.recommend-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=alibaba.cross.company.product.recommend&amp;v=1</summary>
        /// <param name="orgId">erp内部的企业身份id，如果是超级买家则使用超买内部系统用的企业身份id，如果没有就自定义一个标志性的名字</param>
        /// <param name="endUserId">erp内部的个人身份id，如果是超级买家则使用超买内部系统用的个人身份id，如果没有就自定义一个标志性的名字</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCrossCompanyProductRecommendResult> AlibabaCrossCompanyProductRecommendAsync(string orgId, string endUserId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.linkplus/alibaba.cross.company.product.recommend/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orgId == null)
                        throw new System.ArgumentNullException("orgId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orgId, System.Globalization.CultureInfo.InvariantCulture)), "orgId");
                    }
                    if (endUserId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endUserId, System.Globalization.CultureInfo.InvariantCulture)), "endUserId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCrossCompanyProductRecommendResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCrossCompanyProductRecommendResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>物流信息同步
        /// ERP物流信息同步
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:logistics.record.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=logistics.record.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="endUserId">终端用户Id</param>
        /// <param name="fromAddress">发货地</param>
        /// <param name="toAddress">收货地</param>
        /// <param name="logisticsCorp">物流公司</param>
        /// <param name="logisticsOrderId">物流单号</param>
        /// <param name="orderIds">订单</param>
        /// <param name="operateTimeStamp">操作时间</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public ComAlibabaLinkplusCollectResult LogisticsRecordPut(string orgid, string endUserId, string fromAddress, string toAddress, string logisticsCorp, string logisticsOrderId, string orderIds, long operateTimeStamp)
        {
            return System.Threading.Tasks.Task.Run(async () => await LogisticsRecordPutAsync(orgid, endUserId, fromAddress, toAddress, logisticsCorp, logisticsOrderId, orderIds, operateTimeStamp, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>物流信息同步
        /// ERP物流信息同步
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.linkplus:logistics.record.put-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.linkplus&amp;n=logistics.record.put&amp;v=1</summary>
        /// <param name="orgid">机构ID</param>
        /// <param name="endUserId">终端用户Id</param>
        /// <param name="fromAddress">发货地</param>
        /// <param name="toAddress">收货地</param>
        /// <param name="logisticsCorp">物流公司</param>
        /// <param name="logisticsOrderId">物流单号</param>
        /// <param name="orderIds">订单</param>
        /// <param name="operateTimeStamp">操作时间</param>
        /// <returns>返回结果</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ComAlibabaLinkplusCollectResult> LogisticsRecordPutAsync(string orgid, string endUserId, string fromAddress, string toAddress, string logisticsCorp, string logisticsOrderId, string orderIds, long operateTimeStamp, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.linkplus/logistics.record.put/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orgid == null)
                        throw new System.ArgumentNullException("orgid");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orgid, System.Globalization.CultureInfo.InvariantCulture)), "orgid");
                    }
                    if (endUserId == null)
                        throw new System.ArgumentNullException("endUserId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(endUserId, System.Globalization.CultureInfo.InvariantCulture)), "endUserId");
                    }
                    if (fromAddress == null)
                        throw new System.ArgumentNullException("fromAddress");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(fromAddress, System.Globalization.CultureInfo.InvariantCulture)), "fromAddress");
                    }
                    if (toAddress == null)
                        throw new System.ArgumentNullException("toAddress");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(toAddress, System.Globalization.CultureInfo.InvariantCulture)), "toAddress");
                    }
                    if (logisticsCorp == null)
                        throw new System.ArgumentNullException("logisticsCorp");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(logisticsCorp, System.Globalization.CultureInfo.InvariantCulture)), "logisticsCorp");
                    }
                    if (logisticsOrderId == null)
                        throw new System.ArgumentNullException("logisticsOrderId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(logisticsOrderId, System.Globalization.CultureInfo.InvariantCulture)), "logisticsOrderId");
                    }
                    if (orderIds == null)
                        throw new System.ArgumentNullException("orderIds");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderIds, System.Globalization.CultureInfo.InvariantCulture)), "orderIds");
                    }
                    if (operateTimeStamp == null)
                        throw new System.ArgumentNullException("operateTimeStamp");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(operateTimeStamp, System.Globalization.CultureInfo.InvariantCulture)), "operateTimeStamp");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ComAlibabaLinkplusCollectResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ComAlibabaLinkplusCollectResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>模型草稿删除
        /// 模型草稿删除
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.delete&amp;v=1</summary>
        /// <param name="code">模型code</param>
        /// <param name="userId">被操作的用户Id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public void I3dDraftmodelDelete(string code, long userId)
        {
            System.Threading.Tasks.Task.Run(async () => await I3dDraftmodelDeleteAsync(code, userId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>模型草稿删除
        /// 模型草稿删除
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.delete-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.delete&amp;v=1</summary>
        /// <param name="code">模型code</param>
        /// <param name="userId">被操作的用户Id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task I3dDraftmodelDeleteAsync(string code, long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.i3d/i3d.draftmodel.delete/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (code == null)
                        throw new System.ArgumentNullException("code");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture)), "code");
                    }
                    if (userId == null)
                        throw new System.ArgumentNullException("userId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)), "userId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>3D模型草稿获取
        /// 模型草稿获取，上传的模型，均以草稿方式存在。只有用户确认后，转为正式模型文件。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.get&amp;v=1</summary>
        /// <param name="code">模型code</param>
        /// <param name="userId">被操作的用户Id</param>
        /// <returns>3D互动模型数据</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Interactive3dApiModelI3dDraftModel I3dDraftmodelGet(string code, long userId)
        {
            return System.Threading.Tasks.Task.Run(async () => await I3dDraftmodelGetAsync(code, userId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>3D模型草稿获取
        /// 模型草稿获取，上传的模型，均以草稿方式存在。只有用户确认后，转为正式模型文件。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.get&amp;v=1</summary>
        /// <param name="code">模型code</param>
        /// <param name="userId">被操作的用户Id</param>
        /// <returns>3D互动模型数据</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Interactive3dApiModelI3dDraftModel> I3dDraftmodelGetAsync(string code, long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.i3d/i3d.draftmodel.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (code == null)
                        throw new System.ArgumentNullException("code");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture)), "code");
                    }
                    if (userId == null)
                        throw new System.ArgumentNullException("userId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)), "userId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Interactive3dApiModelI3dDraftModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Interactive3dApiModelI3dDraftModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>3D模型草稿上传
        /// 3D模型草稿上传
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.upload-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.upload&amp;v=1</summary>
        /// <param name="modelFile">模型流数据流，zip文件格式流</param>
        /// <param name="desc">模型描述</param>
        /// <param name="userId">操作的用户ID</param>
        /// <returns>上传模型数据</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Interactive3dApiModelI3dDraftModel I3dDraftmodelUpload(byte[] modelFile, string desc, long userId)
        {
            return System.Threading.Tasks.Task.Run(async () => await I3dDraftmodelUploadAsync(modelFile, desc, userId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>3D模型草稿上传
        /// 3D模型草稿上传
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.upload-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.upload&amp;v=1</summary>
        /// <param name="modelFile">模型流数据流，zip文件格式流</param>
        /// <param name="desc">模型描述</param>
        /// <param name="userId">操作的用户ID</param>
        /// <returns>上传模型数据</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Interactive3dApiModelI3dDraftModel> I3dDraftmodelUploadAsync(byte[] modelFile, string desc, long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.i3d/i3d.draftmodel.upload/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (modelFile == null)
                        throw new System.ArgumentNullException("modelFile");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(modelFile, System.Globalization.CultureInfo.InvariantCulture)), "modelFile");
                    }
                    if (desc == null)
                        throw new System.ArgumentNullException("desc");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(desc, System.Globalization.CultureInfo.InvariantCulture)), "desc");
                    }
                    if (userId == null)
                        throw new System.ArgumentNullException("userId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)), "userId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Interactive3dApiModelI3dDraftModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Interactive3dApiModelI3dDraftModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>3D模型草稿列表获取
        /// 3D模型草稿列表获取，3D模型上传后以草稿方式存在，只有用户确认后可变为正式模型。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.list&amp;v=1</summary>
        /// <param name="userId">被操作的用户Id</param>
        /// <param name="pageSize">每页大小</param>
        /// <param name="pageStart">当前页</param>
        /// <param name="status">模型状态列表</param>
        /// <param name="desc">模型描述信息</param>
        /// <returns>3D模型草稿翻页数据</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Interactive3dPage I3dDraftmodelList(long userId, int pageSize, int pageStart, System.Collections.Generic.IEnumerable<string> status = null, string desc = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await I3dDraftmodelListAsync(userId, pageSize, pageStart, status, desc, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>3D模型草稿列表获取
        /// 3D模型草稿列表获取，3D模型上传后以草稿方式存在，只有用户确认后可变为正式模型。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.list-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.list&amp;v=1</summary>
        /// <param name="userId">被操作的用户Id</param>
        /// <param name="pageSize">每页大小</param>
        /// <param name="pageStart">当前页</param>
        /// <param name="status">模型状态列表</param>
        /// <param name="desc">模型描述信息</param>
        /// <returns>3D模型草稿翻页数据</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Interactive3dPage> I3dDraftmodelListAsync(long userId, int pageSize, int pageStart, System.Collections.Generic.IEnumerable<string> status = null, string desc = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.i3d/i3d.draftmodel.list/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (userId == null)
                        throw new System.ArgumentNullException("userId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)), "userId");
                    }
                    if (pageSize == null)
                        throw new System.ArgumentNullException("pageSize");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture)), "pageSize");
                    }
                    if (pageStart == null)
                        throw new System.ArgumentNullException("pageStart");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(pageStart, System.Globalization.CultureInfo.InvariantCulture)), "pageStart");
                    }
                    if (status != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture)), "status");
                    }
                    if (desc != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(desc, System.Globalization.CultureInfo.InvariantCulture)), "desc");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Interactive3dPage>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Interactive3dPage);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>3D模型草稿重传覆盖
        /// 3D模型草稿重传覆盖，覆盖原来的模型草稿
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.reupload-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.reupload&amp;v=1</summary>
        /// <param name="modelFile">模型文件流</param>
        /// <param name="code">重传的模型code</param>
        /// <param name="desc">模型描述</param>
        /// <param name="userId">被操作的用户ID</param>
        /// <returns>3D模型草稿数据</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Interactive3dApiModelI3dDraftModel I3dDraftmodelReupload(byte[] modelFile, string code, string desc, long userId)
        {
            return System.Threading.Tasks.Task.Run(async () => await I3dDraftmodelReuploadAsync(modelFile, code, desc, userId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>3D模型草稿重传覆盖
        /// 3D模型草稿重传覆盖，覆盖原来的模型草稿
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.reupload-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.reupload&amp;v=1</summary>
        /// <param name="modelFile">模型文件流</param>
        /// <param name="code">重传的模型code</param>
        /// <param name="desc">模型描述</param>
        /// <param name="userId">被操作的用户ID</param>
        /// <returns>3D模型草稿数据</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Interactive3dApiModelI3dDraftModel> I3dDraftmodelReuploadAsync(byte[] modelFile, string code, string desc, long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.i3d/i3d.draftmodel.reupload/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (modelFile == null)
                        throw new System.ArgumentNullException("modelFile");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(modelFile, System.Globalization.CultureInfo.InvariantCulture)), "modelFile");
                    }
                    if (code == null)
                        throw new System.ArgumentNullException("code");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture)), "code");
                    }
                    if (desc == null)
                        throw new System.ArgumentNullException("desc");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(desc, System.Globalization.CultureInfo.InvariantCulture)), "desc");
                    }
                    if (userId == null)
                        throw new System.ArgumentNullException("userId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)), "userId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Interactive3dApiModelI3dDraftModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Interactive3dApiModelI3dDraftModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>3D互动模型信息获取
        /// 3D互动模型信息获取
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.model.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.model.get&amp;v=1</summary>
        /// <param name="code">模型code</param>
        /// <returns>test</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response7 I3dModelGet(string code)
        {
            return System.Threading.Tasks.Task.Run(async () => await I3dModelGetAsync(code, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>3D互动模型信息获取
        /// 3D互动模型信息获取
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.model.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.model.get&amp;v=1</summary>
        /// <param name="code">模型code</param>
        /// <returns>test</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response7> I3dModelGetAsync(string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.i3d/i3d.model.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (code == null)
                        throw new System.ArgumentNullException("code");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture)), "code");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response7>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response7);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>3D模型草稿资源文件url前缀获取
        /// 3D模型草稿资源文件url前缀获取，模型定义文件中的url目前设置为相对路径地址，需要获取资源前缀后，拼接url访问。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.resource.url.prefix.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.resource.url.prefix.get&amp;v=1</summary>
        /// <param name="code">模型code</param>
        /// <param name="userId">被操作的用户ID</param>
        /// <returns>模型草稿资源文件url前缀</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Response7 I3dDraftmodelResourceUrlPrefixGet(string code, long userId)
        {
            return System.Threading.Tasks.Task.Run(async () => await I3dDraftmodelResourceUrlPrefixGetAsync(code, userId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>3D模型草稿资源文件url前缀获取
        /// 3D模型草稿资源文件url前缀获取，模型定义文件中的url目前设置为相对路径地址，需要获取资源前缀后，拼接url访问。
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.resource.url.prefix.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.resource.url.prefix.get&amp;v=1</summary>
        /// <param name="code">模型code</param>
        /// <param name="userId">被操作的用户ID</param>
        /// <returns>模型草稿资源文件url前缀</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response7> I3dDraftmodelResourceUrlPrefixGetAsync(string code, long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.i3d/i3d.draftmodel.resource.url.prefix.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (code == null)
                        throw new System.ArgumentNullException("code");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture)), "code");
                    }
                    if (userId == null)
                        throw new System.ArgumentNullException("userId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)), "userId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response7>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response7);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>模型草稿确认
        /// 模型草稿确认，确认后转为正式模型
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.confirm-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.confirm&amp;v=1</summary>
        /// <param name="code">模型code</param>
        /// <param name="userId">被操作的用户id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public void I3dDraftmodelConfirm(string code, string userId)
        {
            System.Threading.Tasks.Task.Run(async () => await I3dDraftmodelConfirmAsync(code, userId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>模型草稿确认
        /// 模型草稿确认，确认后转为正式模型
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.i3d:i3d.draftmodel.confirm-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.i3d&amp;n=i3d.draftmodel.confirm&amp;v=1</summary>
        /// <param name="code">模型code</param>
        /// <param name="userId">被操作的用户id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task I3dDraftmodelConfirmAsync(string code, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.i3d/i3d.draftmodel.confirm/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (code == null)
                        throw new System.ArgumentNullException("code");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture)), "code");
                    }
                    if (userId == null)
                        throw new System.ArgumentNullException("userId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)), "userId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>创建订单前预览数据接口
        /// 订单创建只允许购买同一个供应商的商品。本接口返回创建订单相关的优惠等信息。1、校验商品数据是否允许订购。2、校验代销关系3、校验库存、起批量、是否满足混批条件。Order creation only allows purchasing items from the same supplier. This interface returns information such as the order-related discount offers. 1. Verify if the product is allowed to be ordered. 2. Verify the consignment relationship. 3. Check the inventory, minimum order quantity, whether to meet the mixed batch conditions.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.createOrder.previewWithOBUid-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.createOrder.previewWithOBUid&amp;v=1</summary>
        /// <param name="obUid">代购用户唯一Id</param>
        /// <param name="addressParam">收货地址信息</param>
        /// <param name="cargoParamList">商品信息</param>
        /// <param name="invoiceParam">发票信息</param>
        /// <param name="flow">general（创建大市场订单），saleproxy（创建分销订单）。saleproxy流程将校验分销关系</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_007	- 与供应商的代销关系不存在,不能使用saleproxy通道下单。(flow不能使用slproxy)
        /// 500_005	- 商品[offerId]的购买数量不满足起批量限制。(商品的购买数量小于起批量)
        /// 500_006	- 商品[offerId]的购买数量或者价格不满足混批限制。(商品的购买数量或者总金额均不满足混批条件)
        /// 500_004	- 商品[offerId_specId]库存不足，请核实库存后订购。(商品的某个规格库存不足)
        /// 500_002	- 商品[offerId]不属于同一卖家或者没有指定specId。(存在多个卖家的商品或者商品没有指定specId)
        /// 500_003	- 商品[offerId ]不属于同一卖家或者规格[specId] 不属于商品[offerId](存在多个卖家的商品或者商品不存在specId的规格)
        /// 500_001	- 商品[offerId]不支持在线交易，无法下单。(商品不支持在线交易，目前不能购买)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCreateOrderPreviewWithOBUidResult AlibabaCreateOrderPreviewWithOBUid(string obUid, AlibabaTradeFastAddress addressParam, System.Collections.Generic.IEnumerable<AlibabaTradeFastCargo> cargoParamList, AlibabaTradeFastInvoice invoiceParam = null, string flow = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCreateOrderPreviewWithOBUidAsync(obUid, addressParam, cargoParamList, invoiceParam, flow, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>创建订单前预览数据接口
        /// 订单创建只允许购买同一个供应商的商品。本接口返回创建订单相关的优惠等信息。1、校验商品数据是否允许订购。2、校验代销关系3、校验库存、起批量、是否满足混批条件。Order creation only allows purchasing items from the same supplier. This interface returns information such as the order-related discount offers. 1. Verify if the product is allowed to be ordered. 2. Verify the consignment relationship. 3. Check the inventory, minimum order quantity, whether to meet the mixed batch conditions.
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.createOrder.previewWithOBUid-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.createOrder.previewWithOBUid&amp;v=1</summary>
        /// <param name="obUid">代购用户唯一Id</param>
        /// <param name="addressParam">收货地址信息</param>
        /// <param name="cargoParamList">商品信息</param>
        /// <param name="invoiceParam">发票信息</param>
        /// <param name="flow">general（创建大市场订单），saleproxy（创建分销订单）。saleproxy流程将校验分销关系</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_007	- 与供应商的代销关系不存在,不能使用saleproxy通道下单。(flow不能使用slproxy)
        /// 500_005	- 商品[offerId]的购买数量不满足起批量限制。(商品的购买数量小于起批量)
        /// 500_006	- 商品[offerId]的购买数量或者价格不满足混批限制。(商品的购买数量或者总金额均不满足混批条件)
        /// 500_004	- 商品[offerId_specId]库存不足，请核实库存后订购。(商品的某个规格库存不足)
        /// 500_002	- 商品[offerId]不属于同一卖家或者没有指定specId。(存在多个卖家的商品或者商品没有指定specId)
        /// 500_003	- 商品[offerId ]不属于同一卖家或者规格[specId] 不属于商品[offerId](存在多个卖家的商品或者商品不存在specId的规格)
        /// 500_001	- 商品[offerId]不支持在线交易，无法下单。(商品不支持在线交易，目前不能购买)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCreateOrderPreviewWithOBUidResult> AlibabaCreateOrderPreviewWithOBUidAsync(string obUid, AlibabaTradeFastAddress addressParam, System.Collections.Generic.IEnumerable<AlibabaTradeFastCargo> cargoParamList, AlibabaTradeFastInvoice invoiceParam = null, string flow = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.createOrder.previewWithOBUid/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (obUid == null)
                        throw new System.ArgumentNullException("obUid");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(obUid, System.Globalization.CultureInfo.InvariantCulture)), "obUid");
                    }
                    if (addressParam == null)
                        throw new System.ArgumentNullException("addressParam");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(addressParam, System.Globalization.CultureInfo.InvariantCulture)), "addressParam");
                    }
                    if (cargoParamList == null)
                        throw new System.ArgumentNullException("cargoParamList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(cargoParamList, System.Globalization.CultureInfo.InvariantCulture)), "cargoParamList");
                    }
                    if (invoiceParam != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(invoiceParam, System.Globalization.CultureInfo.InvariantCulture)), "invoiceParam");
                    }
                    if (flow != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(flow, System.Globalization.CultureInfo.InvariantCulture)), "flow");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCreateOrderPreviewWithOBUidResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCreateOrderPreviewWithOBUidResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>跨境订单创建
        /// 跨境专用订单创建。创建订单最多允许100个SKU，且必须为同一个供应商的商品。超过50个SKU或者一些特殊情况会一次创建多个个订单并返回多个订单号。
        /// 支持大市场及分销两个场景。根据当前授权用户,区分主子账号下单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.createCrossOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.createCrossOrder&amp;v=1</summary>
        /// <param name="flow">流程</param>
        /// <param name="addressParam">收货地址信息</param>
        /// <param name="cargoParamList">商品信息</param>
        /// <param name="message">买家留言</param>
        /// <param name="invoiceParam">发票信息</param>
        /// <param name="tradeType">由于不同的商品支持的交易方式不同，没有一种交易方式是全局通用的，所以当前下单可使用的交易方式必须通过下单预览接口的tradeModeNameList获取。交易方式类型说明：fxassure（交易4.0通用担保交易），alipay（大市场通用的支付宝担保交易（目前在做切流，后续会下掉）），period（普通账期交易）, assure（大买家企业采购询报价下单时需要使用的担保交易流程）, creditBuy（诚E赊），bank（银行转账），631staged（631分阶段付款），37staged（37分阶段）；此字段不传则系统默认会选取一个可用的交易方式下单，默认使用的方式是支付宝担宝交易。</param>
        /// <param name="shopPromotionId">店铺优惠ID，通过“创建订单前预览数据接口”获得。为空默认使用默认优惠</param>
        /// <param name="anonymousBuyer">是否匿名下单</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// not support tradeType:【XXXX】	- 不支持的交易类型(当前交易可支持的交易类型，需要通过预览接口的tradeModeNameList字段获取)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradeCreateCrossOrderResult AlibabaTradeCreateCrossOrder(string flow, AlibabaTradeFastAddress addressParam, System.Collections.Generic.IEnumerable<AlibabaTradeFastCargo> cargoParamList, string message = null, AlibabaTradeFastInvoice invoiceParam = null, string tradeType = null, string shopPromotionId = null, bool? anonymousBuyer = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradeCreateCrossOrderAsync(flow, addressParam, cargoParamList, message, invoiceParam, tradeType, shopPromotionId, anonymousBuyer, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>跨境订单创建
        /// 跨境专用订单创建。创建订单最多允许100个SKU，且必须为同一个供应商的商品。超过50个SKU或者一些特殊情况会一次创建多个个订单并返回多个订单号。
        /// 支持大市场及分销两个场景。根据当前授权用户,区分主子账号下单
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.createCrossOrder-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.createCrossOrder&amp;v=1</summary>
        /// <param name="flow">流程</param>
        /// <param name="addressParam">收货地址信息</param>
        /// <param name="cargoParamList">商品信息</param>
        /// <param name="message">买家留言</param>
        /// <param name="invoiceParam">发票信息</param>
        /// <param name="tradeType">由于不同的商品支持的交易方式不同，没有一种交易方式是全局通用的，所以当前下单可使用的交易方式必须通过下单预览接口的tradeModeNameList获取。交易方式类型说明：fxassure（交易4.0通用担保交易），alipay（大市场通用的支付宝担保交易（目前在做切流，后续会下掉）），period（普通账期交易）, assure（大买家企业采购询报价下单时需要使用的担保交易流程）, creditBuy（诚E赊），bank（银行转账），631staged（631分阶段付款），37staged（37分阶段）；此字段不传则系统默认会选取一个可用的交易方式下单，默认使用的方式是支付宝担宝交易。</param>
        /// <param name="shopPromotionId">店铺优惠ID，通过“创建订单前预览数据接口”获得。为空默认使用默认优惠</param>
        /// <param name="anonymousBuyer">是否匿名下单</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// not support tradeType:【XXXX】	- 不支持的交易类型(当前交易可支持的交易类型，需要通过预览接口的tradeModeNameList字段获取)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradeCreateCrossOrderResult> AlibabaTradeCreateCrossOrderAsync(string flow, AlibabaTradeFastAddress addressParam, System.Collections.Generic.IEnumerable<AlibabaTradeFastCargo> cargoParamList, string message = null, AlibabaTradeFastInvoice invoiceParam = null, string tradeType = null, string shopPromotionId = null, bool? anonymousBuyer = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.createCrossOrder/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (flow == null)
                        throw new System.ArgumentNullException("flow");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(flow, System.Globalization.CultureInfo.InvariantCulture)), "flow");
                    }
                    if (addressParam == null)
                        throw new System.ArgumentNullException("addressParam");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(addressParam, System.Globalization.CultureInfo.InvariantCulture)), "addressParam");
                    }
                    if (cargoParamList == null)
                        throw new System.ArgumentNullException("cargoParamList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(cargoParamList, System.Globalization.CultureInfo.InvariantCulture)), "cargoParamList");
                    }
                    if (message != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture)), "message");
                    }
                    if (invoiceParam != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(invoiceParam, System.Globalization.CultureInfo.InvariantCulture)), "invoiceParam");
                    }
                    if (tradeType != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(tradeType, System.Globalization.CultureInfo.InvariantCulture)), "tradeType");
                    }
                    if (shopPromotionId != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(shopPromotionId, System.Globalization.CultureInfo.InvariantCulture)), "shopPromotionId");
                    }
                    if (anonymousBuyer != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(anonymousBuyer, System.Globalization.CultureInfo.InvariantCulture)), "anonymousBuyer");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradeCreateCrossOrderResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradeCreateCrossOrderResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>查询订单可以支持的支付渠道
        /// 查询未支付订单可以使用的支付方式或者支付渠道
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.payWay.query-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.payWay.query&amp;v=1</summary>
        /// <param name="orderId">订单号</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_2	- 没有权限获取该订单可支付方式。(检查授权用户，授权账号为买家，且必须为买家主账号。)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaTradePayWayQueryResult AlibabaTradePayWayQuery(string orderId)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaTradePayWayQueryAsync(orderId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>查询订单可以支持的支付渠道
        /// 查询未支付订单可以使用的支付方式或者支付渠道
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.trade.payWay.query-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.trade.payWay.query&amp;v=1</summary>
        /// <param name="orderId">订单号</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 500_2	- 没有权限获取该订单可支付方式。(检查授权用户，授权账号为买家，且必须为买家主账号。)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaTradePayWayQueryResult> AlibabaTradePayWayQueryAsync(string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.trade.payWay.query/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orderId == null)
                        throw new System.ArgumentNullException("orderId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)), "orderId");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaTradePayWayQueryResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaTradePayWayQueryResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>批量获取订单的支付链接
        /// 通过ERP付款时，可以通过本API获取批量支付的收银台的链接。
        /// 单个订单返回1688收银台地址，多个订单返回支付宝收银台地址。
        /// ERP可以引导用户跳转到收银台链接完成支付动作，支付前会校验用户在1688的登陆状态。
        /// 
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.alipay.url.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.alipay.url.get&amp;v=1</summary>
        /// <param name="orderIdList">订单Id列表,最多批量30个订单，订单过多会导致超时，建议一次10个订单</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// Batch pay : not surport MANUAL-TRADE!	- Batch pay : not surport MANUAL-TRADE!(未补充买家收件信息的邀约订单不能合并付款，是否邀约订单可以通过订单详情里面的baseInfo.sellerOrder字段判断)
        /// 操作库存失败:PRODUCT_TRADE_STAT_ERROR	- inventoryErrorIds:[16397675**722128**](存在付款减库存订单且扣减库存失败。)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaAlipayUrlGetResult AlibabaAlipayUrlGet(System.Collections.Generic.IEnumerable<long> orderIdList)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaAlipayUrlGetAsync(orderIdList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>批量获取订单的支付链接
        /// 通过ERP付款时，可以通过本API获取批量支付的收银台的链接。
        /// 单个订单返回1688收银台地址，多个订单返回支付宝收银台地址。
        /// ERP可以引导用户跳转到收银台链接完成支付动作，支付前会校验用户在1688的登陆状态。
        /// 
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.alipay.url.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.alipay.url.get&amp;v=1</summary>
        /// <param name="orderIdList">订单Id列表,最多批量30个订单，订单过多会导致超时，建议一次10个订单</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// Batch pay : not surport MANUAL-TRADE!	- Batch pay : not surport MANUAL-TRADE!(未补充买家收件信息的邀约订单不能合并付款，是否邀约订单可以通过订单详情里面的baseInfo.sellerOrder字段判断)
        /// 操作库存失败:PRODUCT_TRADE_STAT_ERROR	- inventoryErrorIds:[16397675**722128**](存在付款减库存订单且扣减库存失败。)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaAlipayUrlGetResult> AlibabaAlipayUrlGetAsync(System.Collections.Generic.IEnumerable<long> orderIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.alipay.url.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orderIdList == null)
                        throw new System.ArgumentNullException("orderIdList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderIdList, System.Globalization.CultureInfo.InvariantCulture)), "orderIdList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaAlipayUrlGetResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaAlipayUrlGetResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取使用跨境宝支付的支付链接
        /// 获取使用跨境宝支付的支付链接
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.crossBorderPay.url.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.crossBorderPay.url.get&amp;v=1</summary>
        /// <param name="orderIdList">订单Id列表,最多批量30个订单，订单过多会导致超时，建议一次10个订单</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400_4	- 无可使用支付渠道[跨境宝]付款的订单(订单列表里面没有可以使用跨境宝支付的订单)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCrossBorderPayUrlGetResult AlibabaCrossBorderPayUrlGet(System.Collections.Generic.IEnumerable<long> orderIdList)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCrossBorderPayUrlGetAsync(orderIdList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取使用跨境宝支付的支付链接
        /// 获取使用跨境宝支付的支付链接
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.crossBorderPay.url.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.crossBorderPay.url.get&amp;v=1</summary>
        /// <param name="orderIdList">订单Id列表,最多批量30个订单，订单过多会导致超时，建议一次10个订单</param>
        /// <returns>返回 ErrorCode 的错误信息
        /// 400_4	- 无可使用支付渠道[跨境宝]付款的订单(订单列表里面没有可以使用跨境宝支付的订单)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCrossBorderPayUrlGetResult> AlibabaCrossBorderPayUrlGetAsync(System.Collections.Generic.IEnumerable<long> orderIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.crossBorderPay.url.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orderIdList == null)
                        throw new System.ArgumentNullException("orderIdList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderIdList, System.Globalization.CultureInfo.InvariantCulture)), "orderIdList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCrossBorderPayUrlGetResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCrossBorderPayUrlGetResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>获取使用诚e赊支付的支付链接
        /// 获取使用诚e赊支付的支付链接
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.creditPay.url.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.creditPay.url.get&amp;v=1</summary>
        /// <param name="orderIdList">订单Id列表,最多批量30个订单，订单过多会导致超时，建议一次10个订单</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public AlibabaCreditPayUrlGetResult AlibabaCreditPayUrlGet(System.Collections.Generic.IEnumerable<long> orderIdList)
        {
            return System.Threading.Tasks.Task.Run(async () => await AlibabaCreditPayUrlGetAsync(orderIdList, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>获取使用诚e赊支付的支付链接
        /// 获取使用诚e赊支付的支付链接
        /// 
        /// 文档: https://open.1688.com/api/apidocdetail.htm?id=com.alibaba.trade:alibaba.creditPay.url.get-1 
        /// 调试:https://open.1688.com/api/apiTool.htm?ns=com.alibaba.trade&amp;n=alibaba.creditPay.url.get&amp;v=1</summary>
        /// <param name="orderIdList">订单Id列表,最多批量30个订单，订单过多会导致超时，建议一次10个订单</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlibabaCreditPayUrlGetResult> AlibabaCreditPayUrlGetAsync(System.Collections.Generic.IEnumerable<long> orderIdList, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/openapi/param2/1/com.alibaba.trade/alibaba.creditPay.url.get/{AppKey}");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (orderIdList == null)
                        throw new System.ArgumentNullException("orderIdList");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(orderIdList, System.Globalization.CultureInfo.InvariantCulture)), "orderIdList");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlibabaCreditPayUrlGetResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlibabaCreditPayUrlGetResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
    }

    

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108